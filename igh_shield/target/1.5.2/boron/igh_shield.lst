
d:/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000076c4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db6e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000009c  2003d98c  000db6e4  0001d98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000dc8  2003da28  2003da28  0002da28  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000db780  000db780  0002b780  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db7a8  000db7a8  0002b7a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001dc9e5  00000000  00000000  0002b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00028095  00000000  00000000  00208191  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032d6e  00000000  00000000  00230226  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003988  00000000  00000000  00262f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006aa0  00000000  00000000  0026691c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005ebc9  00000000  00000000  0026d3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000702d2  00000000  00000000  002cbf85  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011c6f3  00000000  00000000  0033c257  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000107fc  00000000  00000000  0045894c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f006 ff22 	bl	dae76 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f006 ff27 	bl	dae8c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d98c 	.word	0x2003d98c
   d4048:	000db6e4 	.word	0x000db6e4
   d404c:	2003da28 	.word	0x2003da28
   d4050:	2003da28 	.word	0x2003da28
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f005 f951 	bl	d9300 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000db6d8 	.word	0x000db6d8
   d4080:	000db634 	.word	0x000db634

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bac4 	b.w	d4610 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fac3 	bl	d4614 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f005 b8f7 	b.w	d9284 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f004 bc29 	b.w	d88ec <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f004 bc27 	b.w	d88ec <malloc>

000d409e <_ZdlPv>:
   d409e:	f004 bc2d 	b.w	d88fc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f004 bc2b 	b.w	d88fc <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <igh_settings_process_settings_tuples>:
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d40bc:	4fab      	ldr	r7, [pc, #684]	; (d436c <igh_settings_process_settings_tuples+0x2b4>)
            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d40be:	f8df 82bc 	ldr.w	r8, [pc, #700]	; d437c <igh_settings_process_settings_tuples+0x2c4>
                    mqtt_set_broker = 1;
   d40c2:	f8df 92bc 	ldr.w	r9, [pc, #700]	; d4380 <igh_settings_process_settings_tuples+0x2c8>
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40c6:	4605      	mov	r5, r0
   d40c8:	468b      	mov	fp, r1
   d40ca:	4692      	mov	sl, r2
    //cycle through tuples to get the settings data
    uint8_t current_tuple_id;
    uint8_t current_tuple_length;
    uint8_t current_data_index;

    while(byte_tracker < end_index)
   d40cc:	45d3      	cmp	fp, sl
   d40ce:	f080 81b2 	bcs.w	d4436 <igh_settings_process_settings_tuples+0x37e>
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40d2:	eb05 030b 	add.w	r3, r5, fp
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40d6:	f10b 0402 	add.w	r4, fp, #2
    while(byte_tracker < end_index)
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40da:	785e      	ldrb	r6, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch(current_tuple_id)
   d40dc:	f815 300b 	ldrb.w	r3, [r5, fp]
   d40e0:	3b01      	subs	r3, #1
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40e2:	b2e4      	uxtb	r4, r4

        switch(current_tuple_id)
   d40e4:	2b39      	cmp	r3, #57	; 0x39
   d40e6:	f200 81a0 	bhi.w	d442a <igh_settings_process_settings_tuples+0x372>
   d40ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   d40ee:	003a      	.short	0x003a
   d40f0:	00820071 	.word	0x00820071
   d40f4:	00930063 	.word	0x00930063
   d40f8:	004400a6 	.word	0x004400a6
   d40fc:	019e005c 	.word	0x019e005c
   d4100:	019e019e 	.word	0x019e019e
   d4104:	019e019e 	.word	0x019e019e
   d4108:	019e019e 	.word	0x019e019e
   d410c:	00c800b4 	.word	0x00c800b4
   d4110:	00f000dc 	.word	0x00f000dc
   d4114:	01180104 	.word	0x01180104
   d4118:	014b0135 	.word	0x014b0135
   d411c:	016f015d 	.word	0x016f015d
   d4120:	019e0181 	.word	0x019e0181
   d4124:	019e019e 	.word	0x019e019e
   d4128:	019e019e 	.word	0x019e019e
   d412c:	019e019e 	.word	0x019e019e
   d4130:	019e019e 	.word	0x019e019e
   d4134:	019e019e 	.word	0x019e019e
   d4138:	019e019e 	.word	0x019e019e
   d413c:	019e019e 	.word	0x019e019e
   d4140:	019e019e 	.word	0x019e019e
   d4144:	019e019e 	.word	0x019e019e
   d4148:	019e019e 	.word	0x019e019e
   d414c:	00d200be 	.word	0x00d200be
   d4150:	00fa00e6 	.word	0x00fa00e6
   d4154:	0122010e 	.word	0x0122010e
   d4158:	0154012c 	.word	0x0154012c
   d415c:	01780166 	.word	0x01780166
   d4160:	0190      	.short	0x0190
        {
            case SUBID_OPSTATE:
                if(LENGTH_SUBID_OPSTATE == current_tuple_length)
   d4162:	2e01      	cmp	r6, #1
   d4164:	f040 816a 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    // check if new state is valid
                    if( (OP_INACTIVE == (settings[current_data_index]))|| 
   d4168:	5d2b      	ldrb	r3, [r5, r4]
   d416a:	2b03      	cmp	r3, #3
   d416c:	f200 815d 	bhi.w	d442a <igh_settings_process_settings_tuples+0x372>
                        (OP_BASIC == (settings[current_data_index]))||
                        (OP_STANDARD == (settings[current_data_index]))||
                        (OP_PREMIUM == (settings[current_data_index]))  
                    )
                    {
                        igh_current_system_settings.op_state = (device_op_state)settings[current_data_index];
   d4170:	f888 3009 	strb.w	r3, [r8, #9]
   d4174:	e159      	b.n	d442a <igh_settings_process_settings_tuples+0x372>
                    return 0;
                }
                break;

            case SUBID_TIMEZONE:
                if(LENGTH_SUBID_SUBID_TIMEZONE == current_tuple_length)
   d4176:	2e02      	cmp	r6, #2
   d4178:	f040 8160 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    // check if new timezone is valid
                    if( POSITIVE_TIME_ZONE == settings[current_data_index] )
   d417c:	5d2b      	ldrb	r3, [r5, r4]
   d417e:	2bff      	cmp	r3, #255	; 0xff
   d4180:	d105      	bne.n	d418e <igh_settings_process_settings_tuples+0xd6>
                    {
                        if( MAX_TIMEZONE > settings[current_data_index + 1] )
   d4182:	442c      	add	r4, r5
   d4184:	7863      	ldrb	r3, [r4, #1]
   d4186:	2b0b      	cmp	r3, #11
   d4188:	f200 814f 	bhi.w	d442a <igh_settings_process_settings_tuples+0x372>
   d418c:	e008      	b.n	d41a0 <igh_settings_process_settings_tuples+0xe8>
                        {
                            igh_current_system_settings.timezone = (int)settings[current_data_index + 1];
                        }
                    }

                    else if( NEGATIVE_TIME_ZONE == settings[current_data_index] )
   d418e:	2b00      	cmp	r3, #0
   d4190:	f040 814b 	bne.w	d442a <igh_settings_process_settings_tuples+0x372>
                    {
                        if( MAX_TIMEZONE > settings[current_data_index + 1] )
   d4194:	442c      	add	r4, r5
   d4196:	7863      	ldrb	r3, [r4, #1]
   d4198:	2b0b      	cmp	r3, #11
   d419a:	f200 8146 	bhi.w	d442a <igh_settings_process_settings_tuples+0x372>
                        {
                            igh_current_system_settings.timezone = -1 * settings[current_data_index + 1];
   d419e:	425b      	negs	r3, r3
   d41a0:	f8c8 3004 	str.w	r3, [r8, #4]
   d41a4:	e141      	b.n	d442a <igh_settings_process_settings_tuples+0x372>
                    return 0;
                }
                break;

            case SUBID_IRRIGATION_HR:
                if(LENGTH_SUBID_SUBID_IRRIGATION_HR == current_tuple_length)
   d41a6:	2e01      	cmp	r6, #1
   d41a8:	f040 8148 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    // check if the time is within 24 hours
                    if( MAX_HOUR >  (settings[current_data_index]) ||
                        MIN_HOUR <= (settings[current_data_index]))
                    {
                        igh_current_system_settings.irrigation_hr = settings[current_data_index];
   d41ac:	5d2b      	ldrb	r3, [r5, r4]
   d41ae:	f888 3008 	strb.w	r3, [r8, #8]
   d41b2:	e13a      	b.n	d442a <igh_settings_process_settings_tuples+0x372>
                    return 0;
                }
                break;

            case SUBID_SET_SERIAL_NUMBER:
                if(LENGTH_SUBID_SET_SERIAL_NUMBER == current_tuple_length)
   d41b4:	2e0c      	cmp	r6, #12
   d41b6:	f040 8141 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    memcpy(igh_current_system_settings.serial_number, &settings[current_data_index], LENGTH_SUBID_SET_SERIAL_NUMBER);
   d41ba:	442c      	add	r4, r5
   d41bc:	4b6c      	ldr	r3, [pc, #432]	; (d4370 <igh_settings_process_settings_tuples+0x2b8>)
   d41be:	6820      	ldr	r0, [r4, #0]
   d41c0:	6861      	ldr	r1, [r4, #4]
   d41c2:	c303      	stmia	r3!, {r0, r1}
   d41c4:	68a0      	ldr	r0, [r4, #8]
   d41c6:	6018      	str	r0, [r3, #0]
                    initialize_rfm69 = 1;
   d41c8:	4b6a      	ldr	r3, [pc, #424]	; (d4374 <igh_settings_process_settings_tuples+0x2bc>)
   d41ca:	2201      	movs	r2, #1
   d41cc:	701a      	strb	r2, [r3, #0]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41ce:	e12c      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_REPORTING_INTERVAL:
                if(LENGTH_SUBID_REPORTING_INTERVAL == current_tuple_length)
   d41d0:	2e04      	cmp	r6, #4
   d41d2:	f040 8133 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_reporting_interval[LENGTH_SUBID_REPORTING_INTERVAL]; 
                    memcpy(new_reporting_interval, &settings[current_data_index], LENGTH_SUBID_REPORTING_INTERVAL);
   d41d6:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.reporting_interval = GET32(new_reporting_interval);
   d41d8:	5d2a      	ldrb	r2, [r5, r4]
   d41da:	784b      	ldrb	r3, [r1, #1]
   d41dc:	041b      	lsls	r3, r3, #16
   d41de:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41e2:	78ca      	ldrb	r2, [r1, #3]
   d41e4:	4413      	add	r3, r2
   d41e6:	788a      	ldrb	r2, [r1, #2]
   d41e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41ec:	f8c8 300c 	str.w	r3, [r8, #12]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41f0:	e11b      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_DATA_RESOLUTION:
                if(LENGTH_SUBID_DATA_RESOLUTION == current_tuple_length)
   d41f2:	2e04      	cmp	r6, #4
   d41f4:	f040 8122 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_data_resolution[LENGTH_SUBID_DATA_RESOLUTION]; 
                    memcpy(new_data_resolution, &settings[current_data_index], LENGTH_SUBID_DATA_RESOLUTION);
   d41f8:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.data_resolution = GET32(new_data_resolution);
   d41fa:	5d2a      	ldrb	r2, [r5, r4]
   d41fc:	784b      	ldrb	r3, [r1, #1]
   d41fe:	041b      	lsls	r3, r3, #16
   d4200:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4204:	78ca      	ldrb	r2, [r1, #3]
   d4206:	4413      	add	r3, r2
   d4208:	788a      	ldrb	r2, [r1, #2]
   d420a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d420e:	f8c8 3010 	str.w	r3, [r8, #16]
                }
                else
                {
                    return 0;
                }
                break;
   d4212:	e10a      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_MQTT_BROKER:
                if( sizeof(igh_current_system_settings.broker) > current_tuple_length)
   d4214:	2e1f      	cmp	r6, #31
   d4216:	f200 8111 	bhi.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    memset(igh_current_system_settings.broker, '\0', sizeof(igh_current_system_settings.broker));
   d421a:	2220      	movs	r2, #32
   d421c:	2100      	movs	r1, #0
   d421e:	4856      	ldr	r0, [pc, #344]	; (d4378 <igh_settings_process_settings_tuples+0x2c0>)
   d4220:	f006 fe34 	bl	dae8c <memset>
                    memcpy(igh_current_system_settings.broker, &settings[current_data_index], current_tuple_length);
   d4224:	4632      	mov	r2, r6
   d4226:	1929      	adds	r1, r5, r4
   d4228:	4853      	ldr	r0, [pc, #332]	; (d4378 <igh_settings_process_settings_tuples+0x2c0>)
   d422a:	f006 fe24 	bl	dae76 <memcpy>
                    igh_current_system_settings.broker[current_tuple_length] = '\0'; // terminate the string
   d422e:	eb08 0306 	add.w	r3, r8, r6
   d4232:	2200      	movs	r2, #0
   d4234:	f883 2020 	strb.w	r2, [r3, #32]
   d4238:	e009      	b.n	d424e <igh_settings_process_settings_tuples+0x196>
                    return 0;
                }
                break;

            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
   d423a:	2e02      	cmp	r6, #2
   d423c:	f040 80fe 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
   d4240:	192b      	adds	r3, r5, r4
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d4242:	5d2a      	ldrb	r2, [r5, r4]
   d4244:	785b      	ldrb	r3, [r3, #1]
   d4246:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d424a:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
                    mqtt_set_broker = 1;
   d424e:	2301      	movs	r3, #1
   d4250:	f889 3000 	strb.w	r3, [r9]
                }
                else
                {
                    return 0;
                }
                break; 
   d4254:	e0e9      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_MOISTURE_LOW:
                if(LENGTH_SUBID_SOIL_MOISTURE_LOW == current_tuple_length)
   d4256:	2e02      	cmp	r6, #2
   d4258:	f040 80f0 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_moisture_low_th[LENGTH_SUBID_SOIL_MOISTURE_LOW]; 
                    memcpy(new_moisture_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d425c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_low = GET16(new_moisture_low_th);
   d425e:	5d2a      	ldrb	r2, [r5, r4]
   d4260:	785b      	ldrb	r3, [r3, #1]
   d4262:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4266:	807b      	strh	r3, [r7, #2]
                }
                else
                {
                    return 0;
                }
                break; 
   d4268:	e0df      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_MOISTURE_HIGH:
                if(LENGTH_SUBID_SOIL_MOISTURE_HIGH == current_tuple_length)
   d426a:	2e02      	cmp	r6, #2
   d426c:	f040 80e6 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_moisture_high_th[LENGTH_SUBID_SOIL_MOISTURE_HIGH]; 
                    memcpy(new_moisture_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d4270:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_high = GET16(new_moisture_high_th);
   d4272:	5d2a      	ldrb	r2, [r5, r4]
   d4274:	785b      	ldrb	r3, [r3, #1]
   d4276:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d427a:	83bb      	strh	r3, [r7, #28]
                }
                else
                {
                    return 0;
                }
                break; 
   d427c:	e0d5      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_HUMIDITY_LOW:
                if(LENGTH_SUBID_AIR_HUMIDITY_LOW  == current_tuple_length)
   d427e:	2e02      	cmp	r6, #2
   d4280:	f040 80dc 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_humidity_low_th[LENGTH_SUBID_AIR_HUMIDITY_LOW]; 
                    memcpy(new_air_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_LOW);
   d4284:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_low = GET16(new_air_humidity_low_th);
   d4286:	5d2a      	ldrb	r2, [r5, r4]
   d4288:	785b      	ldrb	r3, [r3, #1]
   d428a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d428e:	80bb      	strh	r3, [r7, #4]
                }
                else
                {
                    return 0;
                }
                break; 
   d4290:	e0cb      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_HUMIDITY_HIGH:
                if(LENGTH_SUBID_AIR_HUMIDITY_HIGH  == current_tuple_length)
   d4292:	2e02      	cmp	r6, #2
   d4294:	f040 80d2 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_humidity_high_th[LENGTH_SUBID_AIR_HUMIDITY_HIGH]; 
                    memcpy(new_air_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_HIGH);
   d4298:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_high = GET16(new_air_humidity_high_th);
   d429a:	5d2a      	ldrb	r2, [r5, r4]
   d429c:	785b      	ldrb	r3, [r3, #1]
   d429e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42a2:	83fb      	strh	r3, [r7, #30]
                }
                else
                {
                    return 0;
                }
                break;
   d42a4:	e0c1      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_HUMIDITY_LOW:
                if(LENGTH_SUBID_SOIL_HUMIDITY_LOW  == current_tuple_length)
   d42a6:	2e02      	cmp	r6, #2
   d42a8:	f040 80c8 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_humidity_low_th[LENGTH_SUBID_SOIL_HUMIDITY_LOW]; 
                    memcpy(new_soil_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_LOW);
   d42ac:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_low = GET16(new_soil_humidity_low_th);
   d42ae:	5d2a      	ldrb	r2, [r5, r4]
   d42b0:	785b      	ldrb	r3, [r3, #1]
   d42b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42b6:	80fb      	strh	r3, [r7, #6]
                }
                else
                {
                    return 0;
                }
                break; 
   d42b8:	e0b7      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_HUMIDITY_HIGH:
                if(LENGTH_SUBID_SOIL_HUMIDITY_HIGH  == current_tuple_length)
   d42ba:	2e02      	cmp	r6, #2
   d42bc:	f040 80be 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_humidity_high_th[LENGTH_SUBID_SOIL_HUMIDITY_HIGH]; 
                    memcpy(new_soil_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_HIGH);
   d42c0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_high = GET16(new_soil_humidity_high_th);
   d42c2:	5d2a      	ldrb	r2, [r5, r4]
   d42c4:	785b      	ldrb	r3, [r3, #1]
   d42c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42ca:	843b      	strh	r3, [r7, #32]
                }
                else
                {
                    return 0;
                }
                break;
   d42cc:	e0ad      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_CARBON_DIOXIDE_LOW:
                if(LENGTH_SUBID_CARBON_DIOXIDE_LOW  == current_tuple_length)
   d42ce:	2e02      	cmp	r6, #2
   d42d0:	f040 80b4 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_carbon_dioxide_low_th[LENGTH_SUBID_CARBON_DIOXIDE_LOW]; 
                    memcpy(new_carbon_dioxide_low_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_LOW);
   d42d4:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_low = GET16(new_carbon_dioxide_low_th);
   d42d6:	5d2a      	ldrb	r2, [r5, r4]
   d42d8:	785b      	ldrb	r3, [r3, #1]
   d42da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42de:	813b      	strh	r3, [r7, #8]
                }
                else
                {
                    return 0;
                }
                break; 
   d42e0:	e0a3      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_CARBON_DIOXIDE_HIGH:
                if(LENGTH_SUBID_CARBON_DIOXIDE_HIGH  == current_tuple_length)
   d42e2:	2e02      	cmp	r6, #2
   d42e4:	f040 80aa 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_carbon_dioxide_high_th[LENGTH_SUBID_CARBON_DIOXIDE_HIGH]; 
                    memcpy(new_carbon_dioxide_high_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_HIGH);
   d42e8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_high = GET16(new_carbon_dioxide_high_th);
   d42ea:	5d2a      	ldrb	r2, [r5, r4]
   d42ec:	785b      	ldrb	r3, [r3, #1]
   d42ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42f2:	847b      	strh	r3, [r7, #34]	; 0x22
                }
                else
                {
                    return 0;
                }
                break;
   d42f4:	e099      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_TEMPERATURE_LOW:
                if(LENGTH_SUBID_AIR_TEMPERATURE_LOW  == current_tuple_length)
   d42f6:	2e02      	cmp	r6, #2
   d42f8:	f040 80a0 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_temperature_low_th[LENGTH_SUBID_AIR_TEMPERATURE_LOW]; 
                    memcpy(new_air_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_LOW);
   d42fc:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_low = GET16(new_air_temperature_low_th);
   d42fe:	5d2a      	ldrb	r2, [r5, r4]
   d4300:	785b      	ldrb	r3, [r3, #1]
   d4302:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4306:	817b      	strh	r3, [r7, #10]
                }
                else
                {
                    return 0;
                }
                break; 
   d4308:	e08f      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_AIR_TEMPERATURE_HIGH  == current_tuple_length)
   d430a:	2e02      	cmp	r6, #2
   d430c:	f040 8096 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_temperature_high_th[LENGTH_SUBID_AIR_TEMPERATURE_HIGH]; 
                    memcpy(new_air_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_HIGH);
   d4310:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_high = GET16(new_air_temperature_high_th);
   d4312:	5d2a      	ldrb	r2, [r5, r4]
   d4314:	785b      	ldrb	r3, [r3, #1]
   d4316:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d431a:	84bb      	strh	r3, [r7, #36]	; 0x24
                }
                else
                {
                    return 0;
                }
                break;
   d431c:	e085      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_TEMPERATURE_LOW:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_LOW  == current_tuple_length)
   d431e:	2e02      	cmp	r6, #2
   d4320:	f040 808c 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_temperature_low_th[LENGTH_SUBID_SOIL_TEMPERATURE_LOW]; 
                    memcpy(new_soil_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_LOW);
   d4324:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_low = GET16(new_soil_temperature_low_th);
   d4326:	5d2a      	ldrb	r2, [r5, r4]
   d4328:	785b      	ldrb	r3, [r3, #1]
   d432a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d432e:	81bb      	strh	r3, [r7, #12]
                }
                else
                {
                    return 0;
                }
                break; 
   d4330:	e07b      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_HIGH  == current_tuple_length)
   d4332:	2e02      	cmp	r6, #2
   d4334:	f040 8082 	bne.w	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_temperature_high_th[LENGTH_SUBID_SOIL_TEMPERATURE_HIGH]; 
                    memcpy(new_soil_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_HIGH);
   d4338:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_high = GET16(new_soil_temperature_high_th);
   d433a:	5d2a      	ldrb	r2, [r5, r4]
   d433c:	785b      	ldrb	r3, [r3, #1]
   d433e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4342:	84fb      	strh	r3, [r7, #38]	; 0x26
                }
                else
                {
                    return 0;
                }
                break;    
   d4344:	e071      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_NPK_HIGH:
                if(LENGTH_SUBID_SOIL_NPK_HIGH  == current_tuple_length)
   d4346:	2e02      	cmp	r6, #2
   d4348:	d178      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_npk_high_th[LENGTH_SUBID_SOIL_NPK_HIGH]; 
                    memcpy(new_soil_npk_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_HIGH);
   d434a:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_high = GET16(new_soil_npk_high_th);
   d434c:	5d2a      	ldrb	r2, [r5, r4]
   d434e:	785b      	ldrb	r3, [r3, #1]
   d4350:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4354:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                else
                {
                    return 0;
                }
                break;   
   d4356:	e068      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_NPK_LOW:
                if(LENGTH_SUBID_SOIL_NPK_LOW  == current_tuple_length)
   d4358:	2e02      	cmp	r6, #2
   d435a:	d16f      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_npk_low_th[LENGTH_SUBID_SOIL_NPK_LOW]; 
                    memcpy(new_soil_npk_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_LOW);
   d435c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_low = GET16(new_soil_npk_low_th);
   d435e:	5d2a      	ldrb	r2, [r5, r4]
   d4360:	785b      	ldrb	r3, [r3, #1]
   d4362:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4366:	81fb      	strh	r3, [r7, #14]
                }
                else
                {
                    return 0;
                }
                break; 
   d4368:	e05f      	b.n	d442a <igh_settings_process_settings_tuples+0x372>
   d436a:	bf00      	nop
   d436c:	2003e654 	.word	0x2003e654
   d4370:	2003e620 	.word	0x2003e620
   d4374:	2003da2d 	.word	0x2003da2d
   d4378:	2003e62c 	.word	0x2003e62c
   d437c:	2003e60c 	.word	0x2003e60c
   d4380:	2003d98c 	.word	0x2003d98c

            case SUBID_LIGHT_INTENSITY_LOW:
                if(LENGTH_SUBID_LIGHT_INTENSITY_LOW  == current_tuple_length)
   d4384:	2e02      	cmp	r6, #2
   d4386:	d159      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_light_intensity_low_th[LENGTH_SUBID_LIGHT_INTENSITY_LOW]; 
                    memcpy(new_light_intensity_low_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_LOW);
   d4388:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_low = GET16(new_light_intensity_low_th);
   d438a:	5d2a      	ldrb	r2, [r5, r4]
   d438c:	785b      	ldrb	r3, [r3, #1]
   d438e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4392:	823b      	strh	r3, [r7, #16]
                }
                else
                {
                    return 0;
                }
                break; 
   d4394:	e049      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_LIGHT_INTENSITY_HIGH:
                if(LENGTH_SUBID_LIGHT_INTENSITY_HIGH  == current_tuple_length)
   d4396:	2e02      	cmp	r6, #2
   d4398:	d150      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_light_intensity_high_th[LENGTH_SUBID_LIGHT_INTENSITY_HIGH]; 
                    memcpy(new_light_intensity_high_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_HIGH);
   d439a:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_high = GET16(new_light_intensity_high_th);
   d439c:	5d2a      	ldrb	r2, [r5, r4]
   d439e:	785b      	ldrb	r3, [r3, #1]
   d43a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43a4:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
                else
                {
                    return 0;
                }
                break; 
   d43a6:	e040      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SHIELD_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW  == current_tuple_length)
   d43a8:	2e02      	cmp	r6, #2
   d43aa:	d147      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_shield_battery_low_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW]; 
                    memcpy(new_shield_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW);
   d43ac:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_low = GET16(new_shield_battery_low_th);
   d43ae:	5d2a      	ldrb	r2, [r5, r4]
   d43b0:	785b      	ldrb	r3, [r3, #1]
   d43b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43b6:	827b      	strh	r3, [r7, #18]
                }
                else
                {
                    return 0;
                }
                break;
   d43b8:	e037      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SHIELD_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d43ba:	2e02      	cmp	r6, #2
   d43bc:	d13e      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_shield_battery_high_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_shield_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH);
   d43be:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_high = GET16(new_shield_battery_high_th);
   d43c0:	5d2a      	ldrb	r2, [r5, r4]
   d43c2:	785b      	ldrb	r3, [r3, #1]
   d43c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
                else
                {
                    return 0;
                }
                break;  
   d43ca:	e02e      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SPEAR_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW  == current_tuple_length)
   d43cc:	2e02      	cmp	r6, #2
   d43ce:	d135      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_spear_battery_low_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW]; 
                    memcpy(new_spear_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW);
   d43d0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_low = GET16(new_spear_battery_low_th);
   d43d2:	5d2a      	ldrb	r2, [r5, r4]
   d43d4:	785b      	ldrb	r3, [r3, #1]
   d43d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43da:	82bb      	strh	r3, [r7, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d43dc:	e025      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_SPEAR_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d43de:	2e02      	cmp	r6, #2
   d43e0:	d12c      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_spear_battery_high_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_spear_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH);
   d43e2:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_high = GET16(new_spear_battery_high_th);
   d43e4:	5d2a      	ldrb	r2, [r5, r4]
   d43e6:	785b      	ldrb	r3, [r3, #1]
   d43e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
                else
                {
                    return 0;
                }
                break;
   d43ee:	e01c      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_WATER_DISPENSED_PERIOD_LOW:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW == current_tuple_length)
   d43f0:	2e04      	cmp	r6, #4
   d43f2:	d123      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_water_dispensed_period_low[LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW]; 
                    memcpy(new_water_dispensed_period_low, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW);
   d43f4:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_low = GET32(new_water_dispensed_period_low);
   d43f6:	5d2a      	ldrb	r2, [r5, r4]
   d43f8:	784b      	ldrb	r3, [r1, #1]
   d43fa:	041b      	lsls	r3, r3, #16
   d43fc:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4400:	78ca      	ldrb	r2, [r1, #3]
   d4402:	4413      	add	r3, r2
   d4404:	788a      	ldrb	r2, [r1, #2]
   d4406:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d440a:	61bb      	str	r3, [r7, #24]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d440c:	e00d      	b.n	d442a <igh_settings_process_settings_tuples+0x372>

            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
   d440e:	2e04      	cmp	r6, #4
   d4410:	d114      	bne.n	d443c <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
   d4412:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d4414:	5d2a      	ldrb	r2, [r5, r4]
   d4416:	784b      	ldrb	r3, [r1, #1]
   d4418:	041b      	lsls	r3, r3, #16
   d441a:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d441e:	78ca      	ldrb	r2, [r1, #3]
   d4420:	4413      	add	r3, r2
   d4422:	788a      	ldrb	r2, [r1, #2]
   d4424:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4428:	633b      	str	r3, [r7, #48]	; 0x30

            default: // nothing to do hear
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d442a:	1cb3      	adds	r3, r6, #2
   d442c:	eb0b 0603 	add.w	r6, fp, r3
   d4430:	fa5f fb86 	uxtb.w	fp, r6
   d4434:	e64a      	b.n	d40cc <igh_settings_process_settings_tuples+0x14>
    }
    return 1;
   d4436:	2001      	movs	r0, #1
   d4438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    
                }
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
   d443c:	2000      	movs	r0, #0
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }
    return 1;
}
   d443e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4442:	bf00      	nop

000d4444 <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d4444:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d4446:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d4448:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d444a:	b2c9      	uxtb	r1, r1
   d444c:	1a14      	subs	r4, r2, r0
   d444e:	42a1      	cmp	r1, r4
   d4450:	dd03      	ble.n	d445a <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d4452:	f812 4b01 	ldrb.w	r4, [r2], #1
   d4456:	4423      	add	r3, r4
   d4458:	e7f8      	b.n	d444c <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d445a:	b2d8      	uxtb	r0, r3
   d445c:	bd10      	pop	{r4, pc}
	...

000d4460 <igh_settings_parse_new_settings>:
    }
    return 1;
}

uint8_t igh_settings_parse_new_settings(uint8_t * settings)
{
   d4460:	b510      	push	{r4, lr}
    // get the length
    uint8_t length = settings[PAYLOAD_LEN_INDEX]; // byte at position one should always be length
   d4462:	7c82      	ldrb	r2, [r0, #18]
    // guard the process
    if(0 >= length)
   d4464:	b90a      	cbnz	r2, d446a <igh_settings_parse_new_settings+0xa>
    {
        return 0; // do not allow settings with zero payload to be processed
   d4466:	2000      	movs	r0, #0
   d4468:	bd10      	pop	{r4, pc}
    // get index of last byte to process
    uint8_t settings_end_index = FIRST_TUPLE_INDEX + length;
    // get the location of first tuple
    uint8_t settings_byte_tracker = FIRST_TUPLE_INDEX;
    
    if( 0 == igh_settings_process_settings_tuples( settings, settings_byte_tracker, settings_end_index ) ) 
   d446a:	3213      	adds	r2, #19
   d446c:	b2d2      	uxtb	r2, r2
   d446e:	2113      	movs	r1, #19
   d4470:	f7ff fe22 	bl	d40b8 <igh_settings_process_settings_tuples>
   d4474:	2800      	cmp	r0, #0
   d4476:	d0f6      	beq.n	d4466 <igh_settings_parse_new_settings+0x6>
        return 0;
    }
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4478:	4c07      	ldr	r4, [pc, #28]	; (d4498 <igh_settings_parse_new_settings+0x38>)
   d447a:	2144      	movs	r1, #68	; 0x44
   d447c:	4620      	mov	r0, r4
   d447e:	f7ff ffe1 	bl	d4444 <igh_settings_calculate_checksum>
   d4482:	7020      	strb	r0, [r4, #0]
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4484:	4c05      	ldr	r4, [pc, #20]	; (d449c <igh_settings_parse_new_settings+0x3c>)
   d4486:	2134      	movs	r1, #52	; 0x34
   d4488:	4620      	mov	r0, r4
   d448a:	f7ff ffdb 	bl	d4444 <igh_settings_calculate_checksum>
        
        new_settings_available = 1;
   d448e:	4b04      	ldr	r3, [pc, #16]	; (d44a0 <igh_settings_parse_new_settings+0x40>)
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4490:	7020      	strb	r0, [r4, #0]
        
        new_settings_available = 1;
   d4492:	2001      	movs	r0, #1
   d4494:	7018      	strb	r0, [r3, #0]
    }
    
    return 1;
}
   d4496:	bd10      	pop	{r4, pc}
   d4498:	2003e60c 	.word	0x2003e60c
   d449c:	2003e654 	.word	0x2003e654
   d44a0:	2003da2c 	.word	0x2003da2c

000d44a4 <igh_settings_process_settings>:
 */
uint8_t igh_settings_process_settings(uint8_t * settings)
{
    uint8_t ret = 0; 
    igh_pkt_id settings_type = (igh_pkt_id)settings[PAYLOAD_INDEX];
    switch(settings_type)
   d44a4:	7c42      	ldrb	r2, [r0, #17]
   d44a6:	2a0f      	cmp	r2, #15
   d44a8:	d003      	beq.n	d44b2 <igh_settings_process_settings+0xe>
   d44aa:	2a10      	cmp	r2, #16
   d44ac:	d108      	bne.n	d44c0 <igh_settings_process_settings+0x1c>
    {
        case VALVE_POSITION:
            ret = igh_settings_remote_valvle_control(settings);
            break;
        case IGH_SEND_SETTINGS:
            ret = igh_settings_parse_new_settings(settings);
   d44ae:	f7ff bfd7 	b.w	d4460 <igh_settings_parse_new_settings>
    return buffer_index_tracker;
}

LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
   d44b2:	7cc3      	ldrb	r3, [r0, #19]
   d44b4:	2b01      	cmp	r3, #1
   d44b6:	d803      	bhi.n	d44c0 <igh_settings_process_settings+0x1c>
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d44b8:	4a02      	ldr	r2, [pc, #8]	; (d44c4 <igh_settings_process_settings+0x20>)
        return 1;
   d44ba:	2001      	movs	r0, #1
LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d44bc:	7013      	strb	r3, [r2, #0]
   d44be:	4770      	bx	lr
        return 1;
    }

    return 0;
   d44c0:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
   d44c2:	4770      	bx	lr
   d44c4:	2003e650 	.word	0x2003e650

000d44c8 <igh_settings_reset_system_to_default>:
    
    return 1;
}

void igh_settings_reset_system_to_default(void)
{
   d44c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
   d44ca:	4c31      	ldr	r4, [pc, #196]	; (d4590 <igh_settings_reset_system_to_default+0xc8>)
   d44cc:	2244      	movs	r2, #68	; 0x44
   d44ce:	2100      	movs	r1, #0
   d44d0:	4620      	mov	r0, r4
   d44d2:	f006 fcdb 	bl	dae8c <memset>
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
   d44d6:	2303      	movs	r3, #3
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44d8:	4a2e      	ldr	r2, [pc, #184]	; (d4594 <igh_settings_reset_system_to_default+0xcc>)

LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
   d44da:	6063      	str	r3, [r4, #4]
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
   d44dc:	2306      	movs	r3, #6
   d44de:	7223      	strb	r3, [r4, #8]
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d44e0:	f44f 63e1 	mov.w	r3, #1800	; 0x708
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44e4:	6810      	ldr	r0, [r2, #0]
   d44e6:	6851      	ldr	r1, [r2, #4]
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d44e8:	60e3      	str	r3, [r4, #12]
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
   d44ea:	f44f 7316 	mov.w	r3, #600	; 0x258
   d44ee:	6123      	str	r3, [r4, #16]
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44f0:	f104 0314 	add.w	r3, r4, #20
   d44f4:	c303      	stmia	r3!, {r0, r1}
   d44f6:	6890      	ldr	r0, [r2, #8]
   d44f8:	6018      	str	r0, [r3, #0]
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
   d44fa:	4b27      	ldr	r3, [pc, #156]	; (d4598 <igh_settings_reset_system_to_default+0xd0>)
   d44fc:	f104 0220 	add.w	r2, r4, #32
   d4500:	f103 0610 	add.w	r6, r3, #16
   d4504:	6818      	ldr	r0, [r3, #0]
   d4506:	6859      	ldr	r1, [r3, #4]
   d4508:	4615      	mov	r5, r2
   d450a:	c503      	stmia	r5!, {r0, r1}
   d450c:	3308      	adds	r3, #8
   d450e:	42b3      	cmp	r3, r6
   d4510:	462a      	mov	r2, r5
   d4512:	d1f7      	bne.n	d4504 <igh_settings_reset_system_to_default+0x3c>
   d4514:	881b      	ldrh	r3, [r3, #0]
   d4516:	802b      	strh	r3, [r5, #0]
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d4518:	2144      	movs	r1, #68	; 0x44
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d451a:	f240 735b 	movw	r3, #1883	; 0x75b
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d451e:	481c      	ldr	r0, [pc, #112]	; (d4590 <igh_settings_reset_system_to_default+0xc8>)
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d4520:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d4524:	f7ff ff8e 	bl	d4444 <igh_settings_calculate_checksum>
   d4528:	7020      	strb	r0, [r4, #0]

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d452a:	4c1c      	ldr	r4, [pc, #112]	; (d459c <igh_settings_reset_system_to_default+0xd4>)
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d452c:	4f1c      	ldr	r7, [pc, #112]	; (d45a0 <igh_settings_reset_system_to_default+0xd8>)
    igh_current_threshold_settings = igh_default_thresholds;
   d452e:	4e1d      	ldr	r6, [pc, #116]	; (d45a4 <igh_settings_reset_system_to_default+0xdc>)
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d4530:	2234      	movs	r2, #52	; 0x34
   d4532:	2100      	movs	r1, #0
   d4534:	4620      	mov	r0, r4
   d4536:	f006 fca9 	bl	dae8c <memset>
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d453a:	23ff      	movs	r3, #255	; 0xff
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d453c:	2134      	movs	r1, #52	; 0x34
   d453e:	4620      	mov	r0, r4
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d4540:	83a3      	strh	r3, [r4, #28]
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
   d4542:	83e3      	strh	r3, [r4, #30]
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d4544:	8423      	strh	r3, [r4, #32]
    igh_default_thresholds.carbon_dioxide_high              = DEFAULT_CARBON_DIOXIDE_HIGH;        
   d4546:	8463      	strh	r3, [r4, #34]	; 0x22
    igh_default_thresholds.air_temperature_high             = DEFAULT_AIR_TEMPERATURE_HIGH;             
   d4548:	84a3      	strh	r3, [r4, #36]	; 0x24
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
   d454a:	84e3      	strh	r3, [r4, #38]	; 0x26
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
   d454c:	8523      	strh	r3, [r4, #40]	; 0x28
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
   d454e:	8563      	strh	r3, [r4, #42]	; 0x2a
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
   d4550:	85a3      	strh	r3, [r4, #44]	; 0x2c
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
   d4552:	85e3      	strh	r3, [r4, #46]	; 0x2e
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d4554:	6323      	str	r3, [r4, #48]	; 0x30
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d4556:	f7ff ff75 	bl	d4444 <igh_settings_calculate_checksum>
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d455a:	2244      	movs	r2, #68	; 0x44
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d455c:	7020      	strb	r0, [r4, #0]
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d455e:	490c      	ldr	r1, [pc, #48]	; (d4590 <igh_settings_reset_system_to_default+0xc8>)
   d4560:	4638      	mov	r0, r7
   d4562:	f006 fc88 	bl	dae76 <memcpy>
    igh_current_threshold_settings = igh_default_thresholds;
   d4566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4568:	4635      	mov	r5, r6
   d456a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d456c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d456e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4574:	6823      	ldr	r3, [r4, #0]
   d4576:	602b      	str	r3, [r5, #0]
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4578:	2144      	movs	r1, #68	; 0x44
   d457a:	4638      	mov	r0, r7
   d457c:	f7ff ff62 	bl	d4444 <igh_settings_calculate_checksum>
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4580:	2134      	movs	r1, #52	; 0x34
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
    igh_current_threshold_settings = igh_default_thresholds;
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4582:	7038      	strb	r0, [r7, #0]
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4584:	4630      	mov	r0, r6
   d4586:	f7ff ff5d 	bl	d4444 <igh_settings_calculate_checksum>
   d458a:	7030      	strb	r0, [r6, #0]
   d458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d458e:	bf00      	nop
   d4590:	2003e6ac 	.word	0x2003e6ac
   d4594:	2003d99f 	.word	0x2003d99f
   d4598:	2003d98d 	.word	0x2003d98d
   d459c:	2003e5d4 	.word	0x2003e5d4
   d45a0:	2003e60c 	.word	0x2003e60c
   d45a4:	2003e654 	.word	0x2003e654

000d45a8 <igh_message_process_incoming_msg>:
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d45a8:	b538      	push	{r3, r4, r5, lr}
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length
   d45aa:	7843      	ldrb	r3, [r0, #1]
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d45ac:	4604      	mov	r4, r0
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length

    if(length <= 0) // prevent any messages with zero length from being processed
   d45ae:	b33b      	cbz	r3, d4600 <igh_message_process_incoming_msg+0x58>
    {
        return message_type;    
    }

    if( (buffer[0] == FRAME_START) && (buffer[length-1] == FRAME_END) )
   d45b0:	7802      	ldrb	r2, [r0, #0]
   d45b2:	2a3c      	cmp	r2, #60	; 0x3c
   d45b4:	d124      	bne.n	d4600 <igh_message_process_incoming_msg+0x58>
   d45b6:	4403      	add	r3, r0
   d45b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d45bc:	2b3e      	cmp	r3, #62	; 0x3e
   d45be:	d11f      	bne.n	d4600 <igh_message_process_incoming_msg+0x58>
    {
        // check the serial number
        if( 0 != memcmp(boron_serial_number, &buffer[SN_INDEX], sizeof(boron_serial_number)))
   d45c0:	1d01      	adds	r1, r0, #4
   d45c2:	220c      	movs	r2, #12
   d45c4:	4810      	ldr	r0, [pc, #64]	; (d4608 <igh_message_process_incoming_msg+0x60>)
   d45c6:	f006 fc47 	bl	dae58 <memcmp>
   d45ca:	b9c8      	cbnz	r0, d4600 <igh_message_process_incoming_msg+0x58>
            // if the serial number does not match, do nothing as this message wasn't meant for this device,
            // This ideally should never happen
        }
        else
        {
            if( MSG_ACK == buffer[MSG_TYPE_INDEX] )
   d45cc:	78a5      	ldrb	r5, [r4, #2]
   d45ce:	2d41      	cmp	r5, #65	; 0x41
   d45d0:	d110      	bne.n	d45f4 <igh_message_process_incoming_msg+0x4c>
LOCAL uint8_t igh_message_process_ACK(uint8_t * ack_msg)
{
    // get the ACK tuple id
    igh_pkt_id _ack_id = (igh_pkt_id)ack_msg[PAYLOAD_INDEX];

    if( (MSG_ACK_TUPLE != _ack_id) || (SIZE_OF_MSG_ACK_TUPLE != ack_msg[PAYLOAD_INDEX + 1]) )
   d45d2:	7c63      	ldrb	r3, [r4, #17]
   d45d4:	4a0d      	ldr	r2, [pc, #52]	; (d460c <igh_message_process_incoming_msg+0x64>)
   d45d6:	b913      	cbnz	r3, d45de <igh_message_process_incoming_msg+0x36>
   d45d8:	7ca3      	ldrb	r3, [r4, #18]
   d45da:	2b01      	cmp	r3, #1
   d45dc:	d002      	beq.n	d45e4 <igh_message_process_incoming_msg+0x3c>
    {
        upload_igh_message_id--;
   d45de:	7813      	ldrb	r3, [r2, #0]
   d45e0:	3b01      	subs	r3, #1
   d45e2:	e005      	b.n	d45f0 <igh_message_process_incoming_msg+0x48>
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45e4:	7813      	ldrb	r3, [r2, #0]
    if (acked_msd_id != sent_message_id)
   d45e6:	7ce1      	ldrb	r1, [r4, #19]
        upload_igh_message_id--;
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45e8:	3b01      	subs	r3, #1
   d45ea:	b2db      	uxtb	r3, r3
    if (acked_msd_id != sent_message_id)
   d45ec:	4299      	cmp	r1, r3
   d45ee:	d008      	beq.n	d4602 <igh_message_process_incoming_msg+0x5a>
    {
        upload_igh_message_id--; // roll back to send the previous message
   d45f0:	7013      	strb	r3, [r2, #0]
   d45f2:	e005      	b.n	d4600 <igh_message_process_incoming_msg+0x58>
                if(igh_message_process_ACK(buffer))
                {
                    message_type = MSG_ACK;
                }
            }
            else if( SETTINGS_MSG == buffer[MSG_TYPE_INDEX] )
   d45f4:	2d53      	cmp	r5, #83	; 0x53
   d45f6:	d103      	bne.n	d4600 <igh_message_process_incoming_msg+0x58>
            {
                // process settings here
                if(igh_settings_process_settings(buffer))
   d45f8:	4620      	mov	r0, r4
   d45fa:	f7ff ff53 	bl	d44a4 <igh_settings_process_settings>
   d45fe:	b900      	cbnz	r0, d4602 <igh_message_process_incoming_msg+0x5a>
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
    igh_msg_type message_type = UNKNOWN_MSG;
   d4600:	2500      	movs	r5, #0
        // if there is no frame start or no frame end, do nothing and return zer0
        // This may mean the length was wrong or the message was corrupted
    }

    return message_type; // should return the extracted tuple id for processing later
}
   d4602:	4628      	mov	r0, r5
   d4604:	bd38      	pop	{r3, r4, r5, pc}
   d4606:	bf00      	nop
   d4608:	2003e6a0 	.word	0x2003e6a0
   d460c:	2003da2e 	.word	0x2003da2e

000d4610 <setup>:

/* Run Application routine */
void setup() 
{
    // setup application
    igh_app_setup();
   d4610:	f000 b862 	b.w	d46d8 <_Z13igh_app_setupv>

000d4614 <loop>:
}

void loop() 
{
    // run main app
    igh_main_application();
   d4614:	f000 bb58 	b.w	d4cc8 <_Z20igh_main_applicationv>

000d4618 <_GLOBAL__sub_I_setup>:
}
   d4618:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d461a:	f003 fe2b 	bl	d8274 <HAL_Pin_Map>
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d461e:	2100      	movs	r1, #0
   d4620:	2001      	movs	r0, #1

void loop() 
{
    // run main app
    igh_main_application();
}
   d4622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d4626:	f004 b8bd 	b.w	d87a4 <system_thread_set_state>
	...

000d462c <_Z19igh_app_log_servicev.part.1>:
        }
    }
    return ret;
}

void igh_app_log_service( void )
   d462c:	b510      	push	{r4, lr}
   d462e:	b0c8      	sub	sp, #288	; 0x120
{
    if( (millis() - log_service_timer) > ONE_SECOND )
    {
        // throttle sending data
        Serial.print(".");
   d4630:	f004 ff86 	bl	d9540 <_Z16_fetch_usbserialv>
   d4634:	4921      	ldr	r1, [pc, #132]	; (d46bc <_Z19igh_app_log_servicev.part.1+0x90>)
   d4636:	f004 fc23 	bl	d8e80 <_ZN5Print5printEPKc>
        if( 1 == mqtt_connected )
   d463a:	4b21      	ldr	r3, [pc, #132]	; (d46c0 <_Z19igh_app_log_servicev.part.1+0x94>)
   d463c:	781b      	ldrb	r3, [r3, #0]
   d463e:	2b01      	cmp	r3, #1
   d4640:	d136      	bne.n	d46b0 <_Z19igh_app_log_servicev.part.1+0x84>
        {
            char next_file[FILE_NAME_SIZE];
            if( true == igh_sd_log_get_next_file_name(next_file) )
   d4642:	4668      	mov	r0, sp
   d4644:	f001 f876 	bl	d5734 <_Z29igh_sd_log_get_next_file_namePc>
   d4648:	2801      	cmp	r0, #1
   d464a:	d131      	bne.n	d46b0 <_Z19igh_app_log_servicev.part.1+0x84>
            {
                uint8_t sd_data_point[MAX_FILE_SIZE];
                if( true == igh_sd_log_read_data_point(next_file, sd_data_point, MAX_FILE_SIZE) )
   d464c:	22ff      	movs	r2, #255	; 0xff
   d464e:	a908      	add	r1, sp, #32
   d4650:	4668      	mov	r0, sp
   d4652:	f001 f82f 	bl	d56b4 <_Z26igh_sd_log_read_data_pointPcPhh>
   d4656:	2801      	cmp	r0, #1
   d4658:	d12a      	bne.n	d46b0 <_Z19igh_app_log_servicev.part.1+0x84>
                {
                    Serial.print("Uploading: "); Serial.print((String)next_file);
   d465a:	f004 ff71 	bl	d9540 <_Z16_fetch_usbserialv>
   d465e:	4919      	ldr	r1, [pc, #100]	; (d46c4 <_Z19igh_app_log_servicev.part.1+0x98>)
   d4660:	f004 fc0e 	bl	d8e80 <_ZN5Print5printEPKc>
   d4664:	f004 ff6c 	bl	d9540 <_Z16_fetch_usbserialv>
   d4668:	4669      	mov	r1, sp
   d466a:	4604      	mov	r4, r0
   d466c:	a804      	add	r0, sp, #16
   d466e:	f004 fb5a 	bl	d8d26 <_ZN6StringC1EPK19__FlashStringHelper>
   d4672:	9904      	ldr	r1, [sp, #16]
   d4674:	4620      	mov	r0, r4
   d4676:	f004 fc03 	bl	d8e80 <_ZN5Print5printEPKc>
   d467a:	a804      	add	r0, sp, #16
   d467c:	f004 fb0c 	bl	d8c98 <_ZN6StringD1Ev>
                    //     if( sd_data_point[i] <= 0x0F ) Serial.print("0");
                    //     Serial.print( sd_data_point[i], HEX );
                    // }
                    // Serial.println("}");

                    if( true == igh_mqtt_publish_data(sd_data_point, sd_data_point[1]) )
   d4680:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   d4684:	a808      	add	r0, sp, #32
   d4686:	f000 fc49 	bl	d4f1c <_Z21igh_mqtt_publish_dataPhj>
   d468a:	b160      	cbz	r0, d46a6 <_Z19igh_app_log_servicev.part.1+0x7a>
                    {
                        if( true == igh_sd_log_remove_data_point(next_file) ) 
   d468c:	4668      	mov	r0, sp
   d468e:	f001 f80b 	bl	d56a8 <_Z28igh_sd_log_remove_data_pointPc>
   d4692:	2801      	cmp	r0, #1
   d4694:	d103      	bne.n	d469e <_Z19igh_app_log_servicev.part.1+0x72>
                        {
                            Serial.println(" OK");
   d4696:	f004 ff53 	bl	d9540 <_Z16_fetch_usbserialv>
   d469a:	490b      	ldr	r1, [pc, #44]	; (d46c8 <_Z19igh_app_log_servicev.part.1+0x9c>)
   d469c:	e006      	b.n	d46ac <_Z19igh_app_log_servicev.part.1+0x80>
                        }
                        else
                        {
                            Serial.println(" DEL ERROR");
   d469e:	f004 ff4f 	bl	d9540 <_Z16_fetch_usbserialv>
   d46a2:	490a      	ldr	r1, [pc, #40]	; (d46cc <_Z19igh_app_log_servicev.part.1+0xa0>)
   d46a4:	e002      	b.n	d46ac <_Z19igh_app_log_servicev.part.1+0x80>
                        }
                    }
                    else
                    {
                        Serial.println(" MQTT ERROR");
   d46a6:	f004 ff4b 	bl	d9540 <_Z16_fetch_usbserialv>
   d46aa:	4909      	ldr	r1, [pc, #36]	; (d46d0 <_Z19igh_app_log_servicev.part.1+0xa4>)
   d46ac:	f004 fbfb 	bl	d8ea6 <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46b0:	f003 fea8 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
            {
                // Serial.println("No new file to send");
            }
        }

        log_service_timer = millis();
   d46b4:	4b07      	ldr	r3, [pc, #28]	; (d46d4 <_Z19igh_app_log_servicev.part.1+0xa8>)
   d46b6:	6018      	str	r0, [r3, #0]
    }
}
   d46b8:	b048      	add	sp, #288	; 0x120
   d46ba:	bd10      	pop	{r4, pc}
   d46bc:	000daf3c 	.word	0x000daf3c
   d46c0:	2003dac5 	.word	0x2003dac5
   d46c4:	000daf3e 	.word	0x000daf3e
   d46c8:	000daf4a 	.word	0x000daf4a
   d46cc:	000daf4e 	.word	0x000daf4e
   d46d0:	000daf59 	.word	0x000daf59
   d46d4:	2003da34 	.word	0x2003da34

000d46d8 <_Z13igh_app_setupv>:
void igh_app_get_new_settings( void );
void igh_app_commit_new_settings( void );
void igh_app_log_service( void );

void igh_app_setup( void )
{
   d46d8:	b508      	push	{r3, lr}
    Serial.begin(19200);
   d46da:	f004 ff31 	bl	d9540 <_Z16_fetch_usbserialv>
   d46de:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d46e2:	f004 ff21 	bl	d9528 <_ZN9USBSerial5beginEl>
    
    igh_boron_setup();
   d46e6:	f001 f8f3 	bl	d58d0 <_Z15igh_boron_setupv>

    // setup hardwar
    igh_hardware_setup();
   d46ea:	f000 fe03 	bl	d52f4 <_Z18igh_hardware_setupv>
    
    // get settings from eeprom
    igh_eeprom_init();
   d46ee:	f000 fcbd 	bl	d506c <_Z15igh_eeprom_initv>
    
    // starte the radio
    igh_rfm69_setup();
   d46f2:	f001 f97d 	bl	d59f0 <_Z15igh_rfm69_setupv>
    
    // setup MQTT
    igh_mqtt_setup();
   d46f6:	f000 fb47 	bl	d4d88 <_Z14igh_mqtt_setupv>

    // setup the SD card
    igh_sd_log_setup();
}
   d46fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
    // setup MQTT
    igh_mqtt_setup();

    // setup the SD card
    igh_sd_log_setup();
   d46fe:	f000 bf09 	b.w	d5514 <_Z16igh_sd_log_setupv>
	...

000d4704 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>:
uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d4704:	2345      	movs	r3, #69	; 0x45
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d4706:	b530      	push	{r4, r5, lr}
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d4708:	5443      	strb	r3, [r0, r1]

    // Add direction
    _buffer[i++] = IGH_UPLOAD;
   d470a:	1c4b      	adds	r3, r1, #1
   d470c:	b2db      	uxtb	r3, r3
   d470e:	2255      	movs	r2, #85	; 0x55
   d4710:	54c2      	strb	r2, [r0, r3]

    // Add shield serial number
    memcpy( &_buffer[i], 
            boron_serial_number, 
            sizeof(boron_serial_number) );
   d4712:	4c0b      	ldr	r4, [pc, #44]	; (d4740 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x3c>)
   d4714:	1c8a      	adds	r2, r1, #2
   d4716:	b2d2      	uxtb	r2, r2
   d4718:	6823      	ldr	r3, [r4, #0]
   d471a:	5083      	str	r3, [r0, r2]
   d471c:	1885      	adds	r5, r0, r2
   d471e:	6863      	ldr	r3, [r4, #4]
   d4720:	606b      	str	r3, [r5, #4]
   d4722:	68a3      	ldr	r3, [r4, #8]
   d4724:	60ab      	str	r3, [r5, #8]

    i += sizeof(boron_serial_number);

    // Add incremental message ID
    static uint8_t message_id = 0;
    _buffer[i++] = message_id++;
   d4726:	4b07      	ldr	r3, [pc, #28]	; (d4744 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x40>)
   d4728:	781a      	ldrb	r2, [r3, #0]
   d472a:	1c54      	adds	r4, r2, #1
   d472c:	701c      	strb	r4, [r3, #0]
   d472e:	f101 030e 	add.w	r3, r1, #14
   d4732:	b2db      	uxtb	r3, r3
   d4734:	54c2      	strb	r2, [r0, r3]

    return i;
   d4736:	f101 000f 	add.w	r0, r1, #15
}
   d473a:	b2c0      	uxtb	r0, r0
   d473c:	bd30      	pop	{r4, r5, pc}
   d473e:	bf00      	nop
   d4740:	2003e6a0 	.word	0x2003e6a0
   d4744:	2003da2f 	.word	0x2003da2f

000d4748 <_Z19igh_app_add_payloadPhhS_h>:

uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
   d4748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d474c:	460c      	mov	r4, r1
   d474e:	4605      	mov	r5, r0
   d4750:	4699      	mov	r9, r3
   d4752:	4617      	mov	r7, r2
    uint32_t timestamp_to_store = igh_boron_unix_time();
   d4754:	f001 f8a8 	bl	d58a8 <_Z19igh_boron_unix_timev>
   d4758:	4680      	mov	r8, r0
    float battery_soc_float = igh_boron_SoC();
   d475a:	f001 f8a7 	bl	d58ac <_Z13igh_boron_SoCv>
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);

    uint8_t i = start;

    // Add DATA PKT PID
    _buffer[i++] = DATA_PKT;
   d475e:	23fe      	movs	r3, #254	; 0xfe
   d4760:	552b      	strb	r3, [r5, r4]
    i++; // leave room for payload length

    // Add Shield ID
    _buffer[i++] = SHIELD_ID;
   d4762:	1ca3      	adds	r3, r4, #2
   d4764:	b2db      	uxtb	r3, r3
   d4766:	2217      	movs	r2, #23
   d4768:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = sizeof(boron_serial_number);
   d476a:	1ce3      	adds	r3, r4, #3
   d476c:	b2db      	uxtb	r3, r3
   d476e:	220c      	movs	r2, #12
   d4770:	54ea      	strb	r2, [r5, r3]
    memcpy(&_buffer[i], igh_current_system_settings.serial_number, sizeof(igh_current_system_settings.serial_number) );
   d4772:	4b47      	ldr	r3, [pc, #284]	; (d4890 <_Z19igh_app_add_payloadPhhS_h+0x148>)
   d4774:	1d22      	adds	r2, r4, #4
   d4776:	cb03      	ldmia	r3!, {r0, r1}
   d4778:	b2d2      	uxtb	r2, r2
   d477a:	eb05 0e02 	add.w	lr, r5, r2
   d477e:	50a8      	str	r0, [r5, r2]
   d4780:	f8ce 1004 	str.w	r1, [lr, #4]
   d4784:	6818      	ldr	r0, [r3, #0]
   d4786:	f8ce 0008 	str.w	r0, [lr, #8]
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
   d478a:	f104 0310 	add.w	r3, r4, #16
   d478e:	b2db      	uxtb	r3, r3
   d4790:	2202      	movs	r2, #2
   d4792:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
   d4794:	f104 0311 	add.w	r3, r4, #17
   d4798:	b2db      	uxtb	r3, r3
   d479a:	2204      	movs	r2, #4
   d479c:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d479e:	f104 0312 	add.w	r3, r4, #18
   d47a2:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47a4:	ea4f 2118 	mov.w	r1, r8, lsr #8
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d47a8:	f805 8003 	strb.w	r8, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47ac:	f104 0313 	add.w	r3, r4, #19
   d47b0:	b2db      	uxtb	r3, r3
uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
    uint32_t timestamp_to_store = igh_boron_unix_time();
    float battery_soc_float = igh_boron_SoC();
    uint32_t battery_soc;
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);
   d47b2:	ee10 6a10 	vmov	r6, s0

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47b6:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
   d47b8:	f104 0314 	add.w	r3, r4, #20
   d47bc:	b2db      	uxtb	r3, r3
   d47be:	ea4f 4118 	mov.w	r1, r8, lsr #16
   d47c2:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);
   d47c4:	f104 0315 	add.w	r3, r4, #21
   d47c8:	b2db      	uxtb	r3, r3
   d47ca:	ea4f 6818 	mov.w	r8, r8, lsr #24
   d47ce:	f805 8003 	strb.w	r8, [r5, r3]

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
   d47d2:	f104 0316 	add.w	r3, r4, #22
   d47d6:	b2db      	uxtb	r3, r3
   d47d8:	210d      	movs	r1, #13
   d47da:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d47dc:	f104 0317 	add.w	r3, r4, #23
   d47e0:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d47e2:	0a31      	lsrs	r1, r6, #8
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d47e4:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)battery_soc;
   d47e6:	f104 0318 	add.w	r3, r4, #24
   d47ea:	b2db      	uxtb	r3, r3
    _buffer[i++] = current_valve_position;

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
   d47ec:	2007      	movs	r0, #7
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
   d47ee:	54ee      	strb	r6, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d47f0:	f104 0319 	add.w	r3, r4, #25
   d47f4:	b2db      	uxtb	r3, r3
   d47f6:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 16);
   d47f8:	f104 031a 	add.w	r3, r4, #26
   d47fc:	b2db      	uxtb	r3, r3
   d47fe:	0c31      	lsrs	r1, r6, #16
   d4800:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 24);
   d4802:	f104 031b 	add.w	r3, r4, #27
   d4806:	b2db      	uxtb	r3, r3
   d4808:	0e36      	lsrs	r6, r6, #24
   d480a:	54ee      	strb	r6, [r5, r3]

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
   d480c:	f104 031c 	add.w	r3, r4, #28
   d4810:	b2db      	uxtb	r3, r3
   d4812:	210f      	movs	r1, #15
   d4814:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
   d4816:	f104 031d 	add.w	r3, r4, #29
   d481a:	b2db      	uxtb	r3, r3
   d481c:	2101      	movs	r1, #1
   d481e:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = current_valve_position;
   d4820:	4b1c      	ldr	r3, [pc, #112]	; (d4894 <_Z19igh_app_add_payloadPhhS_h+0x14c>)
   d4822:	7819      	ldrb	r1, [r3, #0]
   d4824:	f104 031e 	add.w	r3, r4, #30
   d4828:	b2db      	uxtb	r3, r3
   d482a:	54e9      	strb	r1, [r5, r3]

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
   d482c:	4b1a      	ldr	r3, [pc, #104]	; (d4898 <_Z19igh_app_add_payloadPhhS_h+0x150>)
   d482e:	6819      	ldr	r1, [r3, #0]
    _buffer[i++] = WATER_DISPENSED;
   d4830:	f104 031f 	add.w	r3, r4, #31
   d4834:	b2db      	uxtb	r3, r3
   d4836:	54e8      	strb	r0, [r5, r3]
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d4838:	f104 0320 	add.w	r3, r4, #32
   d483c:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d483e:	f104 0025 	add.w	r0, r4, #37	; 0x25

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d4842:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)curr_water_L;
   d4844:	f104 0321 	add.w	r3, r4, #33	; 0x21
   d4848:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d484a:	0a0a      	lsrs	r2, r1, #8
    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
   d484c:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d484e:	f104 0322 	add.w	r3, r4, #34	; 0x22
   d4852:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4854:	b2c0      	uxtb	r0, r0
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d4856:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
   d4858:	f104 0323 	add.w	r3, r4, #35	; 0x23
   d485c:	b2db      	uxtb	r3, r3
   d485e:	0c0a      	lsrs	r2, r1, #16
   d4860:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4862:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d4866:	b2db      	uxtb	r3, r3

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4868:	eb09 0600 	add.w	r6, r9, r0
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d486c:	0e09      	lsrs	r1, r1, #24

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d486e:	2efd      	cmp	r6, #253	; 0xfd
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4870:	54e9      	strb	r1, [r5, r3]

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4872:	dc05      	bgt.n	d4880 <_Z19igh_app_add_payloadPhhS_h+0x138>
    {
        memcpy(&_buffer[i], _payload, _payload_len);
   d4874:	464a      	mov	r2, r9
   d4876:	4639      	mov	r1, r7
   d4878:	4428      	add	r0, r5
   d487a:	f006 fafc 	bl	dae76 <memcpy>
        i += _payload_len;
   d487e:	b2f0      	uxtb	r0, r6
    }

    // add the payload length
    _buffer[ start + 1 ] = i - start - 2;
   d4880:	4425      	add	r5, r4
   d4882:	f1c4 04fe 	rsb	r4, r4, #254	; 0xfe
   d4886:	4404      	add	r4, r0
   d4888:	706c      	strb	r4, [r5, #1]

    return i;
}
   d488a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d488e:	bf00      	nop
   d4890:	2003e620 	.word	0x2003e620
   d4894:	2003e650 	.word	0x2003e650
   d4898:	2003db18 	.word	0x2003db18

000d489c <_Z27igh_app_send_device_restartv>:
        igh_boron_toggle_boron_led(OFF);
    }
}

void igh_app_send_device_restart( void )
{
   d489c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t current_time = igh_boron_unix_time();
   d48a0:	f001 f802 	bl	d58a8 <_Z19igh_boron_unix_timev>

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48a4:	4b29      	ldr	r3, [pc, #164]	; (d494c <_Z27igh_app_send_device_restartv+0xb0>)
   d48a6:	781d      	ldrb	r5, [r3, #0]
   d48a8:	2d01      	cmp	r5, #1
    }
}

void igh_app_send_device_restart( void )
{
    uint32_t current_time = igh_boron_unix_time();
   d48aa:	4607      	mov	r7, r0
   d48ac:	4698      	mov	r8, r3

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48ae:	d149      	bne.n	d4944 <_Z27igh_app_send_device_restartv+0xa8>
        && (JAN_01_2020 < current_time) )
   d48b0:	4b27      	ldr	r3, [pc, #156]	; (d4950 <_Z27igh_app_send_device_restartv+0xb4>)
   d48b2:	4298      	cmp	r0, r3
   d48b4:	d946      	bls.n	d4944 <_Z27igh_app_send_device_restartv+0xa8>
    {
        uint8_t i = 0; // keep track of pkt data
        uint8_t restart_msg[3];

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d48b6:	4c27      	ldr	r4, [pc, #156]	; (d4954 <_Z27igh_app_send_device_restartv+0xb8>)
   d48b8:	22ff      	movs	r2, #255	; 0xff
   d48ba:	2100      	movs	r1, #0
   d48bc:	4620      	mov	r0, r4
   d48be:	f006 fae5 	bl	dae8c <memset>

        // Add Retart Message
        restart_msg[0] = RESTART;
   d48c2:	23fd      	movs	r3, #253	; 0xfd
   d48c4:	f88d 3004 	strb.w	r3, [sp, #4]
        restart_msg[1] = SIZE_OF_RESTART;
        restart_msg[2] = true;

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d48c8:	233c      	movs	r3, #60	; 0x3c
   d48ca:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d48cc:	2245      	movs	r2, #69	; 0x45
   d48ce:	2355      	movs	r3, #85	; 0x55
   d48d0:	2102      	movs	r1, #2
   d48d2:	4620      	mov	r0, r4
        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );

        // Add Retart Message
        restart_msg[0] = RESTART;
        restart_msg[1] = SIZE_OF_RESTART;
   d48d4:	f88d 5005 	strb.w	r5, [sp, #5]
        restart_msg[2] = true;
   d48d8:	f88d 5006 	strb.w	r5, [sp, #6]

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d48dc:	f7ff ff12 	bl	d4704 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );
   d48e0:	aa01      	add	r2, sp, #4
   d48e2:	4601      	mov	r1, r0
   d48e4:	2303      	movs	r3, #3
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff ff2e 	bl	d4748 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d48ec:	1c45      	adds	r5, r0, #1
   d48ee:	233e      	movs	r3, #62	; 0x3e
   d48f0:	b2ed      	uxtb	r5, r5
   d48f2:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d48f4:	7065      	strb	r5, [r4, #1]

        Serial.print("{");
   d48f6:	f004 fe23 	bl	d9540 <_Z16_fetch_usbserialv>
   d48fa:	4917      	ldr	r1, [pc, #92]	; (d4958 <_Z27igh_app_send_device_restartv+0xbc>)
   d48fc:	f004 fac0 	bl	d8e80 <_ZN5Print5printEPKc>
   d4900:	1e6b      	subs	r3, r5, #1
   d4902:	1e66      	subs	r6, r4, #1
   d4904:	441c      	add	r4, r3
        for( uint8_t k = 0; k < i; k++ )
   d4906:	42a6      	cmp	r6, r4
   d4908:	d00f      	beq.n	d492a <_Z27igh_app_send_device_restartv+0x8e>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d490a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d490e:	2b0f      	cmp	r3, #15
   d4910:	d804      	bhi.n	d491c <_Z27igh_app_send_device_restartv+0x80>
   d4912:	f004 fe15 	bl	d9540 <_Z16_fetch_usbserialv>
   d4916:	4911      	ldr	r1, [pc, #68]	; (d495c <_Z27igh_app_send_device_restartv+0xc0>)
   d4918:	f004 fab2 	bl	d8e80 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d491c:	f004 fe10 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4920:	2210      	movs	r2, #16
   d4922:	7831      	ldrb	r1, [r6, #0]
   d4924:	f004 fac9 	bl	d8eba <_ZN5Print11printNumberEmh>
        igh_msg_buffer[i++] = FRAME_END;

        igh_msg_buffer[1] = i; // add length

        Serial.print("{");
        for( uint8_t k = 0; k < i; k++ )
   d4928:	e7ed      	b.n	d4906 <_Z27igh_app_send_device_restartv+0x6a>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d492a:	f004 fe09 	bl	d9540 <_Z16_fetch_usbserialv>
   d492e:	490c      	ldr	r1, [pc, #48]	; (d4960 <_Z27igh_app_send_device_restartv+0xc4>)
   d4930:	f004 faa6 	bl	d8e80 <_ZN5Print5printEPKc>

        // save restart message
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d4934:	462a      	mov	r2, r5
   d4936:	4907      	ldr	r1, [pc, #28]	; (d4954 <_Z27igh_app_send_device_restartv+0xb8>)
   d4938:	4638      	mov	r0, r7
   d493a:	f000 fe4b 	bl	d55d4 <_Z26igh_sd_log_save_data_pointmPhh>

        device_restart = false;
   d493e:	2300      	movs	r3, #0
   d4940:	f888 3000 	strb.w	r3, [r8]
    }
}
   d4944:	b002      	add	sp, #8
   d4946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d494a:	bf00      	nop
   d494c:	2003d9ab 	.word	0x2003d9ab
   d4950:	5e0be100 	.word	0x5e0be100
   d4954:	2003e6f1 	.word	0x2003e6f1
   d4958:	000db031 	.word	0x000db031
   d495c:	000daf65 	.word	0x000daf65
   d4960:	000daf67 	.word	0x000daf67

000d4964 <_Z37igh_app_receive_and_stage_sensor_datav>:
    igh_app_log_service();

}

void igh_app_receive_and_stage_sensor_data( void )
{
   d4964:	b570      	push	{r4, r5, r6, lr}
   d4966:	b090      	sub	sp, #64	; 0x40
    uint8_t rx_buffer[RF69_MAX_DATA_LEN];
    uint8_t data_rx_len = 0;

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );
   d4968:	213d      	movs	r1, #61	; 0x3d
   d496a:	4668      	mov	r0, sp
   d496c:	f001 f892 	bl	d5a94 <_Z27igh_rfm69_receive_raw_bytesPhh>

    if( 0 != data_rx_len )
   d4970:	4605      	mov	r5, r0
   d4972:	b3c8      	cbz	r0, d49e8 <_Z37igh_app_receive_and_stage_sensor_datav+0x84>
        igh_boron_toggle_boron_led(ON);

        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4974:	4c1d      	ldr	r4, [pc, #116]	; (d49ec <_Z37igh_app_receive_and_stage_sensor_datav+0x88>)

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );

    if( 0 != data_rx_len )
    {
        igh_boron_toggle_boron_led(ON);
   d4976:	2001      	movs	r0, #1
   d4978:	f000 fc84 	bl	d5284 <_Z26igh_boron_toggle_boron_ledh>

        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d497c:	22ff      	movs	r2, #255	; 0xff
   d497e:	2100      	movs	r1, #0
   d4980:	4620      	mov	r0, r4
   d4982:	f006 fa83 	bl	dae8c <memset>

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d4986:	233c      	movs	r3, #60	; 0x3c
   d4988:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d498a:	2245      	movs	r2, #69	; 0x45
   d498c:	2355      	movs	r3, #85	; 0x55
   d498e:	2102      	movs	r1, #2
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff feb7 	bl	d4704 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, rx_buffer, data_rx_len );
   d4996:	466a      	mov	r2, sp
   d4998:	4601      	mov	r1, r0
   d499a:	462b      	mov	r3, r5
   d499c:	4620      	mov	r0, r4
   d499e:	f7ff fed3 	bl	d4748 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d49a2:	1c45      	adds	r5, r0, #1
   d49a4:	233e      	movs	r3, #62	; 0x3e
   d49a6:	b2ed      	uxtb	r5, r5
   d49a8:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d49aa:	7065      	strb	r5, [r4, #1]

        Serial.print("\nTIME: "); Serial.println(igh_boron_unix_time(), HEX);
   d49ac:	f004 fdc8 	bl	d9540 <_Z16_fetch_usbserialv>
   d49b0:	490f      	ldr	r1, [pc, #60]	; (d49f0 <_Z37igh_app_receive_and_stage_sensor_datav+0x8c>)
   d49b2:	f004 fa65 	bl	d8e80 <_ZN5Print5printEPKc>
   d49b6:	f004 fdc3 	bl	d9540 <_Z16_fetch_usbserialv>
   d49ba:	4606      	mov	r6, r0
   d49bc:	f000 ff74 	bl	d58a8 <_Z19igh_boron_unix_timev>
   d49c0:	2210      	movs	r2, #16
   d49c2:	4601      	mov	r1, r0
   d49c4:	4630      	mov	r0, r6
   d49c6:	f004 fa78 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d49ca:	4630      	mov	r0, r6
   d49cc:	f004 fa5f 	bl	d8e8e <_ZN5Print7printlnEv>
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // publish the data or store it if the publish fails
        uint32_t current_time = igh_boron_unix_time();
   d49d0:	f000 ff6a 	bl	d58a8 <_Z19igh_boron_unix_timev>
        
        // Log data only if the time is synced
        if( JAN_01_2020 < current_time )
   d49d4:	4b07      	ldr	r3, [pc, #28]	; (d49f4 <_Z37igh_app_receive_and_stage_sensor_datav+0x90>)
   d49d6:	4298      	cmp	r0, r3
   d49d8:	d903      	bls.n	d49e2 <_Z37igh_app_receive_and_stage_sensor_datav+0x7e>
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d49da:	462a      	mov	r2, r5
   d49dc:	4621      	mov	r1, r4
   d49de:	f000 fdf9 	bl	d55d4 <_Z26igh_sd_log_save_data_pointmPhh>
        
        igh_boron_toggle_boron_led(OFF);
   d49e2:	2000      	movs	r0, #0
   d49e4:	f000 fc4e 	bl	d5284 <_Z26igh_boron_toggle_boron_ledh>
    }
}
   d49e8:	b010      	add	sp, #64	; 0x40
   d49ea:	bd70      	pop	{r4, r5, r6, pc}
   d49ec:	2003e6f1 	.word	0x2003e6f1
   d49f0:	000daf6a 	.word	0x000daf6a
   d49f4:	5e0be100 	.word	0x5e0be100

000d49f8 <_Z27igh_app_commit_new_settingsv>:
        }
    }
}

void igh_app_commit_new_settings( void )
{
   d49f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( 1 == new_settings_available )
   d49fc:	4b58      	ldr	r3, [pc, #352]	; (d4b60 <_Z27igh_app_commit_new_settingsv+0x168>)
   d49fe:	781a      	ldrb	r2, [r3, #0]
   d4a00:	2a01      	cmp	r2, #1
   d4a02:	461f      	mov	r7, r3
   d4a04:	f040 80aa 	bne.w	d4b5c <_Z27igh_app_commit_new_settingsv+0x164>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
   d4a08:	f004 fd9a 	bl	d9540 <_Z16_fetch_usbserialv>
   d4a0c:	4955      	ldr	r1, [pc, #340]	; (d4b64 <_Z27igh_app_commit_new_settingsv+0x16c>)
   d4a0e:	4c56      	ldr	r4, [pc, #344]	; (d4b68 <_Z27igh_app_commit_new_settingsv+0x170>)
   d4a10:	f004 fa36 	bl	d8e80 <_ZN5Print5printEPKc>
   d4a14:	f004 fd94 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a18:	220a      	movs	r2, #10
   d4a1a:	7a61      	ldrb	r1, [r4, #9]
   d4a1c:	4605      	mov	r5, r0
   d4a1e:	f004 fa4c 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a22:	4628      	mov	r0, r5
   d4a24:	f004 fa33 	bl	d8e8e <_ZN5Print7printlnEv>
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
   d4a28:	f004 fd8a 	bl	d9540 <_Z16_fetch_usbserialv>
   d4a2c:	494f      	ldr	r1, [pc, #316]	; (d4b6c <_Z27igh_app_commit_new_settingsv+0x174>)
   d4a2e:	f004 fa27 	bl	d8e80 <_ZN5Print5printEPKc>
   d4a32:	f004 fd85 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a36:	220a      	movs	r2, #10
   d4a38:	68e1      	ldr	r1, [r4, #12]
   d4a3a:	4605      	mov	r5, r0
   d4a3c:	f004 fa3d 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a40:	4628      	mov	r0, r5
   d4a42:	f004 fa24 	bl	d8e8e <_ZN5Print7printlnEv>
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
   d4a46:	f004 fd7b 	bl	d9540 <_Z16_fetch_usbserialv>
   d4a4a:	4949      	ldr	r1, [pc, #292]	; (d4b70 <_Z27igh_app_commit_new_settingsv+0x178>)
   d4a4c:	f004 fa18 	bl	d8e80 <_ZN5Print5printEPKc>
   d4a50:	f004 fd76 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a54:	220a      	movs	r2, #10
   d4a56:	6921      	ldr	r1, [r4, #16]
   d4a58:	4605      	mov	r5, r0
   d4a5a:	f004 fa2e 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a5e:	4628      	mov	r0, r5
   d4a60:	f004 fa15 	bl	d8e8e <_ZN5Print7printlnEv>
        Serial.print("SERIAL NUMBER: ");
   d4a64:	f004 fd6c 	bl	d9540 <_Z16_fetch_usbserialv>
   d4a68:	4942      	ldr	r1, [pc, #264]	; (d4b74 <_Z27igh_app_commit_new_settingsv+0x17c>)
   d4a6a:	f004 fa09 	bl	d8e80 <_ZN5Print5printEPKc>
   d4a6e:	f104 0613 	add.w	r6, r4, #19
   d4a72:	f104 081f 	add.w	r8, r4, #31
   d4a76:	4625      	mov	r5, r4
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
   d4a78:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d4a7c:	2b0f      	cmp	r3, #15
   d4a7e:	d804      	bhi.n	d4a8a <_Z27igh_app_commit_new_settingsv+0x92>
   d4a80:	f004 fd5e 	bl	d9540 <_Z16_fetch_usbserialv>
   d4a84:	493c      	ldr	r1, [pc, #240]	; (d4b78 <_Z27igh_app_commit_new_settingsv+0x180>)
   d4a86:	f004 f9fb 	bl	d8e80 <_ZN5Print5printEPKc>
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
   d4a8a:	f004 fd59 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a8e:	2210      	movs	r2, #16
   d4a90:	7831      	ldrb	r1, [r6, #0]
   d4a92:	f004 fa12 	bl	d8eba <_ZN5Print11printNumberEmh>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
        Serial.print("SERIAL NUMBER: ");
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
   d4a96:	45b0      	cmp	r8, r6
   d4a98:	d1ee      	bne.n	d4a78 <_Z27igh_app_commit_new_settingsv+0x80>
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
        }
        Serial.print("\n");
   d4a9a:	f004 fd51 	bl	d9540 <_Z16_fetch_usbserialv>
   d4a9e:	4937      	ldr	r1, [pc, #220]	; (d4b7c <_Z27igh_app_commit_new_settingsv+0x184>)
   d4aa0:	f004 f9ee 	bl	d8e80 <_ZN5Print5printEPKc>
        Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d4aa4:	f004 fd4c 	bl	d9540 <_Z16_fetch_usbserialv>
   d4aa8:	4935      	ldr	r1, [pc, #212]	; (d4b80 <_Z27igh_app_commit_new_settingsv+0x188>)
   d4aaa:	f004 f9e9 	bl	d8e80 <_ZN5Print5printEPKc>
   d4aae:	f004 fd47 	bl	d9540 <_Z16_fetch_usbserialv>
   d4ab2:	4934      	ldr	r1, [pc, #208]	; (d4b84 <_Z27igh_app_commit_new_settingsv+0x18c>)
   d4ab4:	f004 f9f7 	bl	d8ea6 <_ZN5Print7printlnEPKc>
        Serial.print("MQTT BROKER PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d4ab8:	f004 fd42 	bl	d9540 <_Z16_fetch_usbserialv>
   d4abc:	4932      	ldr	r1, [pc, #200]	; (d4b88 <_Z27igh_app_commit_new_settingsv+0x190>)
   d4abe:	f004 f9df 	bl	d8e80 <_ZN5Print5printEPKc>
   d4ac2:	f004 fd3d 	bl	d9540 <_Z16_fetch_usbserialv>
   d4ac6:	220a      	movs	r2, #10
   d4ac8:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
   d4acc:	4604      	mov	r4, r0
   d4ace:	f004 f9f4 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4ad2:	4620      	mov	r0, r4
   d4ad4:	f004 f9db 	bl	d8e8e <_ZN5Print7printlnEv>
        Serial.print("TIMEZONE: "); Serial.println(igh_current_system_settings.timezone);
   d4ad8:	f004 fd32 	bl	d9540 <_Z16_fetch_usbserialv>
   d4adc:	492b      	ldr	r1, [pc, #172]	; (d4b8c <_Z27igh_app_commit_new_settingsv+0x194>)
   d4ade:	f004 f9cf 	bl	d8e80 <_ZN5Print5printEPKc>
   d4ae2:	f004 fd2d 	bl	d9540 <_Z16_fetch_usbserialv>
   d4ae6:	686c      	ldr	r4, [r5, #4]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4ae8:	2c00      	cmp	r4, #0
   d4aea:	4606      	mov	r6, r0
   d4aec:	da04      	bge.n	d4af8 <_Z27igh_app_commit_new_settingsv+0x100>
            t = print('-');
   d4aee:	212d      	movs	r1, #45	; 0x2d
   d4af0:	f004 f9ca 	bl	d8e88 <_ZN5Print5printEc>
            val = -n;
   d4af4:	4261      	negs	r1, r4
   d4af6:	e000      	b.n	d4afa <_Z27igh_app_commit_new_settingsv+0x102>
        } else {
            val = n;
   d4af8:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4afa:	220a      	movs	r2, #10
   d4afc:	4630      	mov	r0, r6
   d4afe:	f004 f9dc 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4b02:	4630      	mov	r0, r6
   d4b04:	f004 f9c3 	bl	d8e8e <_ZN5Print7printlnEv>
        Serial.print("IRRIGATION HOUR: "); Serial.println(igh_current_system_settings.irrigation_hr);
   d4b08:	f004 fd1a 	bl	d9540 <_Z16_fetch_usbserialv>
   d4b0c:	4920      	ldr	r1, [pc, #128]	; (d4b90 <_Z27igh_app_commit_new_settingsv+0x198>)
   d4b0e:	f004 f9b7 	bl	d8e80 <_ZN5Print5printEPKc>
   d4b12:	f004 fd15 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4b16:	220a      	movs	r2, #10
   d4b18:	7a29      	ldrb	r1, [r5, #8]
   d4b1a:	4604      	mov	r4, r0
   d4b1c:	f004 f9cd 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4b20:	4620      	mov	r0, r4
   d4b22:	f004 f9b4 	bl	d8e8e <_ZN5Print7printlnEv>
        Serial.print("CHECKSUM: "); Serial.println(igh_current_system_settings.checksum);
   d4b26:	f004 fd0b 	bl	d9540 <_Z16_fetch_usbserialv>
   d4b2a:	491a      	ldr	r1, [pc, #104]	; (d4b94 <_Z27igh_app_commit_new_settingsv+0x19c>)
   d4b2c:	f004 f9a8 	bl	d8e80 <_ZN5Print5printEPKc>
   d4b30:	f004 fd06 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4b34:	220a      	movs	r2, #10
   d4b36:	7829      	ldrb	r1, [r5, #0]
   d4b38:	4604      	mov	r4, r0
   d4b3a:	f004 f9be 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4b3e:	4620      	mov	r0, r4
   d4b40:	f004 f9a5 	bl	d8e8e <_ZN5Print7printlnEv>

        if ( true == igh_eeprom_save_system_settings( &igh_current_system_settings) )
   d4b44:	4808      	ldr	r0, [pc, #32]	; (d4b68 <_Z27igh_app_commit_new_settingsv+0x170>)
   d4b46:	f000 fabb 	bl	d50c0 <_Z31igh_eeprom_save_system_settingsP15system_settings>
   d4b4a:	2801      	cmp	r0, #1
   d4b4c:	d104      	bne.n	d4b58 <_Z27igh_app_commit_new_settingsv+0x160>
        {
            Serial.println("Settings Saved successfully");
   d4b4e:	f004 fcf7 	bl	d9540 <_Z16_fetch_usbserialv>
   d4b52:	4911      	ldr	r1, [pc, #68]	; (d4b98 <_Z27igh_app_commit_new_settingsv+0x1a0>)
   d4b54:	f004 f9a7 	bl	d8ea6 <_ZN5Print7printlnEPKc>
        }

        new_settings_available = 0;
   d4b58:	2300      	movs	r3, #0
   d4b5a:	703b      	strb	r3, [r7, #0]
   d4b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b60:	2003da2c 	.word	0x2003da2c
   d4b64:	000daf72 	.word	0x000daf72
   d4b68:	2003e60c 	.word	0x2003e60c
   d4b6c:	000daf7c 	.word	0x000daf7c
   d4b70:	000daf91 	.word	0x000daf91
   d4b74:	000dafa3 	.word	0x000dafa3
   d4b78:	000daf65 	.word	0x000daf65
   d4b7c:	000db37b 	.word	0x000db37b
   d4b80:	000dafb3 	.word	0x000dafb3
   d4b84:	2003e62c 	.word	0x2003e62c
   d4b88:	000dafc1 	.word	0x000dafc1
   d4b8c:	000dafd4 	.word	0x000dafd4
   d4b90:	000dafdf 	.word	0x000dafdf
   d4b94:	000daff1 	.word	0x000daff1
   d4b98:	000daffc 	.word	0x000daffc

000d4b9c <_Z27igh_app_get_serial_hex_dataPhh>:
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
   d4b9c:	b570      	push	{r4, r5, r6, lr}
   d4b9e:	460d      	mov	r5, r1
   d4ba0:	4606      	mov	r6, r0
    uint8_t ret = 0;

    uint8_t bytes_available = Serial.available();
   d4ba2:	f004 fccd 	bl	d9540 <_Z16_fetch_usbserialv>
   d4ba6:	6803      	ldr	r3, [r0, #0]
   d4ba8:	691b      	ldr	r3, [r3, #16]
   d4baa:	4798      	blx	r3
   d4bac:	b2c4      	uxtb	r4, r0
    if( bytes_available > 0 )
   d4bae:	b90c      	cbnz	r4, d4bb4 <_Z27igh_app_get_serial_hex_dataPhh+0x18>
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
    uint8_t ret = 0;
   d4bb0:	2400      	movs	r4, #0
   d4bb2:	e019      	b.n	d4be8 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>

    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
   d4bb4:	42ac      	cmp	r4, r5
   d4bb6:	d80c      	bhi.n	d4bd2 <_Z27igh_app_get_serial_hex_dataPhh+0x36>
   d4bb8:	4635      	mov	r5, r6
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // read all available bytes
                buffer[i] = Serial.read();
   d4bba:	f004 fcc1 	bl	d9540 <_Z16_fetch_usbserialv>
   d4bbe:	6803      	ldr	r3, [r0, #0]
   d4bc0:	695b      	ldr	r3, [r3, #20]
   d4bc2:	4798      	blx	r3
   d4bc4:	f805 0b01 	strb.w	r0, [r5], #1
    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4bc8:	1bab      	subs	r3, r5, r6
   d4bca:	b2db      	uxtb	r3, r3
   d4bcc:	429c      	cmp	r4, r3
   d4bce:	d8f4      	bhi.n	d4bba <_Z27igh_app_get_serial_hex_dataPhh+0x1e>
   d4bd0:	e00a      	b.n	d4be8 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>
   d4bd2:	2500      	movs	r5, #0
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // dump the data
                Serial.read();
   d4bd4:	f004 fcb4 	bl	d9540 <_Z16_fetch_usbserialv>
   d4bd8:	6803      	ldr	r3, [r0, #0]
   d4bda:	3501      	adds	r5, #1
   d4bdc:	695b      	ldr	r3, [r3, #20]
   d4bde:	4798      	blx	r3
            }
            ret = bytes_available;
        }
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4be0:	b2eb      	uxtb	r3, r5
   d4be2:	429c      	cmp	r4, r3
   d4be4:	d8f6      	bhi.n	d4bd4 <_Z27igh_app_get_serial_hex_dataPhh+0x38>
   d4be6:	e7e3      	b.n	d4bb0 <_Z27igh_app_get_serial_hex_dataPhh+0x14>
                Serial.read();
            }
        }
    }
    return ret;
}
   d4be8:	4620      	mov	r0, r4
   d4bea:	bd70      	pop	{r4, r5, r6, pc}

000d4bec <_Z24igh_app_get_new_settingsv>:

    return i;
}

void igh_app_get_new_settings( void )
{
   d4bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4bee:	4c26      	ldr	r4, [pc, #152]	; (d4c88 <_Z24igh_app_get_new_settingsv+0x9c>)
   d4bf0:	22ff      	movs	r2, #255	; 0xff
   d4bf2:	2100      	movs	r1, #0
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	f006 f949 	bl	dae8c <memset>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
   d4bfa:	21ff      	movs	r1, #255	; 0xff
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	f7ff ffcd 	bl	d4b9c <_Z27igh_app_get_serial_hex_dataPhh>
    if ( 0 < rx_bytes ) // via Serial
   d4c02:	4606      	mov	r6, r0
   d4c04:	2800      	cmp	r0, #0
   d4c06:	d03e      	beq.n	d4c86 <_Z24igh_app_get_new_settingsv+0x9a>
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
   d4c08:	f004 fc9a 	bl	d9540 <_Z16_fetch_usbserialv>
   d4c0c:	491f      	ldr	r1, [pc, #124]	; (d4c8c <_Z24igh_app_get_new_settingsv+0xa0>)
   d4c0e:	f004 f937 	bl	d8e80 <_ZN5Print5printEPKc>
   d4c12:	1e77      	subs	r7, r6, #1
   d4c14:	1e65      	subs	r5, r4, #1
   d4c16:	4427      	add	r7, r4
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4c18:	42bd      	cmp	r5, r7
   d4c1a:	d00f      	beq.n	d4c3c <_Z24igh_app_get_new_settingsv+0x50>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d4c1c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4c20:	2b0f      	cmp	r3, #15
   d4c22:	d804      	bhi.n	d4c2e <_Z24igh_app_get_new_settingsv+0x42>
   d4c24:	f004 fc8c 	bl	d9540 <_Z16_fetch_usbserialv>
   d4c28:	4919      	ldr	r1, [pc, #100]	; (d4c90 <_Z24igh_app_get_new_settingsv+0xa4>)
   d4c2a:	f004 f929 	bl	d8e80 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d4c2e:	f004 fc87 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c32:	2210      	movs	r2, #16
   d4c34:	7829      	ldrb	r1, [r5, #0]
   d4c36:	f004 f940 	bl	d8eba <_ZN5Print11printNumberEmh>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
    if ( 0 < rx_bytes ) // via Serial
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4c3a:	e7ed      	b.n	d4c18 <_Z24igh_app_get_new_settingsv+0x2c>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d4c3c:	f004 fc80 	bl	d9540 <_Z16_fetch_usbserialv>
   d4c40:	4914      	ldr	r1, [pc, #80]	; (d4c94 <_Z24igh_app_get_new_settingsv+0xa8>)
   d4c42:	f004 f91d 	bl	d8e80 <_ZN5Print5printEPKc>

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
   d4c46:	7823      	ldrb	r3, [r4, #0]
   d4c48:	2b10      	cmp	r3, #16
   d4c4a:	d11c      	bne.n	d4c86 <_Z24igh_app_get_new_settingsv+0x9a>
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
   d4c4c:	4632      	mov	r2, r6
   d4c4e:	2102      	movs	r1, #2
   d4c50:	480d      	ldr	r0, [pc, #52]	; (d4c88 <_Z24igh_app_get_new_settingsv+0x9c>)
   d4c52:	f7ff fa31 	bl	d40b8 <igh_settings_process_settings_tuples>
   d4c56:	2801      	cmp	r0, #1
   d4c58:	d10e      	bne.n	d4c78 <_Z24igh_app_get_new_settingsv+0x8c>
            {
                new_settings_available = 1;
   d4c5a:	4b0f      	ldr	r3, [pc, #60]	; (d4c98 <_Z24igh_app_get_new_settingsv+0xac>)
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4c5c:	4c0f      	ldr	r4, [pc, #60]	; (d4c9c <_Z24igh_app_get_new_settingsv+0xb0>)

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
            {
                new_settings_available = 1;
   d4c5e:	7018      	strb	r0, [r3, #0]
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4c60:	2144      	movs	r1, #68	; 0x44
   d4c62:	4620      	mov	r0, r4
   d4c64:	f7ff fbee 	bl	d4444 <igh_settings_calculate_checksum>
   d4c68:	7020      	strb	r0, [r4, #0]
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4c6a:	4c0d      	ldr	r4, [pc, #52]	; (d4ca0 <_Z24igh_app_get_new_settingsv+0xb4>)
   d4c6c:	2134      	movs	r1, #52	; 0x34
   d4c6e:	4620      	mov	r0, r4
   d4c70:	f7ff fbe8 	bl	d4444 <igh_settings_calculate_checksum>
   d4c74:	7020      	strb	r0, [r4, #0]
   d4c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d4c78:	f004 fc62 	bl	d9540 <_Z16_fetch_usbserialv>
   d4c7c:	4909      	ldr	r1, [pc, #36]	; (d4ca4 <_Z24igh_app_get_new_settingsv+0xb8>)
            }
            
        }
    }
}
   d4c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d4c82:	f004 b910 	b.w	d8ea6 <_ZN5Print7printlnEPKc>
   d4c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4c88:	2003e6f1 	.word	0x2003e6f1
   d4c8c:	000db018 	.word	0x000db018
   d4c90:	000daf65 	.word	0x000daf65
   d4c94:	000daf67 	.word	0x000daf67
   d4c98:	2003da2c 	.word	0x2003da2c
   d4c9c:	2003e60c 	.word	0x2003e60c
   d4ca0:	2003e654 	.word	0x2003e654
   d4ca4:	000db033 	.word	0x000db033

000d4ca8 <_Z19igh_app_log_servicev>:
    }
    return ret;
}

void igh_app_log_service( void )
{
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	f003 fbab 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
    if( (millis() - log_service_timer) > ONE_SECOND )
   d4cae:	4b05      	ldr	r3, [pc, #20]	; (d4cc4 <_Z19igh_app_log_servicev+0x1c>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	1ac0      	subs	r0, r0, r3
   d4cb4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4cb8:	d903      	bls.n	d4cc2 <_Z19igh_app_log_servicev+0x1a>
            }
        }

        log_service_timer = millis();
    }
}
   d4cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4cbe:	f7ff bcb5 	b.w	d462c <_Z19igh_app_log_servicev.part.1>
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	2003da34 	.word	0x2003da34

000d4cc8 <_Z20igh_main_applicationv>:
    // setup the SD card
    igh_sd_log_setup();
}

void igh_main_application( void )
{
   d4cc8:	b508      	push	{r3, lr}
    // check if there are any settings to read
    igh_app_get_new_settings();
   d4cca:	f7ff ff8f 	bl	d4bec <_Z24igh_app_get_new_settingsv>

    // commit new settings if available
    igh_app_commit_new_settings();
   d4cce:	f7ff fe93 	bl	d49f8 <_Z27igh_app_commit_new_settingsv>

    // process boron service
    igh_boron_service();
   d4cd2:	f000 fe31 	bl	d5938 <_Z17igh_boron_servicev>
    
    // Send or store device restart message
    igh_app_send_device_restart();
   d4cd6:	f7ff fde1 	bl	d489c <_Z27igh_app_send_device_restartv>
    
    // Send or Store Spear data
    igh_app_receive_and_stage_sensor_data();
   d4cda:	f7ff fe43 	bl	d4964 <_Z37igh_app_receive_and_stage_sensor_datav>

    // Run MQTT service in background
    igh_mqtt_service();
   d4cde:	f000 f89d 	bl	d4e1c <_Z16igh_mqtt_servicev>

    // rfm69 service in the background
    igh_rfm69_service();
   d4ce2:	f000 fef3 	bl	d5acc <_Z17igh_rfm69_servicev>

    // manage data on SD card
    igh_app_log_service();

}
   d4ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    // rfm69 service in the background
    igh_rfm69_service();

    // manage data on SD card
    igh_app_log_service();
   d4cea:	f7ff bfdd 	b.w	d4ca8 <_Z19igh_app_log_servicev>
	...

000d4cf0 <_GLOBAL__sub_I_log_service_timer>:
            }
        }

        log_service_timer = millis();
    }
}
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	f003 fabf 	bl	d8274 <HAL_Pin_Map>
   d4cf6:	f003 fb85 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
unsigned long log_service_timer = 0;
uint8_t device_restart = 1;
extern uint8_t igh_msg_buffer[MESSAGE_SIZE]; 

//temp
unsigned long water_disp_timer = millis();
   d4cfa:	4b01      	ldr	r3, [pc, #4]	; (d4d00 <_GLOBAL__sub_I_log_service_timer+0x10>)
   d4cfc:	6018      	str	r0, [r3, #0]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	2003da30 	.word	0x2003da30

000d4d04 <_Z13mqtt_callbackPcPhj>:

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4d08:	1dd3      	adds	r3, r2, #7
   d4d0a:	f023 0307 	bic.w	r3, r3, #7

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4d0e:	af00      	add	r7, sp, #0
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4d10:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
   d4d14:	4668      	mov	r0, sp

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4d16:	4690      	mov	r8, r2
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);
   d4d18:	f006 f8ad 	bl	dae76 <memcpy>

    Serial.print("RECEIVED MSG: ");
   d4d1c:	f004 fc10 	bl	d9540 <_Z16_fetch_usbserialv>
   d4d20:	4916      	ldr	r1, [pc, #88]	; (d4d7c <_Z13mqtt_callbackPcPhj+0x78>)
   d4d22:	f004 f8ad 	bl	d8e80 <_ZN5Print5printEPKc>
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4d26:	466c      	mov	r4, sp
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
   d4d28:	2500      	movs	r5, #0
    for( uint8_t i = 0; i < length; i++ )
   d4d2a:	b2ee      	uxtb	r6, r5
   d4d2c:	45b0      	cmp	r8, r6
   d4d2e:	d90f      	bls.n	d4d50 <_Z13mqtt_callbackPcPhj+0x4c>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
   d4d30:	5da3      	ldrb	r3, [r4, r6]
   d4d32:	2b0f      	cmp	r3, #15
   d4d34:	d804      	bhi.n	d4d40 <_Z13mqtt_callbackPcPhj+0x3c>
   d4d36:	f004 fc03 	bl	d9540 <_Z16_fetch_usbserialv>
   d4d3a:	4911      	ldr	r1, [pc, #68]	; (d4d80 <_Z13mqtt_callbackPcPhj+0x7c>)
   d4d3c:	f004 f8a0 	bl	d8e80 <_ZN5Print5printEPKc>
        Serial.print(p[i], HEX);
   d4d40:	f004 fbfe 	bl	d9540 <_Z16_fetch_usbserialv>
   d4d44:	2210      	movs	r2, #16
   d4d46:	5da1      	ldrb	r1, [r4, r6]
   d4d48:	f004 f8b7 	bl	d8eba <_ZN5Print11printNumberEmh>
   d4d4c:	3501      	adds	r5, #1
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
    for( uint8_t i = 0; i < length; i++ )
   d4d4e:	e7ec      	b.n	d4d2a <_Z13mqtt_callbackPcPhj+0x26>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
        Serial.print(p[i], HEX);
    }

    msg_type = (igh_msg_type)igh_message_process_incoming_msg( p );
   d4d50:	4620      	mov	r0, r4
   d4d52:	f7ff fc29 	bl	d45a8 <igh_message_process_incoming_msg>
   d4d56:	4605      	mov	r5, r0

    Serial.print("\nMESSAGE TYPE: ");
   d4d58:	f004 fbf2 	bl	d9540 <_Z16_fetch_usbserialv>
   d4d5c:	4909      	ldr	r1, [pc, #36]	; (d4d84 <_Z13mqtt_callbackPcPhj+0x80>)
   d4d5e:	f004 f88f 	bl	d8e80 <_ZN5Print5printEPKc>
    Serial.println((int)msg_type);
   d4d62:	f004 fbed 	bl	d9540 <_Z16_fetch_usbserialv>
   d4d66:	220a      	movs	r2, #10
   d4d68:	4604      	mov	r4, r0
   d4d6a:	4629      	mov	r1, r5
   d4d6c:	f004 f8a5 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4d70:	4620      	mov	r0, r4
   d4d72:	f004 f88c 	bl	d8e8e <_ZN5Print7printlnEv>
}
   d4d76:	46bd      	mov	sp, r7
   d4d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d7c:	000db043 	.word	0x000db043
   d4d80:	000daf65 	.word	0x000daf65
   d4d84:	000db052 	.word	0x000db052

000d4d88 <_Z14igh_mqtt_setupv>:

void igh_mqtt_setup( void )
{
   d4d88:	b510      	push	{r4, lr}
    // set mqtt device name
    device_name = System.deviceID();
   d4d8a:	4c1e      	ldr	r4, [pc, #120]	; (d4e04 <_Z14igh_mqtt_setupv+0x7c>)
    Serial.print("\nMESSAGE TYPE: ");
    Serial.println((int)msg_type);
}

void igh_mqtt_setup( void )
{
   d4d8c:	b088      	sub	sp, #32
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4d8e:	a804      	add	r0, sp, #16
   d4d90:	f003 fd8c 	bl	d88ac <spark_deviceID>
    // set mqtt device name
    device_name = System.deviceID();
   d4d94:	a904      	add	r1, sp, #16
   d4d96:	4620      	mov	r0, r4
   d4d98:	f004 f804 	bl	d8da4 <_ZN6StringaSEOS_>
   d4d9c:	a804      	add	r0, sp, #16
   d4d9e:	f003 ff7b 	bl	d8c98 <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4da2:	4919      	ldr	r1, [pc, #100]	; (d4e08 <_Z14igh_mqtt_setupv+0x80>)
   d4da4:	a804      	add	r0, sp, #16
   d4da6:	f003 ffbe 	bl	d8d26 <_ZN6StringC1EPK19__FlashStringHelper>
   d4daa:	4668      	mov	r0, sp
   d4dac:	f003 fd7e 	bl	d88ac <spark_deviceID>
    inbound_topic = "44" + System.deviceID();
   d4db0:	4669      	mov	r1, sp
   d4db2:	a804      	add	r0, sp, #16
   d4db4:	f004 f826 	bl	d8e04 <_ZplRK15StringSumHelperRK6String>
   d4db8:	4601      	mov	r1, r0
   d4dba:	4814      	ldr	r0, [pc, #80]	; (d4e0c <_Z14igh_mqtt_setupv+0x84>)
   d4dbc:	f003 ffe3 	bl	d8d86 <_ZN6StringaSERKS_>
   d4dc0:	4668      	mov	r0, sp
   d4dc2:	f003 ff69 	bl	d8c98 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4dc6:	a804      	add	r0, sp, #16
   d4dc8:	f003 ff66 	bl	d8c98 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4dcc:	4910      	ldr	r1, [pc, #64]	; (d4e10 <_Z14igh_mqtt_setupv+0x88>)
   d4dce:	a804      	add	r0, sp, #16
   d4dd0:	f003 ffa9 	bl	d8d26 <_ZN6StringC1EPK19__FlashStringHelper>
   d4dd4:	4668      	mov	r0, sp
   d4dd6:	f003 fd69 	bl	d88ac <spark_deviceID>
    outbound_topic = "55" + System.deviceID();
   d4dda:	4669      	mov	r1, sp
   d4ddc:	a804      	add	r0, sp, #16
   d4dde:	f004 f811 	bl	d8e04 <_ZplRK15StringSumHelperRK6String>
   d4de2:	4601      	mov	r1, r0
   d4de4:	480b      	ldr	r0, [pc, #44]	; (d4e14 <_Z14igh_mqtt_setupv+0x8c>)
   d4de6:	f003 ffce 	bl	d8d86 <_ZN6StringaSERKS_>
   d4dea:	4668      	mov	r0, sp
   d4dec:	f003 ff54 	bl	d8c98 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4df0:	a804      	add	r0, sp, #16
   d4df2:	f003 ff51 	bl	d8c98 <_ZN6StringD1Ev>
    client.connect( (const char *)device_name );
   d4df6:	6821      	ldr	r1, [r4, #0]
   d4df8:	4807      	ldr	r0, [pc, #28]	; (d4e18 <_Z14igh_mqtt_setupv+0x90>)
   d4dfa:	f001 f8b3 	bl	d5f64 <_ZN4MQTT7connectEPKc>

}
   d4dfe:	b008      	add	sp, #32
   d4e00:	bd10      	pop	{r4, pc}
   d4e02:	bf00      	nop
   d4e04:	2003da5c 	.word	0x2003da5c
   d4e08:	000db062 	.word	0x000db062
   d4e0c:	2003da3c 	.word	0x2003da3c
   d4e10:	000db065 	.word	0x000db065
   d4e14:	2003da4c 	.word	0x2003da4c
   d4e18:	2003da6c 	.word	0x2003da6c

000d4e1c <_Z16igh_mqtt_servicev>:

void igh_mqtt_service( void )
{
   d4e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( true == mqtt_set_broker )
   d4e20:	4b34      	ldr	r3, [pc, #208]	; (d4ef4 <_Z16igh_mqtt_servicev+0xd8>)
   d4e22:	781a      	ldrb	r2, [r3, #0]
   d4e24:	2a01      	cmp	r2, #1
    client.connect( (const char *)device_name );

}

void igh_mqtt_service( void )
{
   d4e26:	af00      	add	r7, sp, #0
   d4e28:	461d      	mov	r5, r3
    if( true == mqtt_set_broker )
   d4e2a:	d139      	bne.n	d4ea0 <_Z16igh_mqtt_servicev+0x84>
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4e2c:	4932      	ldr	r1, [pc, #200]	; (d4ef8 <_Z16igh_mqtt_servicev+0xdc>)
        Serial.print("BROKER: "); Serial.print(new_broker);
        Serial.print(" PORT: "); Serial.println(igh_current_system_settings.broker_port);
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);

        mqtt_set_broker = false;
   d4e2e:	46e8      	mov	r8, sp
   d4e30:	2200      	movs	r2, #0
   d4e32:	1c50      	adds	r0, r2, #1
void igh_mqtt_service( void )
{
    if( true == mqtt_set_broker )
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4e34:	b2d2      	uxtb	r2, r2
   d4e36:	188b      	adds	r3, r1, r2
   d4e38:	4e2f      	ldr	r6, [pc, #188]	; (d4ef8 <_Z16igh_mqtt_servicev+0xdc>)
   d4e3a:	f893 4020 	ldrb.w	r4, [r3, #32]
   d4e3e:	b10c      	cbz	r4, d4e44 <_Z16igh_mqtt_servicev+0x28>
   d4e40:	4602      	mov	r2, r0
   d4e42:	e7f6      	b.n	d4e32 <_Z16igh_mqtt_servicev+0x16>
        {
            if( '\0' == igh_current_system_settings.broker[broker_len] ) break;
            broker_len++;
        }
        
        char new_broker[broker_len + 1];
   d4e44:	f102 0308 	add.w	r3, r2, #8
   d4e48:	f023 0307 	bic.w	r3, r3, #7
   d4e4c:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy( new_broker, igh_current_system_settings.broker, sizeof(new_broker) );
   d4e50:	3201      	adds	r2, #1
   d4e52:	f106 0120 	add.w	r1, r6, #32
   d4e56:	4668      	mov	r0, sp
   d4e58:	f006 f80d 	bl	dae76 <memcpy>

        Serial.print("BROKER: "); Serial.print(new_broker);
   d4e5c:	f004 fb70 	bl	d9540 <_Z16_fetch_usbserialv>
   d4e60:	4926      	ldr	r1, [pc, #152]	; (d4efc <_Z16igh_mqtt_servicev+0xe0>)
   d4e62:	f004 f80d 	bl	d8e80 <_ZN5Print5printEPKc>
   d4e66:	f004 fb6b 	bl	d9540 <_Z16_fetch_usbserialv>
   d4e6a:	4669      	mov	r1, sp
   d4e6c:	f004 f808 	bl	d8e80 <_ZN5Print5printEPKc>
        Serial.print(" PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d4e70:	f004 fb66 	bl	d9540 <_Z16_fetch_usbserialv>
   d4e74:	4922      	ldr	r1, [pc, #136]	; (d4f00 <_Z16igh_mqtt_servicev+0xe4>)
   d4e76:	f004 f803 	bl	d8e80 <_ZN5Print5printEPKc>
   d4e7a:	f004 fb61 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4e7e:	220a      	movs	r2, #10
   d4e80:	f8b6 1040 	ldrh.w	r1, [r6, #64]	; 0x40
   d4e84:	4681      	mov	r9, r0
   d4e86:	f004 f818 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4e8a:	4648      	mov	r0, r9
   d4e8c:	f003 ffff 	bl	d8e8e <_ZN5Print7printlnEv>
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);
   d4e90:	4669      	mov	r1, sp
   d4e92:	f8b6 2040 	ldrh.w	r2, [r6, #64]	; 0x40
   d4e96:	481b      	ldr	r0, [pc, #108]	; (d4f04 <_Z16igh_mqtt_servicev+0xe8>)
   d4e98:	f000 ff7a 	bl	d5d90 <_ZN4MQTT9setBrokerEPct>

        mqtt_set_broker = false;
   d4e9c:	702c      	strb	r4, [r5, #0]
   d4e9e:	46c5      	mov	sp, r8
    }

    if (client.isConnected())
   d4ea0:	4818      	ldr	r0, [pc, #96]	; (d4f04 <_Z16igh_mqtt_servicev+0xe8>)
   d4ea2:	4c19      	ldr	r4, [pc, #100]	; (d4f08 <_Z16igh_mqtt_servicev+0xec>)
   d4ea4:	f000 ff66 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d4ea8:	b170      	cbz	r0, d4ec8 <_Z16igh_mqtt_servicev+0xac>
    {
        client.loop();
   d4eaa:	4816      	ldr	r0, [pc, #88]	; (d4f04 <_Z16igh_mqtt_servicev+0xe8>)
        mqtt_connected = 1;
   d4eac:	2501      	movs	r5, #1
        mqtt_set_broker = false;
    }

    if (client.isConnected())
    {
        client.loop();
   d4eae:	f001 f916 	bl	d60de <_ZN4MQTT4loopEv>
        mqtt_connected = 1;
   d4eb2:	7025      	strb	r5, [r4, #0]

        if( false == mqtt_subscribed )
   d4eb4:	4c15      	ldr	r4, [pc, #84]	; (d4f0c <_Z16igh_mqtt_servicev+0xf0>)
   d4eb6:	7823      	ldrb	r3, [r4, #0]
   d4eb8:	b9c3      	cbnz	r3, d4eec <_Z16igh_mqtt_servicev+0xd0>
   d4eba:	4b15      	ldr	r3, [pc, #84]	; (d4f10 <_Z16igh_mqtt_servicev+0xf4>)
        {
            client.subscribe( (const char *)inbound_topic );
   d4ebc:	4811      	ldr	r0, [pc, #68]	; (d4f04 <_Z16igh_mqtt_servicev+0xe8>)
   d4ebe:	6819      	ldr	r1, [r3, #0]
   d4ec0:	f001 fa39 	bl	d6336 <_ZN4MQTT9subscribeEPKc>
            mqtt_subscribed = true;
   d4ec4:	7025      	strb	r5, [r4, #0]
   d4ec6:	e011      	b.n	d4eec <_Z16igh_mqtt_servicev+0xd0>
        }
    }
    else
    {
        /* try to connect */
        mqtt_connected = 0;
   d4ec8:	7020      	strb	r0, [r4, #0]

        if( (millis() - reconnect_interval) > 10000 )
   d4eca:	4c12      	ldr	r4, [pc, #72]	; (d4f14 <_Z16igh_mqtt_servicev+0xf8>)
   d4ecc:	f003 fa9a 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
   d4ed0:	6823      	ldr	r3, [r4, #0]
   d4ed2:	1ac0      	subs	r0, r0, r3
   d4ed4:	f242 7310 	movw	r3, #10000	; 0x2710
   d4ed8:	4298      	cmp	r0, r3
   d4eda:	d907      	bls.n	d4eec <_Z16igh_mqtt_servicev+0xd0>
   d4edc:	4b0e      	ldr	r3, [pc, #56]	; (d4f18 <_Z16igh_mqtt_servicev+0xfc>)
        {
            // try to reconnect only once every 10 seconds
            client.connect( (const char *)device_name );
   d4ede:	4809      	ldr	r0, [pc, #36]	; (d4f04 <_Z16igh_mqtt_servicev+0xe8>)
   d4ee0:	6819      	ldr	r1, [r3, #0]
   d4ee2:	f001 f83f 	bl	d5f64 <_ZN4MQTT7connectEPKc>
   d4ee6:	f003 fa8d 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
            reconnect_interval = millis();
   d4eea:	6020      	str	r0, [r4, #0]
        }
    }
}
   d4eec:	46bd      	mov	sp, r7
   d4eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4ef2:	bf00      	nop
   d4ef4:	2003d98c 	.word	0x2003d98c
   d4ef8:	2003e60c 	.word	0x2003e60c
   d4efc:	000dafb8 	.word	0x000dafb8
   d4f00:	000dafcc 	.word	0x000dafcc
   d4f04:	2003da6c 	.word	0x2003da6c
   d4f08:	2003dac5 	.word	0x2003dac5
   d4f0c:	2003dac4 	.word	0x2003dac4
   d4f10:	2003da3c 	.word	0x2003da3c
   d4f14:	2003da38 	.word	0x2003da38
   d4f18:	2003da5c 	.word	0x2003da5c

000d4f1c <_Z21igh_mqtt_publish_dataPhj>:

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d4f1c:	b570      	push	{r4, r5, r6, lr}
   d4f1e:	4605      	mov	r5, r0
    bool ret = false;
    if (client.isConnected()) {
   d4f20:	480d      	ldr	r0, [pc, #52]	; (d4f58 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
        }
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d4f22:	460e      	mov	r6, r1
    bool ret = false;
    if (client.isConnected()) {
   d4f24:	f000 ff26 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d4f28:	4604      	mov	r4, r0
   d4f2a:	b168      	cbz	r0, d4f48 <_Z21igh_mqtt_publish_dataPhj+0x2c>
        client.publish( (const char *)outbound_topic, 
                        (const uint8_t*) payload, len);
   d4f2c:	490b      	ldr	r1, [pc, #44]	; (d4f5c <_Z21igh_mqtt_publish_dataPhj+0x40>)
   d4f2e:	480a      	ldr	r0, [pc, #40]	; (d4f58 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d4f30:	6809      	ldr	r1, [r1, #0]
   d4f32:	4633      	mov	r3, r6
   d4f34:	462a      	mov	r2, r5
   d4f36:	f001 f895 	bl	d6064 <_ZN4MQTT7publishEPKcPKhj>
   d4f3a:	4b09      	ldr	r3, [pc, #36]	; (d4f60 <_Z21igh_mqtt_publish_dataPhj+0x44>)
        client.subscribe( (const char *)inbound_topic );
   d4f3c:	4806      	ldr	r0, [pc, #24]	; (d4f58 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d4f3e:	6819      	ldr	r1, [r3, #0]
   d4f40:	f001 f9f9 	bl	d6336 <_ZN4MQTT9subscribeEPKc>
        ret = true;
   d4f44:	2001      	movs	r0, #1
   d4f46:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        Serial.println("PUBLISH FAILED");
   d4f48:	f004 fafa 	bl	d9540 <_Z16_fetch_usbserialv>
   d4f4c:	4905      	ldr	r1, [pc, #20]	; (d4f64 <_Z21igh_mqtt_publish_dataPhj+0x48>)
   d4f4e:	f003 ffaa 	bl	d8ea6 <_ZN5Print7printlnEPKc>
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
    bool ret = false;
   d4f52:	4620      	mov	r0, r4
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d4f54:	bd70      	pop	{r4, r5, r6, pc}
   d4f56:	bf00      	nop
   d4f58:	2003da6c 	.word	0x2003da6c
   d4f5c:	2003da4c 	.word	0x2003da4c
   d4f60:	2003da3c 	.word	0x2003da3c
   d4f64:	000db068 	.word	0x000db068

000d4f68 <_GLOBAL__sub_I_device_name>:
   d4f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d4f6a:	4e19      	ldr	r6, [pc, #100]	; (d4fd0 <_GLOBAL__sub_I_device_name+0x68>)
   d4f6c:	4f19      	ldr	r7, [pc, #100]	; (d4fd4 <_GLOBAL__sub_I_device_name+0x6c>)
   d4f6e:	4c1a      	ldr	r4, [pc, #104]	; (d4fd8 <_GLOBAL__sub_I_device_name+0x70>)
   d4f70:	4d1a      	ldr	r5, [pc, #104]	; (d4fdc <_GLOBAL__sub_I_device_name+0x74>)
   d4f72:	f003 f97f 	bl	d8274 <HAL_Pin_Map>
   d4f76:	4631      	mov	r1, r6
   d4f78:	4638      	mov	r0, r7
   d4f7a:	f003 fed4 	bl	d8d26 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f7e:	4638      	mov	r0, r7
String inbound_topic;
   d4f80:	4f17      	ldr	r7, [pc, #92]	; (d4fe0 <_GLOBAL__sub_I_device_name+0x78>)
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d4f82:	4622      	mov	r2, r4
   d4f84:	4629      	mov	r1, r5
   d4f86:	f005 f9d5 	bl	da334 <__aeabi_atexit>
String inbound_topic;
   d4f8a:	4631      	mov	r1, r6
   d4f8c:	4638      	mov	r0, r7
   d4f8e:	f003 feca 	bl	d8d26 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f92:	4638      	mov	r0, r7
String outbound_topic;
   d4f94:	4f13      	ldr	r7, [pc, #76]	; (d4fe4 <_GLOBAL__sub_I_device_name+0x7c>)
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
   d4f96:	4622      	mov	r2, r4
   d4f98:	4629      	mov	r1, r5
   d4f9a:	f005 f9cb 	bl	da334 <__aeabi_atexit>
String outbound_topic;
   d4f9e:	4631      	mov	r1, r6
   d4fa0:	4638      	mov	r0, r7
   d4fa2:	f003 fec0 	bl	d8d26 <_ZN6StringC1EPK19__FlashStringHelper>
   d4fa6:	4629      	mov	r1, r5
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d4fa8:	4d0f      	ldr	r5, [pc, #60]	; (d4fe8 <_GLOBAL__sub_I_device_name+0x80>)
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
String outbound_topic;
   d4faa:	4622      	mov	r2, r4
   d4fac:	4638      	mov	r0, r7
   d4fae:	f005 f9c1 	bl	da334 <__aeabi_atexit>
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d4fb2:	4b0e      	ldr	r3, [pc, #56]	; (d4fec <_GLOBAL__sub_I_device_name+0x84>)
   d4fb4:	490e      	ldr	r1, [pc, #56]	; (d4ff0 <_GLOBAL__sub_I_device_name+0x88>)
   d4fb6:	f240 725b 	movw	r2, #1883	; 0x75b
   d4fba:	4628      	mov	r0, r5
   d4fbc:	f000 fdf2 	bl	d5ba4 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d4fc0:	4622      	mov	r2, r4
   d4fc2:	4628      	mov	r0, r5
   d4fc4:	490b      	ldr	r1, [pc, #44]	; (d4ff4 <_GLOBAL__sub_I_device_name+0x8c>)
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d4fc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d4fca:	f005 b9b3 	b.w	da334 <__aeabi_atexit>
   d4fce:	bf00      	nop
   d4fd0:	000db37c 	.word	0x000db37c
   d4fd4:	2003da5c 	.word	0x2003da5c
   d4fd8:	2003da28 	.word	0x2003da28
   d4fdc:	000d8c99 	.word	0x000d8c99
   d4fe0:	2003da3c 	.word	0x2003da3c
   d4fe4:	2003da4c 	.word	0x2003da4c
   d4fe8:	2003da6c 	.word	0x2003da6c
   d4fec:	000d4d05 	.word	0x000d4d05
   d4ff0:	000db077 	.word	0x000db077
   d4ff4:	000d633d 	.word	0x000d633d

000d4ff8 <_GLOBAL__sub_I_test_valve_flag>:
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d4ff8:	b510      	push	{r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d4ffa:	4c07      	ldr	r4, [pc, #28]	; (d5018 <_GLOBAL__sub_I_test_valve_flag+0x20>)
   d4ffc:	f003 f93a 	bl	d8274 <HAL_Pin_Map>
   d5000:	4906      	ldr	r1, [pc, #24]	; (d501c <_GLOBAL__sub_I_test_valve_flag+0x24>)
   d5002:	4620      	mov	r0, r4
   d5004:	f003 fe8f 	bl	d8d26 <_ZN6StringC1EPK19__FlashStringHelper>
   d5008:	4620      	mov	r0, r4
   d500a:	4a05      	ldr	r2, [pc, #20]	; (d5020 <_GLOBAL__sub_I_test_valve_flag+0x28>)
   d500c:	4905      	ldr	r1, [pc, #20]	; (d5024 <_GLOBAL__sub_I_test_valve_flag+0x2c>)
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d500e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d5012:	f005 b98f 	b.w	da334 <__aeabi_atexit>
   d5016:	bf00      	nop
   d5018:	2003dac8 	.word	0x2003dac8
   d501c:	000db37c 	.word	0x000db37c
   d5020:	2003da28 	.word	0x2003da28
   d5024:	000d8c99 	.word	0x000d8c99

000d5028 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d5028:	b510      	push	{r4, lr}
   d502a:	b092      	sub	sp, #72	; 0x48
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d502c:	2244      	movs	r2, #68	; 0x44
   d502e:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d5030:	4604      	mov	r4, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d5032:	a801      	add	r0, sp, #4
   d5034:	f005 ff2a 	bl	dae8c <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d5038:	f005 f8e8 	bl	da20c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d503c:	2244      	movs	r2, #68	; 0x44
   d503e:	a901      	add	r1, sp, #4
   d5040:	2000      	movs	r0, #0
   d5042:	f003 f9f7 	bl	d8434 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d5046:	2144      	movs	r1, #68	; 0x44
   d5048:	a801      	add	r0, sp, #4
   d504a:	f7ff f9fb 	bl	d4444 <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d504e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5052:	4283      	cmp	r3, r0
   d5054:	d106      	bne.n	d5064 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x3c>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d5056:	2244      	movs	r2, #68	; 0x44
   d5058:	a901      	add	r1, sp, #4
   d505a:	4620      	mov	r0, r4
   d505c:	f005 ff0b 	bl	dae76 <memcpy>
  return 1;
   d5060:	2001      	movs	r0, #1
   d5062:	e000      	b.n	d5066 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x3e>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d5064:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d5066:	b012      	add	sp, #72	; 0x48
   d5068:	bd10      	pop	{r4, pc}
	...

000d506c <_Z15igh_eeprom_initv>:
#define SYSTEM_THRESHOLDS_ADDRESS   (int)0x0200
#define SYSTEM_ERRORS_ADDRESS       (int)0x0400


void igh_eeprom_init( void )
{
   d506c:	b510      	push	{r4, lr}
   d506e:	b092      	sub	sp, #72	; 0x48
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d5070:	a801      	add	r0, sp, #4
   d5072:	f7ff ffd9 	bl	d5028 <_Z31igh_eeprom_read_system_settingsP15system_settings>
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d5076:	2144      	movs	r1, #68	; 0x44


void igh_eeprom_init( void )
{
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d5078:	4604      	mov	r4, r0
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d507a:	a801      	add	r0, sp, #4
   d507c:	f7ff f9e2 	bl	d4444 <igh_settings_calculate_checksum>

  if( false == settings_read_successfully ||
   d5080:	b124      	cbz	r4, d508c <_Z15igh_eeprom_initv+0x20>
   d5082:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5086:	4283      	cmp	r3, r0
   d5088:	d100      	bne.n	d508c <_Z15igh_eeprom_initv+0x20>
      (settings_in_memory.checksum != valid_checksum) ||
   d508a:	b93b      	cbnz	r3, d509c <_Z15igh_eeprom_initv+0x30>
      ( 0 == settings_in_memory.checksum) )
  {
    // if we can't get valid settings from memory at all, use default settings
    Serial.println("USING DEFAULT SETTINGS");
   d508c:	f004 fa58 	bl	d9540 <_Z16_fetch_usbserialv>
   d5090:	4908      	ldr	r1, [pc, #32]	; (d50b4 <_Z15igh_eeprom_initv+0x48>)
   d5092:	f003 ff08 	bl	d8ea6 <_ZN5Print7printlnEPKc>
    igh_settings_reset_system_to_default();
   d5096:	f7ff fa17 	bl	d44c8 <igh_settings_reset_system_to_default>
   d509a:	e009      	b.n	d50b0 <_Z15igh_eeprom_initv+0x44>
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d509c:	f004 fa50 	bl	d9540 <_Z16_fetch_usbserialv>
   d50a0:	4905      	ldr	r1, [pc, #20]	; (d50b8 <_Z15igh_eeprom_initv+0x4c>)
   d50a2:	f003 ff00 	bl	d8ea6 <_ZN5Print7printlnEPKc>
    igh_current_system_settings = settings_in_memory;
   d50a6:	2244      	movs	r2, #68	; 0x44
   d50a8:	a901      	add	r1, sp, #4
   d50aa:	4804      	ldr	r0, [pc, #16]	; (d50bc <_Z15igh_eeprom_initv+0x50>)
   d50ac:	f005 fee3 	bl	dae76 <memcpy>
  }
}
   d50b0:	b012      	add	sp, #72	; 0x48
   d50b2:	bd10      	pop	{r4, pc}
   d50b4:	000db118 	.word	0x000db118
   d50b8:	000db12f 	.word	0x000db12f
   d50bc:	2003e60c 	.word	0x2003e60c

000d50c0 <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d50c0:	b510      	push	{r4, lr}
   d50c2:	4604      	mov	r4, r0
   d50c4:	b092      	sub	sp, #72	; 0x48
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d50c6:	f005 f8a1 	bl	da20c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d50ca:	2244      	movs	r2, #68	; 0x44
   d50cc:	4621      	mov	r1, r4
   d50ce:	2000      	movs	r0, #0
   d50d0:	f003 f9b8 	bl	d8444 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d50d4:	a801      	add	r0, sp, #4
   d50d6:	f7ff ffa7 	bl	d5028 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d50da:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d50de:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d50e0:	1ac3      	subs	r3, r0, r3
   d50e2:	4258      	negs	r0, r3
   d50e4:	4158      	adcs	r0, r3
   d50e6:	b012      	add	sp, #72	; 0x48
   d50e8:	bd10      	pop	{r4, pc}

000d50ea <_GLOBAL__sub_I__Z15igh_eeprom_initv>:
   d50ea:	f003 b8c3 	b.w	d8274 <HAL_Pin_Map>
	...

000d50f0 <_Z30igh_app_water_counter_callbackv>:
    water_flow_timer.start();
}

void igh_app_water_counter_callback( void )
{
    flow_meter_pulses++;
   d50f0:	4a02      	ldr	r2, [pc, #8]	; (d50fc <_Z30igh_app_water_counter_callbackv+0xc>)
   d50f2:	6813      	ldr	r3, [r2, #0]
   d50f4:	3301      	adds	r3, #1
   d50f6:	6013      	str	r3, [r2, #0]
   d50f8:	4770      	bx	lr
   d50fa:	bf00      	nop
   d50fc:	2003dad8 	.word	0x2003dad8

000d5100 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d5100:	6803      	ldr	r3, [r0, #0]
   d5102:	4718      	bx	r3

000d5104 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5104:	2a01      	cmp	r2, #1
   d5106:	d002      	beq.n	d510e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d5108:	2a02      	cmp	r2, #2
   d510a:	d002      	beq.n	d5112 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d510c:	e004      	b.n	d5118 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d510e:	6001      	str	r1, [r0, #0]
	      break;
   d5110:	e002      	b.n	d5118 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5112:	680b      	ldr	r3, [r1, #0]
   d5114:	b100      	cbz	r0, d5118 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d5116:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5118:	2000      	movs	r0, #0
   d511a:	4770      	bx	lr

000d511c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d511c:	6943      	ldr	r3, [r0, #20]
   d511e:	b113      	cbz	r3, d5126 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5120:	6983      	ldr	r3, [r0, #24]
   d5122:	300c      	adds	r0, #12
   d5124:	4718      	bx	r3
   d5126:	4770      	bx	lr

000d5128 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d5128:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d512a:	2100      	movs	r1, #0
   d512c:	4604      	mov	r4, r0
   d512e:	4608      	mov	r0, r1
   d5130:	f003 f9b8 	bl	d84a4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d5134:	a902      	add	r1, sp, #8
   d5136:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d5138:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d513a:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d513e:	f003 f9c9 	bl	d84d4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d5142:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d5144:	b10c      	cbz	r4, d514a <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d5146:	2301      	movs	r3, #1
   d5148:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d514a:	2100      	movs	r1, #0
   d514c:	2001      	movs	r0, #1
   d514e:	f003 f9a9 	bl	d84a4 <os_thread_scheduling>
            }
        }
        if (t) {
   d5152:	b12c      	cbz	r4, d5160 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d5154:	6823      	ldr	r3, [r4, #0]
   d5156:	4620      	mov	r0, r4
   d5158:	689b      	ldr	r3, [r3, #8]
   d515a:	4798      	blx	r3
            t->running = false;
   d515c:	2300      	movs	r3, #0
   d515e:	7123      	strb	r3, [r4, #4]
        }
    }
   d5160:	b002      	add	sp, #8
   d5162:	bd10      	pop	{r4, pc}

000d5164 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5164:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5166:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5168:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d516a:	b113      	cbz	r3, d5172 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d516c:	2203      	movs	r2, #3
   d516e:	4601      	mov	r1, r0
   d5170:	4798      	blx	r3
    }
   d5172:	4620      	mov	r0, r4
   d5174:	bd10      	pop	{r4, pc}
	...

000d5178 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5178:	b5f0      	push	{r4, r5, r6, r7, lr}
   d517a:	2500      	movs	r5, #0
   d517c:	468e      	mov	lr, r1
   d517e:	4915      	ldr	r1, [pc, #84]	; (d51d4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d5180:	7105      	strb	r5, [r0, #4]
   d5182:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5184:	6145      	str	r5, [r0, #20]
   d5186:	6001      	str	r1, [r0, #0]
   d5188:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d518a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d518e:	b085      	sub	sp, #20
   d5190:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d5192:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5196:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d519a:	e896 0003 	ldmia.w	r6, {r0, r1}
   d519e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d51a2:	e897 0003 	ldmia.w	r7, {r0, r1}
   d51a6:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51aa:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d51ac:	6960      	ldr	r0, [r4, #20]
   d51ae:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d51b0:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51b2:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d51b4:	69a0      	ldr	r0, [r4, #24]
   d51b6:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d51b8:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d51ba:	e88d 0028 	stmia.w	sp, {r3, r5}
   d51be:	4a06      	ldr	r2, [pc, #24]	; (d51d8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d51c0:	4623      	mov	r3, r4
   d51c2:	4671      	mov	r1, lr
   d51c4:	f104 0008 	add.w	r0, r4, #8
   d51c8:	f003 f974 	bl	d84b4 <os_timer_create>
    }
   d51cc:	4620      	mov	r0, r4
   d51ce:	b005      	add	sp, #20
   d51d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51d2:	bf00      	nop
   d51d4:	000db164 	.word	0x000db164
   d51d8:	000d5129 	.word	0x000d5129

000d51dc <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d51dc:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d51de:	6880      	ldr	r0, [r0, #8]
   d51e0:	2300      	movs	r3, #0
   d51e2:	b138      	cbz	r0, d51f4 <_ZN5Timer5_stopEjb+0x18>
   d51e4:	e88d 000a 	stmia.w	sp, {r1, r3}
   d51e8:	2102      	movs	r1, #2
   d51ea:	f003 f97b 	bl	d84e4 <os_timer_change>
   d51ee:	fab0 f080 	clz	r0, r0
   d51f2:	0940      	lsrs	r0, r0, #5
    }
   d51f4:	b003      	add	sp, #12
   d51f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d51fc <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d51fc:	b538      	push	{r3, r4, r5, lr}
   d51fe:	4b10      	ldr	r3, [pc, #64]	; (d5240 <_ZN5TimerD1Ev+0x44>)
   d5200:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d5202:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d5204:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d5206:	b1a3      	cbz	r3, d5232 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d5208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d520c:	2200      	movs	r2, #0
   d520e:	f7ff ffe5 	bl	d51dc <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d5212:	2100      	movs	r1, #0
   d5214:	68a0      	ldr	r0, [r4, #8]
   d5216:	f003 f97d 	bl	d8514 <os_timer_set_id>
            while (running) {
   d521a:	7923      	ldrb	r3, [r4, #4]
   d521c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5220:	b113      	cbz	r3, d5228 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d5222:	f003 f927 	bl	d8474 <os_thread_yield>
   d5226:	e7f8      	b.n	d521a <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d5228:	4629      	mov	r1, r5
   d522a:	68a0      	ldr	r0, [r4, #8]
   d522c:	f003 f94a 	bl	d84c4 <os_timer_destroy>
            handle = nullptr;
   d5230:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5232:	f104 000c 	add.w	r0, r4, #12
   d5236:	f7ff ff95 	bl	d5164 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d523a:	4620      	mov	r0, r4
   d523c:	bd38      	pop	{r3, r4, r5, pc}
   d523e:	bf00      	nop
   d5240:	000db164 	.word	0x000db164

000d5244 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d5244:	b510      	push	{r4, lr}
   d5246:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d5248:	f7ff ffd8 	bl	d51fc <_ZN5TimerD1Ev>
   d524c:	4620      	mov	r0, r4
   d524e:	211c      	movs	r1, #28
   d5250:	f005 f87e 	bl	da350 <_ZdlPvj>
   d5254:	4620      	mov	r0, r4
   d5256:	bd10      	pop	{r4, pc}

000d5258 <_ZN5Timer6_startEjb>:
    inline bool changePeriod(std::chrono::milliseconds ms, unsigned block=default_wait) { return changePeriod(ms.count(), block); }

    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
   d5258:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d525a:	4606      	mov	r6, r0
   d525c:	4614      	mov	r4, r2
   d525e:	460d      	mov	r5, r1
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d5260:	2200      	movs	r2, #0
   d5262:	4621      	mov	r1, r4
   d5264:	f7ff ffba 	bl	d51dc <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d5268:	68b0      	ldr	r0, [r6, #8]
   d526a:	2300      	movs	r3, #0
   d526c:	b140      	cbz	r0, d5280 <_ZN5Timer6_startEjb+0x28>
   d526e:	9301      	str	r3, [sp, #4]
   d5270:	9500      	str	r5, [sp, #0]
   d5272:	4622      	mov	r2, r4
   d5274:	4619      	mov	r1, r3
   d5276:	f003 f935 	bl	d84e4 <os_timer_change>
   d527a:	fab0 f080 	clz	r0, r0
   d527e:	0940      	lsrs	r0, r0, #5
    }
   d5280:	b002      	add	sp, #8
   d5282:	bd70      	pop	{r4, r5, r6, pc}

000d5284 <_Z26igh_boron_toggle_boron_ledh>:
}

/* Onboard LED APIs */
void igh_boron_toggle_boron_led(uint8_t _state)
{
    digitalWrite(BORON_LED, _state);
   d5284:	4601      	mov	r1, r0
   d5286:	2007      	movs	r0, #7
   d5288:	f004 bf93 	b.w	da1b2 <digitalWrite>

000d528c <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d528c:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d528e:	200f      	movs	r0, #15
   d5290:	f004 ffa8 	bl	da1e4 <digitalRead>
}
   d5294:	b2c0      	uxtb	r0, r0
   d5296:	bd08      	pop	{r3, pc}

000d5298 <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d5298:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d529a:	f7ff fff7 	bl	d528c <_Z21igh_boron_read_buttonv>
   d529e:	4b04      	ldr	r3, [pc, #16]	; (d52b0 <_Z31igh_boron_button_press_durationv+0x18>)
   d52a0:	b910      	cbnz	r0, d52a8 <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d52a2:	781a      	ldrb	r2, [r3, #0]
   d52a4:	3201      	adds	r2, #1
   d52a6:	e000      	b.n	d52aa <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d52a8:	2200      	movs	r2, #0
   d52aa:	701a      	strb	r2, [r3, #0]
   d52ac:	bd08      	pop	{r3, pc}
   d52ae:	bf00      	nop
   d52b0:	2003daf8 	.word	0x2003daf8

000d52b4 <_Z27attach_flow_meter_interruptv>:
{
    flow_meter_pulses++;
}

void attach_flow_meter_interrupt( void )
{
   d52b4:	b507      	push	{r0, r1, r2, lr}
    pinMode( IGH_WATER_FLOW_PIN, INPUT_PULLUP );
   d52b6:	2102      	movs	r1, #2
   d52b8:	2005      	movs	r0, #5
   d52ba:	f004 ff69 	bl	da190 <pinMode>
    attachInterrupt( IGH_WATER_FLOW_PIN , igh_app_water_counter_callback, FALLING );
   d52be:	2300      	movs	r3, #0
   d52c0:	9300      	str	r3, [sp, #0]
   d52c2:	2202      	movs	r2, #2
   d52c4:	f04f 33ff 	mov.w	r3, #4294967295
   d52c8:	4903      	ldr	r1, [pc, #12]	; (d52d8 <_Z27attach_flow_meter_interruptv+0x24>)
   d52ca:	2005      	movs	r0, #5
   d52cc:	f004 f960 	bl	d9590 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d52d0:	b003      	add	sp, #12
   d52d2:	f85d fb04 	ldr.w	pc, [sp], #4
   d52d6:	bf00      	nop
   d52d8:	000d50f1 	.word	0x000d50f1

000d52dc <_Z29igh_hardware_water_flow_setupv>:
        igh_button_sec_counter = 0;
    } 
}

void igh_hardware_water_flow_setup( void )
{
   d52dc:	b508      	push	{r3, lr}
    attach_flow_meter_interrupt();
   d52de:	f7ff ffe9 	bl	d52b4 <_Z27attach_flow_meter_interruptv>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d52e2:	2200      	movs	r2, #0
   d52e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d52e8:	4801      	ldr	r0, [pc, #4]	; (d52f0 <_Z29igh_hardware_water_flow_setupv+0x14>)
   d52ea:	f7ff ffb5 	bl	d5258 <_ZN5Timer6_startEjb>
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	2003dadc 	.word	0x2003dadc

000d52f4 <_Z18igh_hardware_setupv>:

Timer water_flow_timer(ONE_SECOND, igh_hardware_litres_service);


void igh_hardware_setup(void)
{
   d52f4:	b510      	push	{r4, lr}


/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
   d52f6:	2102      	movs	r1, #2
   d52f8:	200f      	movs	r0, #15
   d52fa:	f004 ff49 	bl	da190 <pinMode>
   d52fe:	2200      	movs	r2, #0
   d5300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5304:	4808      	ldr	r0, [pc, #32]	; (d5328 <_Z18igh_hardware_setupv+0x34>)
   d5306:	f7ff ffa7 	bl	d5258 <_ZN5Timer6_startEjb>
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d530a:	4b08      	ldr	r3, [pc, #32]	; (d532c <_Z18igh_hardware_setupv+0x38>)
   d530c:	2400      	movs	r4, #0
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d530e:	2101      	movs	r1, #1
   d5310:	2007      	movs	r0, #7
/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d5312:	701c      	strb	r4, [r3, #0]
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d5314:	f004 ff3c 	bl	da190 <pinMode>
    igh_boron_toggle_boron_led(OFF);
   d5318:	4620      	mov	r0, r4
   d531a:	f7ff ffb3 	bl	d5284 <_Z26igh_boron_toggle_boron_ledh>
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    // igh_hardware_vlave_setup();
    igh_hardware_water_flow_setup();
}
   d531e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void igh_hardware_setup(void)
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    // igh_hardware_vlave_setup();
    igh_hardware_water_flow_setup();
   d5322:	f7ff bfdb 	b.w	d52dc <_Z29igh_hardware_water_flow_setupv>
   d5326:	bf00      	nop
   d5328:	2003dafc 	.word	0x2003dafc
   d532c:	2003daf8 	.word	0x2003daf8

000d5330 <_Z27detach_flow_meter_interruptv>:
    attachInterrupt( IGH_WATER_FLOW_PIN , igh_app_water_counter_callback, FALLING );
}

void detach_flow_meter_interrupt( void )
{
    detachInterrupt( IGH_WATER_FLOW_PIN );
   d5330:	2005      	movs	r0, #5
   d5332:	f004 b955 	b.w	d95e0 <_Z15detachInterruptt>
	...

000d5338 <_Z27igh_hardware_litres_servicev>:
}

void igh_hardware_litres_service( void )
{
   d5338:	b538      	push	{r3, r4, r5, lr}
    uint32_t copy_flow_meter_pulses = 0;
    detach_flow_meter_interrupt();
   d533a:	f7ff fff9 	bl	d5330 <_Z27detach_flow_meter_interruptv>
    // copy the current flow meter pulses
    copy_flow_meter_pulses = flow_meter_pulses;
   d533e:	4b0e      	ldr	r3, [pc, #56]	; (d5378 <_Z27igh_hardware_litres_servicev+0x40>)
    // this routine will always happen once every second
    float flowRate = copy_flow_meter_pulses / FLOW_METER_CAL_FACTOR;
    float flow_Liters = flowRate / ONE_MIN;

    // add to the total amount of water flow
    total_water_dispensed_Liters += flow_Liters; 
   d5340:	4c0e      	ldr	r4, [pc, #56]	; (d537c <_Z27igh_hardware_litres_servicev+0x44>)
void igh_hardware_litres_service( void )
{
    uint32_t copy_flow_meter_pulses = 0;
    detach_flow_meter_interrupt();
    // copy the current flow meter pulses
    copy_flow_meter_pulses = flow_meter_pulses;
   d5342:	681d      	ldr	r5, [r3, #0]
    // reset and enable interrupts to avoid missing too many pulses
    flow_meter_pulses = 0;
   d5344:	2200      	movs	r2, #0
   d5346:	601a      	str	r2, [r3, #0]
    attach_flow_meter_interrupt();
   d5348:	f7ff ffb4 	bl	d52b4 <_Z27attach_flow_meter_interruptv>
    // this routine will always happen once every second
    float flowRate = copy_flow_meter_pulses / FLOW_METER_CAL_FACTOR;
    float flow_Liters = flowRate / ONE_MIN;

    // add to the total amount of water flow
    total_water_dispensed_Liters += flow_Liters; 
   d534c:	4628      	mov	r0, r5
   d534e:	f005 fa9d 	bl	da88c <__aeabi_ui2d>
   d5352:	2200      	movs	r2, #0
   d5354:	4b0a      	ldr	r3, [pc, #40]	; (d5380 <_Z27igh_hardware_litres_servicev+0x48>)
   d5356:	f005 fc39 	bl	dabcc <__aeabi_ddiv>
   d535a:	f005 fd1f 	bl	dad9c <__aeabi_d2f>
   d535e:	ed9f 7a09 	vldr	s14, [pc, #36]	; d5384 <_Z27igh_hardware_litres_servicev+0x4c>
   d5362:	ee06 0a90 	vmov	s13, r0
   d5366:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d536a:	ed94 7a00 	vldr	s14, [r4]
   d536e:	ee77 7a87 	vadd.f32	s15, s15, s14
   d5372:	edc4 7a00 	vstr	s15, [r4]
   d5376:	bd38      	pop	{r3, r4, r5, pc}
   d5378:	2003dad8 	.word	0x2003dad8
   d537c:	2003db18 	.word	0x2003db18
   d5380:	40120000 	.word	0x40120000
   d5384:	42700000 	.word	0x42700000

000d5388 <_GLOBAL__sub_I_liters_timer>:
    {
        local_hour - TWENTY_FOUR_HOURS;
    }

    return (uint8_t)local_hour;
   d5388:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
#define TWENTY_FOUR_HOURS      (24)


// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d538c:	f8df 807c 	ldr.w	r8, [pc, #124]	; d540c <_GLOBAL__sub_I_liters_timer+0x84>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5390:	4f17      	ldr	r7, [pc, #92]	; (d53f0 <_GLOBAL__sub_I_liters_timer+0x68>)
	    _M_manager = &_My_handler::_M_manager;
   d5392:	4c18      	ldr	r4, [pc, #96]	; (d53f4 <_GLOBAL__sub_I_liters_timer+0x6c>)
   d5394:	4e18      	ldr	r6, [pc, #96]	; (d53f8 <_GLOBAL__sub_I_liters_timer+0x70>)
   d5396:	4d19      	ldr	r5, [pc, #100]	; (d53fc <_GLOBAL__sub_I_liters_timer+0x74>)
   d5398:	f002 ff6c 	bl	d8274 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d539c:	4b18      	ldr	r3, [pc, #96]	; (d5400 <_GLOBAL__sub_I_liters_timer+0x78>)
   d539e:	9300      	str	r3, [sp, #0]
   d53a0:	466a      	mov	r2, sp
   d53a2:	2300      	movs	r3, #0
   d53a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d53a8:	4640      	mov	r0, r8

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d53aa:	9402      	str	r4, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53ac:	9703      	str	r7, [sp, #12]
   d53ae:	f7ff fee3 	bl	d5178 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53b2:	4668      	mov	r0, sp
   d53b4:	f7ff fed6 	bl	d5164 <_ZNSt14_Function_baseD1Ev>
   d53b8:	4632      	mov	r2, r6
   d53ba:	4629      	mov	r1, r5
   d53bc:	4640      	mov	r0, r8
   d53be:	f004 ffb9 	bl	da334 <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d53c2:	9402      	str	r4, [sp, #8]
// local functions
static void igh_hardware_irrigiation_button_setup(void);
static void igh_hardware_onboard_led_setup(void);
static void igh_hardware_vlave_setup(void);

Timer water_flow_timer(ONE_SECOND, igh_hardware_litres_service);
   d53c4:	4c0f      	ldr	r4, [pc, #60]	; (d5404 <_GLOBAL__sub_I_liters_timer+0x7c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d53c6:	4b10      	ldr	r3, [pc, #64]	; (d5408 <_GLOBAL__sub_I_liters_timer+0x80>)
   d53c8:	9300      	str	r3, [sp, #0]
   d53ca:	466a      	mov	r2, sp
   d53cc:	2300      	movs	r3, #0
   d53ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d53d2:	4620      	mov	r0, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53d4:	9703      	str	r7, [sp, #12]
   d53d6:	f7ff fecf 	bl	d5178 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53da:	4668      	mov	r0, sp
   d53dc:	f7ff fec2 	bl	d5164 <_ZNSt14_Function_baseD1Ev>
   d53e0:	4632      	mov	r2, r6
   d53e2:	4629      	mov	r1, r5
   d53e4:	4620      	mov	r0, r4
   d53e6:	f004 ffa5 	bl	da334 <__aeabi_atexit>
    {
        local_hour - TWENTY_FOUR_HOURS;
    }

    return (uint8_t)local_hour;
   d53ea:	b004      	add	sp, #16
   d53ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d53f0:	000d5101 	.word	0x000d5101
   d53f4:	000d5105 	.word	0x000d5105
   d53f8:	2003da28 	.word	0x2003da28
   d53fc:	000d51fd 	.word	0x000d51fd
   d5400:	000d5299 	.word	0x000d5299
   d5404:	2003dadc 	.word	0x2003dadc
   d5408:	000d5339 	.word	0x000d5339
   d540c:	2003dafc 	.word	0x2003dafc

000d5410 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d5410:	7c03      	ldrb	r3, [r0, #16]
   d5412:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d5416:	4602      	mov	r2, r0
   d5418:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d541c:	b12b      	cbz	r3, d542a <_ZN4File9availableEv+0x1a>
   d541e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d5420:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d5422:	1a18      	subs	r0, r3, r0
   d5424:	bf48      	it	mi
   d5426:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d542a:	4770      	bx	lr

000d542c <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d542c:	4770      	bx	lr

000d542e <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d542e:	4770      	bx	lr

000d5430 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5432:	4602      	mov	r2, r0
   d5434:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5436:	7913      	ldrb	r3, [r2, #4]
   d5438:	6895      	ldr	r5, [r2, #8]
   d543a:	b133      	cbz	r3, d544a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d543c:	b93d      	cbnz	r5, d544e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d543e:	490c      	ldr	r1, [pc, #48]	; (d5470 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d5440:	b004      	add	sp, #16
   d5442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d5446:	f003 bd1b 	b.w	d8e80 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d544a:	4b0a      	ldr	r3, [pc, #40]	; (d5474 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d544c:	e000      	b.n	d5450 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d544e:	4b0a      	ldr	r3, [pc, #40]	; (d5478 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d5450:	7b16      	ldrb	r6, [r2, #12]
   d5452:	4c0a      	ldr	r4, [pc, #40]	; (d547c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d5454:	490a      	ldr	r1, [pc, #40]	; (d5480 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d5456:	7b52      	ldrb	r2, [r2, #13]
   d5458:	9202      	str	r2, [sp, #8]
   d545a:	2e01      	cmp	r6, #1
   d545c:	bf08      	it	eq
   d545e:	4621      	moveq	r1, r4
   d5460:	9101      	str	r1, [sp, #4]
   d5462:	9500      	str	r5, [sp, #0]
   d5464:	4a07      	ldr	r2, [pc, #28]	; (d5484 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d5466:	2100      	movs	r1, #0
   d5468:	f003 fd47 	bl	d8efa <_ZN5Print11printf_implEbPKcz>
  }
   d546c:	b004      	add	sp, #16
   d546e:	bd70      	pop	{r4, r5, r6, pc}
   d5470:	000db1cd 	.word	0x000db1cd
   d5474:	000db37c 	.word	0x000db37c
   d5478:	000db1bc 	.word	0x000db1bc
   d547c:	000db1c5 	.word	0x000db1c5
   d5480:	000db1c9 	.word	0x000db1c9
   d5484:	000db1e3 	.word	0x000db1e3

000d5488 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d5488:	3010      	adds	r0, #16
   d548a:	f001 bd91 	b.w	d6fb0 <_ZN7FatFile4syncEv>

000d548e <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d548e:	3010      	adds	r0, #16
   d5490:	f001 bc68 	b.w	d6d64 <_ZN7FatFile4peekEv>

000d5494 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d5494:	3010      	adds	r0, #16
   d5496:	f001 be2b 	b.w	d70f0 <_ZN7FatFile5writeEPKvj>

000d549a <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d549a:	3008      	adds	r0, #8
   d549c:	f001 be28 	b.w	d70f0 <_ZN7FatFile5writeEPKvj>

000d54a0 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d54a0:	b507      	push	{r0, r1, r2, lr}
   d54a2:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d54a4:	2201      	movs	r2, #1
   d54a6:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d54aa:	3010      	adds	r0, #16
   d54ac:	4619      	mov	r1, r3
   d54ae:	f001 fe1f 	bl	d70f0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d54b2:	b003      	add	sp, #12
   d54b4:	f85d fb04 	ldr.w	pc, [sp], #4

000d54b8 <_ZN6SdFileD0Ev>:
   d54b8:	b510      	push	{r4, lr}
   d54ba:	212c      	movs	r1, #44	; 0x2c
   d54bc:	4604      	mov	r4, r0
   d54be:	f004 ff47 	bl	da350 <_ZdlPvj>
   d54c2:	4620      	mov	r0, r4
   d54c4:	bd10      	pop	{r4, pc}

000d54c6 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d54c6:	b510      	push	{r4, lr}
   d54c8:	2134      	movs	r1, #52	; 0x34
   d54ca:	4604      	mov	r4, r0
   d54cc:	f004 ff40 	bl	da350 <_ZdlPvj>
   d54d0:	4620      	mov	r0, r4
   d54d2:	bd10      	pop	{r4, pc}

000d54d4 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d54d4:	b507      	push	{r0, r1, r2, lr}
   d54d6:	ab02      	add	r3, sp, #8
   d54d8:	2201      	movs	r2, #1
   d54da:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d54de:	3008      	adds	r0, #8
   d54e0:	4619      	mov	r1, r3
   d54e2:	f001 fe05 	bl	d70f0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d54e6:	b003      	add	sp, #12
   d54e8:	f85d fb04 	ldr.w	pc, [sp], #4

000d54ec <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d54ec:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d54ee:	2201      	movs	r2, #1
   d54f0:	f10d 0107 	add.w	r1, sp, #7
   d54f4:	f001 fb83 	bl	d6bfe <_ZN7FatFile4readEPvj>
   d54f8:	2801      	cmp	r0, #1
   d54fa:	bf0c      	ite	eq
   d54fc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d5500:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d5504:	b003      	add	sp, #12
   d5506:	f85d fb04 	ldr.w	pc, [sp], #4

000d550a <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d550a:	b508      	push	{r3, lr}
    return FatFile::read();
   d550c:	3010      	adds	r0, #16
   d550e:	f7ff ffed 	bl	d54ec <_ZN7FatFile4readEv>
  }
   d5512:	bd08      	pop	{r3, pc}

000d5514 <_Z16igh_sd_log_setupv>:
 * convertedt to a character string
 * eg: 2E78FA2E.LOG
*/

uint8_t igh_sd_log_setup(void)
{
   d5514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5516:	4820      	ldr	r0, [pc, #128]	; (d5598 <_Z16igh_sd_log_setupv+0x84>)
    if(sd_root.isOpen()) sd_root.close();
   d5518:	7a03      	ldrb	r3, [r0, #8]
   d551a:	b113      	cbz	r3, d5522 <_Z16igh_sd_log_setupv+0xe>
   d551c:	3008      	adds	r0, #8
   d551e:	f001 fd7d 	bl	d701c <_ZN7FatFile5closeEv>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5522:	4c1e      	ldr	r4, [pc, #120]	; (d559c <_Z16igh_sd_log_setupv+0x88>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5524:	4b1e      	ldr	r3, [pc, #120]	; (d55a0 <_Z16igh_sd_log_setupv+0x8c>)
   d5526:	4a1f      	ldr	r2, [pc, #124]	; (d55a4 <_Z16igh_sd_log_setupv+0x90>)
   d5528:	9300      	str	r3, [sp, #0]
   d552a:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d552e:	2300      	movs	r3, #0
   d5530:	f88d 3004 	strb.w	r3, [sp, #4]
   d5534:	9202      	str	r2, [sp, #8]
   d5536:	2501      	movs	r5, #1
   d5538:	f88d 300d 	strb.w	r3, [sp, #13]
   d553c:	220e      	movs	r2, #14
   d553e:	466b      	mov	r3, sp
   d5540:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d5544:	4630      	mov	r0, r6
   d5546:	f88d 500c 	strb.w	r5, [sp, #12]
   d554a:	f002 f919 	bl	d7780 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d554e:	b300      	cbz	r0, d5592 <_Z16igh_sd_log_setupv+0x7e>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d5550:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d5554:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d5556:	f001 fd61 	bl	d701c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d555a:	4629      	mov	r1, r5
   d555c:	4620      	mov	r0, r4
   d555e:	f001 ffb8 	bl	d74d2 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d5562:	4601      	mov	r1, r0
   d5564:	b180      	cbz	r0, d5588 <_Z16igh_sd_log_setupv+0x74>
   d5566:	4c0d      	ldr	r4, [pc, #52]	; (d559c <_Z16igh_sd_log_setupv+0x88>)
   d5568:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d556c:	4621      	mov	r1, r4
   d556e:	4628      	mov	r0, r5
   d5570:	f001 fb2d 	bl	d6bce <_ZN7FatFile8openRootEP9FatVolume>
   d5574:	b168      	cbz	r0, d5592 <_Z16igh_sd_log_setupv+0x7e>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d5576:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d557a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d557e:	bf16      	itet	ne
   d5580:	4b09      	ldrne	r3, [pc, #36]	; (d55a8 <_Z16igh_sd_log_setupv+0x94>)
   d5582:	4618      	moveq	r0, r3
   d5584:	601d      	strne	r5, [r3, #0]
   d5586:	e005      	b.n	d5594 <_Z16igh_sd_log_setupv+0x80>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d5588:	4620      	mov	r0, r4
   d558a:	f001 ffa2 	bl	d74d2 <_ZN9FatVolume4initEh>
   d558e:	2800      	cmp	r0, #0
   d5590:	d1e9      	bne.n	d5566 <_Z16igh_sd_log_setupv+0x52>
   d5592:	2000      	movs	r0, #0
    return igh_sd.begin(IGH_SD_CS);
}
   d5594:	b004      	add	sp, #16
   d5596:	bd70      	pop	{r4, r5, r6, pc}
   d5598:	2003dfd8 	.word	0x2003dfd8
   d559c:	2003db54 	.word	0x2003db54
   d55a0:	000db178 	.word	0x000db178
   d55a4:	02faf080 	.word	0x02faf080
   d55a8:	2003e07c 	.word	0x2003e07c

000d55ac <_Z24igh_sd_log_get_file_namemPc>:
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d55ac:	b507      	push	{r0, r1, r2, lr}
   d55ae:	4602      	mov	r2, r0
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d55b0:	b2d3      	uxtb	r3, r2
   d55b2:	9301      	str	r3, [sp, #4]
   d55b4:	f3c2 2307 	ubfx	r3, r2, #8, #8
   d55b8:	9300      	str	r3, [sp, #0]
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d55ba:	4608      	mov	r0, r1
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d55bc:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d55c0:	4903      	ldr	r1, [pc, #12]	; (d55d0 <_Z24igh_sd_log_get_file_namemPc+0x24>)
   d55c2:	0e12      	lsrs	r2, r2, #24
   d55c4:	f003 f9aa 	bl	d891c <sprintf>
}
   d55c8:	b003      	add	sp, #12
   d55ca:	f85d fb04 	ldr.w	pc, [sp], #4
   d55ce:	bf00      	nop
   d55d0:	000db201 	.word	0x000db201

000d55d4 <_Z26igh_sd_log_save_data_pointmPhh>:

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d55d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d55d8:	b092      	sub	sp, #72	; 0x48
   d55da:	4688      	mov	r8, r1
    uint8_t ret = 0;
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d55dc:	a901      	add	r1, sp, #4
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
}

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d55de:	4617      	mov	r7, r2
    uint8_t ret = 0;
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d55e0:	f7ff ffe4 	bl	d55ac <_Z24igh_sd_log_get_file_namemPc>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d55e4:	2300      	movs	r3, #0
   d55e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d55ea:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d55ee:	9306      	str	r3, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55f4:	9307      	str	r3, [sp, #28]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d55f6:	4b24      	ldr	r3, [pc, #144]	; (d5688 <_Z26igh_sd_log_save_data_pointmPhh+0xb4>)
   d55f8:	9305      	str	r3, [sp, #20]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d55fa:	aa01      	add	r2, sp, #4
   d55fc:	f244 2302 	movw	r3, #16898	; 0x4202
   d5600:	4922      	ldr	r1, [pc, #136]	; (d568c <_Z26igh_sd_log_save_data_pointmPhh+0xb8>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5602:	4e23      	ldr	r6, [pc, #140]	; (d5690 <_Z26igh_sd_log_save_data_pointmPhh+0xbc>)
   d5604:	a809      	add	r0, sp, #36	; 0x24
   d5606:	ac09      	add	r4, sp, #36	; 0x24
   d5608:	f001 fd0f 	bl	d702a <_ZN7FatFile4openEPS_PKci>
   d560c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d560e:	f106 0510 	add.w	r5, r6, #16
   d5612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5618:	6823      	ldr	r3, [r4, #0]
   d561a:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d561c:	9b06      	ldr	r3, [sp, #24]
   d561e:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5620:	9b07      	ldr	r3, [sp, #28]
   d5622:	60b3      	str	r3, [r6, #8]
   d5624:	9b08      	ldr	r3, [sp, #32]
   d5626:	60f3      	str	r3, [r6, #12]
    igh_file = igh_sd.open((const char *)name, FILE_WRITE);

    Serial.print("Saving: "); Serial.print(name); Serial.print(" Size: "); Serial.print(size);
   d5628:	f003 ff8a 	bl	d9540 <_Z16_fetch_usbserialv>
   d562c:	4919      	ldr	r1, [pc, #100]	; (d5694 <_Z26igh_sd_log_save_data_pointmPhh+0xc0>)
   d562e:	f003 fc27 	bl	d8e80 <_ZN5Print5printEPKc>
   d5632:	f003 ff85 	bl	d9540 <_Z16_fetch_usbserialv>
   d5636:	a901      	add	r1, sp, #4
   d5638:	f003 fc22 	bl	d8e80 <_ZN5Print5printEPKc>
   d563c:	f003 ff80 	bl	d9540 <_Z16_fetch_usbserialv>
   d5640:	4915      	ldr	r1, [pc, #84]	; (d5698 <_Z26igh_sd_log_save_data_pointmPhh+0xc4>)
   d5642:	f003 fc1d 	bl	d8e80 <_ZN5Print5printEPKc>
   d5646:	f003 ff7b 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d564a:	220a      	movs	r2, #10
   d564c:	4639      	mov	r1, r7
   d564e:	f003 fc34 	bl	d8eba <_ZN5Print11printNumberEmh>

    if(igh_file)
   d5652:	7c34      	ldrb	r4, [r6, #16]
   d5654:	b15c      	cbz	r4, d566e <_Z26igh_sd_log_save_data_pointmPhh+0x9a>
    {
        igh_file.write( data, size);
   d5656:	463a      	mov	r2, r7
   d5658:	4641      	mov	r1, r8
   d565a:	4630      	mov	r0, r6
   d565c:	f7ff ff1a 	bl	d5494 <_ZN4File5writeEPKhj>
        Serial.println(" OK");
   d5660:	f003 ff6e 	bl	d9540 <_Z16_fetch_usbserialv>
   d5664:	490d      	ldr	r1, [pc, #52]	; (d569c <_Z26igh_sd_log_save_data_pointmPhh+0xc8>)
   d5666:	f003 fc1e 	bl	d8ea6 <_ZN5Print7printlnEPKc>
        ret = 1;
   d566a:	2401      	movs	r4, #1
   d566c:	e004      	b.n	d5678 <_Z26igh_sd_log_save_data_pointmPhh+0xa4>
    }
    else
    {
        Serial.println(" ERROR");
   d566e:	f003 ff67 	bl	d9540 <_Z16_fetch_usbserialv>
   d5672:	490b      	ldr	r1, [pc, #44]	; (d56a0 <_Z26igh_sd_log_save_data_pointmPhh+0xcc>)
   d5674:	f003 fc17 	bl	d8ea6 <_ZN5Print7printlnEPKc>
    }

    igh_file.close();
   d5678:	480a      	ldr	r0, [pc, #40]	; (d56a4 <_Z26igh_sd_log_save_data_pointmPhh+0xd0>)
   d567a:	f001 fccf 	bl	d701c <_ZN7FatFile5closeEv>
    return ret;
}
   d567e:	4620      	mov	r0, r4
   d5680:	b012      	add	sp, #72	; 0x48
   d5682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5686:	bf00      	nop
   d5688:	000db184 	.word	0x000db184
   d568c:	2003df90 	.word	0x2003df90
   d5690:	2003e004 	.word	0x2003e004
   d5694:	000db216 	.word	0x000db216
   d5698:	000db21f 	.word	0x000db21f
   d569c:	000daf4a 	.word	0x000daf4a
   d56a0:	000daf52 	.word	0x000daf52
   d56a4:	2003e014 	.word	0x2003e014

000d56a8 <_Z28igh_sd_log_remove_data_pointPc>:
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d56a8:	4601      	mov	r1, r0
   d56aa:	4801      	ldr	r0, [pc, #4]	; (d56b0 <_Z28igh_sd_log_remove_data_pointPc+0x8>)
   d56ac:	f001 bd0c 	b.w	d70c8 <_ZN7FatFile6removeEPS_PKc>
   d56b0:	2003df90 	.word	0x2003df90

000d56b4 <_Z26igh_sd_log_read_data_pointPcPhh>:
        return 1;
    }
}

uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
   d56b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d56b8:	b08e      	sub	sp, #56	; 0x38
   d56ba:	4690      	mov	r8, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d56bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d56c0:	9203      	str	r2, [sp, #12]
 public:
  File() {}
   d56c2:	4a18      	ldr	r2, [pc, #96]	; (d5724 <_Z26igh_sd_log_read_data_pointPcPhh+0x70>)
   d56c4:	9201      	str	r2, [sp, #4]
   d56c6:	2300      	movs	r3, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d56c8:	4602      	mov	r2, r0
   d56ca:	460f      	mov	r7, r1
   d56cc:	a805      	add	r0, sp, #20
   d56ce:	4916      	ldr	r1, [pc, #88]	; (d5728 <_Z26igh_sd_log_read_data_pointPcPhh+0x74>)
   d56d0:	f88d 3014 	strb.w	r3, [sp, #20]
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d56d4:	ac05      	add	r4, sp, #20
   d56d6:	f88d 3015 	strb.w	r3, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d56da:	9302      	str	r3, [sp, #8]
   d56dc:	f001 fca5 	bl	d702a <_ZN7FatFile4openEPS_PKci>
   d56e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d56e2:	4e12      	ldr	r6, [pc, #72]	; (d572c <_Z26igh_sd_log_read_data_pointPcPhh+0x78>)
   d56e4:	f106 0510 	add.w	r5, r6, #16
   d56e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d56ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d56ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d56ee:	6823      	ldr	r3, [r4, #0]
   d56f0:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d56f2:	9b02      	ldr	r3, [sp, #8]
   d56f4:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
   d56f6:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d56f8:	9b03      	ldr	r3, [sp, #12]
   d56fa:	60b3      	str	r3, [r6, #8]
   d56fc:	9b04      	ldr	r3, [sp, #16]
   d56fe:	60f3      	str	r3, [r6, #12]
   d5700:	b160      	cbz	r0, d571c <_Z26igh_sd_log_read_data_pointPcPhh+0x68>
   d5702:	463c      	mov	r4, r7
    {
        for(int i = 0; i < data_length; i++)
   d5704:	1be3      	subs	r3, r4, r7
   d5706:	4598      	cmp	r8, r3
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
        }
        igh_file.close();
   d5708:	4809      	ldr	r0, [pc, #36]	; (d5730 <_Z26igh_sd_log_read_data_pointPcPhh+0x7c>)
uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
    {
        for(int i = 0; i < data_length; i++)
   d570a:	dd04      	ble.n	d5716 <_Z26igh_sd_log_read_data_pointPcPhh+0x62>
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
   d570c:	f7ff feee 	bl	d54ec <_ZN7FatFile4readEv>
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
   d5710:	f804 0b01 	strb.w	r0, [r4], #1
   d5714:	e7f6      	b.n	d5704 <_Z26igh_sd_log_read_data_pointPcPhh+0x50>
        }
        igh_file.close();
   d5716:	f001 fc81 	bl	d701c <_ZN7FatFile5closeEv>
   d571a:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }   
}
   d571c:	b00e      	add	sp, #56	; 0x38
   d571e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5722:	bf00      	nop
   d5724:	000db184 	.word	0x000db184
   d5728:	2003df90 	.word	0x2003df90
   d572c:	2003e004 	.word	0x2003e004
   d5730:	2003e014 	.word	0x2003e014

000d5734 <_Z29igh_sd_log_get_next_file_namePc>:

uint8_t igh_sd_log_get_next_file_name(char * next_file_name)
{
   d5734:	b510      	push	{r4, lr}
   d5736:	4604      	mov	r4, r0
    if(!igh_sd_log_setup())
   d5738:	f7ff feec 	bl	d5514 <_Z16igh_sd_log_setupv>
   d573c:	b908      	cbnz	r0, d5742 <_Z29igh_sd_log_get_next_file_namePc+0xe>
    {
        return 0;
   d573e:	2000      	movs	r0, #0
   d5740:	bd10      	pop	{r4, pc}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d5742:	4910      	ldr	r1, [pc, #64]	; (d5784 <_Z29igh_sd_log_get_next_file_namePc+0x50>)
   d5744:	4a10      	ldr	r2, [pc, #64]	; (d5788 <_Z29igh_sd_log_get_next_file_namePc+0x54>)
   d5746:	6809      	ldr	r1, [r1, #0]
   d5748:	4810      	ldr	r0, [pc, #64]	; (d578c <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d574a:	2300      	movs	r3, #0
   d574c:	f001 fc6d 	bl	d702a <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d5750:	2800      	cmp	r0, #0
   d5752:	d0f4      	beq.n	d573e <_Z29igh_sd_log_get_next_file_namePc+0xa>
    {
        return 0;
    }
    else
    {
        next_file.openNext(&sd_root, O_RDONLY); // skip one index
   d5754:	2200      	movs	r2, #0
   d5756:	490d      	ldr	r1, [pc, #52]	; (d578c <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5758:	480d      	ldr	r0, [pc, #52]	; (d5790 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d575a:	f001 fbea 	bl	d6f32 <_ZN7FatFile8openNextEPS_i>
        next_file.close(); 
   d575e:	480c      	ldr	r0, [pc, #48]	; (d5790 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5760:	f001 fc5c 	bl	d701c <_ZN7FatFile5closeEv>
        if( next_file.openNext(&sd_root, O_RDONLY) )
   d5764:	2200      	movs	r2, #0
   d5766:	4909      	ldr	r1, [pc, #36]	; (d578c <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5768:	4809      	ldr	r0, [pc, #36]	; (d5790 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d576a:	f001 fbe2 	bl	d6f32 <_ZN7FatFile8openNextEPS_i>
   d576e:	2800      	cmp	r0, #0
   d5770:	d0e5      	beq.n	d573e <_Z29igh_sd_log_get_next_file_namePc+0xa>
        {
            next_file.getSFN(next_file_name);
   d5772:	4621      	mov	r1, r4
   d5774:	4806      	ldr	r0, [pc, #24]	; (d5790 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5776:	f001 f98d 	bl	d6a94 <_ZN7FatFile6getSFNEPc>
            next_file.close(); 
   d577a:	4805      	ldr	r0, [pc, #20]	; (d5790 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d577c:	f001 fc4e 	bl	d701c <_ZN7FatFile5closeEv>
   d5780:	2001      	movs	r0, #1
        else
        {
            return 0;
        }    
    }
}
   d5782:	bd10      	pop	{r4, pc}
   d5784:	2003e07c 	.word	0x2003e07c
   d5788:	000db227 	.word	0x000db227
   d578c:	2003dfe0 	.word	0x2003dfe0
   d5790:	2003db30 	.word	0x2003db30

000d5794 <_GLOBAL__sub_I_igh_sd>:
    {
        return 0;
    }

    return 1;
   d5794:	b570      	push	{r4, r5, r6, lr}
   d5796:	f002 fd6d 	bl	d8274 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d579a:	4b27      	ldr	r3, [pc, #156]	; (d5838 <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d579c:	4e27      	ldr	r6, [pc, #156]	; (d583c <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d579e:	2164      	movs	r1, #100	; 0x64
   d57a0:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d57a4:	4926      	ldr	r1, [pc, #152]	; (d5840 <_GLOBAL__sub_I_igh_sd+0xac>)
   d57a6:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d57aa:	2101      	movs	r1, #1
   d57ac:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d57b0:	6831      	ldr	r1, [r6, #0]
   d57b2:	2200      	movs	r2, #0
   d57b4:	f011 0501 	ands.w	r5, r1, #1
   d57b8:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d57ba:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d57be:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d57c2:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d57c6:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d57ca:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d57ce:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d57d2:	461c      	mov	r4, r3
   d57d4:	d10a      	bne.n	d57ec <_GLOBAL__sub_I_igh_sd+0x58>
   d57d6:	4630      	mov	r0, r6
   d57d8:	f7fe fc65 	bl	d40a6 <__cxa_guard_acquire>
   d57dc:	b130      	cbz	r0, d57ec <_GLOBAL__sub_I_igh_sd+0x58>
   d57de:	4629      	mov	r1, r5
   d57e0:	4818      	ldr	r0, [pc, #96]	; (d5844 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d57e2:	f003 f8f7 	bl	d89d4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d57e6:	4630      	mov	r0, r6
   d57e8:	f7fe fc62 	bl	d40b0 <__cxa_guard_release>
   d57ec:	4816      	ldr	r0, [pc, #88]	; (d5848 <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d57ee:	4b15      	ldr	r3, [pc, #84]	; (d5844 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d57f0:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d57f4:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57fa:	7404      	strb	r4, [r0, #16]
   d57fc:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57fe:	6044      	str	r4, [r0, #4]
   d5800:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d5802:	4a12      	ldr	r2, [pc, #72]	; (d584c <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5804:	4b12      	ldr	r3, [pc, #72]	; (d5850 <_GLOBAL__sub_I_igh_sd+0xbc>)
   d5806:	4913      	ldr	r1, [pc, #76]	; (d5854 <_GLOBAL__sub_I_igh_sd+0xc0>)
   d5808:	6003      	str	r3, [r0, #0]
   d580a:	f004 fd93 	bl	da334 <__aeabi_atexit>
   d580e:	4812      	ldr	r0, [pc, #72]	; (d5858 <_GLOBAL__sub_I_igh_sd+0xc4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d5810:	4d12      	ldr	r5, [pc, #72]	; (d585c <_GLOBAL__sub_I_igh_sd+0xc8>)
   d5812:	7204      	strb	r4, [r0, #8]
   d5814:	7244      	strb	r4, [r0, #9]
   d5816:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d5818:	4a0c      	ldr	r2, [pc, #48]	; (d584c <_GLOBAL__sub_I_igh_sd+0xb8>)
   d581a:	4911      	ldr	r1, [pc, #68]	; (d5860 <_GLOBAL__sub_I_igh_sd+0xcc>)
   d581c:	6005      	str	r5, [r0, #0]
   d581e:	f004 fd89 	bl	da334 <__aeabi_atexit>
   d5822:	4810      	ldr	r0, [pc, #64]	; (d5864 <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d5824:	4a09      	ldr	r2, [pc, #36]	; (d584c <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5826:	7204      	strb	r4, [r0, #8]
   d5828:	7244      	strb	r4, [r0, #9]
   d582a:	6044      	str	r4, [r0, #4]
   d582c:	6005      	str	r5, [r0, #0]
   d582e:	490c      	ldr	r1, [pc, #48]	; (d5860 <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d5830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d5834:	f004 bd7e 	b.w	da334 <__aeabi_atexit>
   d5838:	2003db54 	.word	0x2003db54
   d583c:	2003db1c 	.word	0x2003db1c
   d5840:	000db178 	.word	0x000db178
   d5844:	2003db20 	.word	0x2003db20
   d5848:	2003e004 	.word	0x2003e004
   d584c:	2003da28 	.word	0x2003da28
   d5850:	000db184 	.word	0x000db184
   d5854:	000d542f 	.word	0x000d542f
   d5858:	2003dfd8 	.word	0x2003dfd8
   d585c:	000db1ac 	.word	0x000db1ac
   d5860:	000d542d 	.word	0x000d542d
   d5864:	2003db28 	.word	0x2003db28

000d5868 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5868:	4770      	bx	lr

000d586a <_ZN14CellularSignalD0Ev>:
   d586a:	b510      	push	{r4, lr}
   d586c:	2128      	movs	r1, #40	; 0x28
   d586e:	4604      	mov	r4, r0
   d5870:	f004 fd6e 	bl	da350 <_ZdlPvj>
   d5874:	4620      	mov	r0, r4
   d5876:	bd10      	pop	{r4, pc}

000d5878 <_Z19igh_boron_sync_timev>:
/* Local function prototypes */
uint8_t get_int_from_str( uint8_t num );

/* Functions */
void igh_boron_sync_time(void)
{
   d5878:	b510      	push	{r4, lr}
   d587a:	f002 fdc3 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d587e:	4b08      	ldr	r3, [pc, #32]	; (d58a0 <_Z19igh_boron_sync_timev+0x28>)
   d5880:	681a      	ldr	r2, [r3, #0]
   d5882:	1a80      	subs	r0, r0, r2
   d5884:	4a07      	ldr	r2, [pc, #28]	; (d58a4 <_Z19igh_boron_sync_timev+0x2c>)
   d5886:	4290      	cmp	r0, r2
   d5888:	461c      	mov	r4, r3
   d588a:	d908      	bls.n	d589e <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d588c:	f003 f806 	bl	d889c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d5890:	b110      	cbz	r0, d5898 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d5892:	2000      	movs	r0, #0
   d5894:	f003 f812 	bl	d88bc <spark_sync_time>
   d5898:	f002 fdb4 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d589c:	6020      	str	r0, [r4, #0]
   d589e:	bd10      	pop	{r4, pc}
   d58a0:	2003e060 	.word	0x2003e060
   d58a4:	05265c00 	.word	0x05265c00

000d58a8 <_Z19igh_boron_unix_timev>:
    }
}

uint32_t igh_boron_unix_time(void)
{
    return (uint32_t)Time.now();
   d58a8:	f003 bb98 	b.w	d8fdc <_ZN9TimeClass3nowEv>

000d58ac <_Z13igh_boron_SoCv>:
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d58ac:	4801      	ldr	r0, [pc, #4]	; (d58b4 <_Z13igh_boron_SoCv+0x8>)
   d58ae:	f003 bca5 	b.w	d91fc <_ZN9FuelGauge6getSoCEv>
   d58b2:	bf00      	nop
   d58b4:	2003e064 	.word	0x2003e064

000d58b8 <_Z16get_int_from_strh>:
        k++; j++;
    }
}

uint8_t get_int_from_str( uint8_t num )
{
   d58b8:	b510      	push	{r4, lr}
    unsigned long location = (unsigned long)strchr(hex_digits_LC, num);
   d58ba:	4c04      	ldr	r4, [pc, #16]	; (d58cc <_Z16get_int_from_strh+0x14>)
   d58bc:	4601      	mov	r1, r0
   d58be:	4620      	mov	r0, r4
   d58c0:	f005 fb14 	bl	daeec <strchr>
    unsigned long origin = (unsigned long)hex_digits_LC;
    return uint8_t(location - origin);
   d58c4:	1b00      	subs	r0, r0, r4
}
   d58c6:	b2c0      	uxtb	r0, r0
   d58c8:	bd10      	pop	{r4, pc}
   d58ca:	bf00      	nop
   d58cc:	2003d9ac 	.word	0x2003d9ac

000d58d0 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d58d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d58d4:	f002 fd96 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d58d8:	4b14      	ldr	r3, [pc, #80]	; (d592c <_Z15igh_boron_setupv+0x5c>)
   d58da:	6018      	str	r0, [r3, #0]
   d58dc:	4668      	mov	r0, sp
   d58de:	f002 ffe5 	bl	d88ac <spark_deviceID>
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );
   d58e2:	9b00      	ldr	r3, [sp, #0]
   d58e4:	4a12      	ldr	r2, [pc, #72]	; (d5930 <_Z15igh_boron_setupv+0x60>)
   d58e6:	f103 0118 	add.w	r1, r3, #24
   d58ea:	4617      	mov	r7, r2
   d58ec:	f853 0b04 	ldr.w	r0, [r3], #4
   d58f0:	f842 0b04 	str.w	r0, [r2], #4
   d58f4:	428b      	cmp	r3, r1
   d58f6:	d1f9      	bne.n	d58ec <_Z15igh_boron_setupv+0x1c>
   d58f8:	4668      	mov	r0, sp
   d58fa:	f003 f9cd 	bl	d8c98 <_ZN6StringD1Ev>
   d58fe:	4e0d      	ldr	r6, [pc, #52]	; (d5934 <_Z15igh_boron_setupv+0x64>)
   d5900:	2500      	movs	r5, #0

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d5902:	5d78      	ldrb	r0, [r7, r5]
   d5904:	f7ff ffd8 	bl	d58b8 <_Z16get_int_from_strh>
   d5908:	eb07 0805 	add.w	r8, r7, r5
   d590c:	0100      	lsls	r0, r0, #4
   d590e:	b2c4      	uxtb	r4, r0
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5910:	f898 0001 	ldrb.w	r0, [r8, #1]
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d5914:	f806 4f01 	strb.w	r4, [r6, #1]!
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5918:	f7ff ffce 	bl	d58b8 <_Z16get_int_from_strh>
   d591c:	3502      	adds	r5, #2
   d591e:	4320      	orrs	r0, r4
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d5920:	2d18      	cmp	r5, #24
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5922:	7030      	strb	r0, [r6, #0]
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d5924:	d1ed      	bne.n	d5902 <_Z15igh_boron_setupv+0x32>
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
        k++; j++;
    }
}
   d5926:	b004      	add	sp, #16
   d5928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d592c:	2003e060 	.word	0x2003e060
   d5930:	2003e688 	.word	0x2003e688
   d5934:	2003e69f 	.word	0x2003e69f

000d5938 <_Z17igh_boron_servicev>:
    return uint8_t(location - origin);
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
   d5938:	f7ff bf9e 	b.w	d5878 <_Z19igh_boron_sync_timev>

000d593c <_GLOBAL__sub_I_lastSync>:
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d593c:	b570      	push	{r4, r5, r6, lr}
   d593e:	f002 fc99 	bl	d8274 <HAL_Pin_Map>
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5942:	4c10      	ldr	r4, [pc, #64]	; (d5984 <_GLOBAL__sub_I_lastSync+0x48>)
   d5944:	4b10      	ldr	r3, [pc, #64]	; (d5988 <_GLOBAL__sub_I_lastSync+0x4c>)
   d5946:	6023      	str	r3, [r4, #0]
   d5948:	2500      	movs	r5, #0
   d594a:	3328      	adds	r3, #40	; 0x28
   d594c:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d594e:	4e0f      	ldr	r6, [pc, #60]	; (d598c <_GLOBAL__sub_I_lastSync+0x50>)
   d5950:	6063      	str	r3, [r4, #4]
   d5952:	2218      	movs	r2, #24
   d5954:	f104 0010 	add.w	r0, r4, #16
   d5958:	60a5      	str	r5, [r4, #8]
   d595a:	60e5      	str	r5, [r4, #12]
   d595c:	f005 fa96 	bl	dae8c <memset>
   d5960:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d5962:	4c0b      	ldr	r4, [pc, #44]	; (d5990 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d5964:	490b      	ldr	r1, [pc, #44]	; (d5994 <_GLOBAL__sub_I_lastSync+0x58>)
   d5966:	4632      	mov	r2, r6
   d5968:	f004 fce4 	bl	da334 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d596c:	4629      	mov	r1, r5
   d596e:	4620      	mov	r0, r4
   d5970:	f003 fc04 	bl	d917c <_ZN9FuelGaugeC1Eb>
   d5974:	4632      	mov	r2, r6
   d5976:	4620      	mov	r0, r4
   d5978:	4907      	ldr	r1, [pc, #28]	; (d5998 <_GLOBAL__sub_I_lastSync+0x5c>)
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d597a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d597e:	f004 bcd9 	b.w	da334 <__aeabi_atexit>
   d5982:	bf00      	nop
   d5984:	2003e038 	.word	0x2003e038
   d5988:	000db3e8 	.word	0x000db3e8
   d598c:	2003da28 	.word	0x2003da28
   d5990:	2003e064 	.word	0x2003e064
   d5994:	000d5869 	.word	0x000d5869
   d5998:	000d919b 	.word	0x000d919b

000d599c <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d599c:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d599e:	4c07      	ldr	r4, [pc, #28]	; (d59bc <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d59a0:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d59a2:	4602      	mov	r2, r0
   d59a4:	2103      	movs	r1, #3
   d59a6:	4620      	mov	r0, r4
   d59a8:	f002 f96a 	bl	d7c80 <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d59ac:	462a      	mov	r2, r5
   d59ae:	4620      	mov	r0, r4
   d59b0:	2104      	movs	r1, #4
}
   d59b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d59b6:	f002 b963 	b.w	d7c80 <_ZN5RFM698writeRegEhh>
   d59ba:	bf00      	nop
   d59bc:	2003e06c 	.word	0x2003e06c

000d59c0 <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d59c0:	4601      	mov	r1, r0
   d59c2:	4801      	ldr	r0, [pc, #4]	; (d59c8 <_Z25igh_rfm69_set_power_levelh+0x8>)
   d59c4:	f002 b96e 	b.w	d7ca4 <_ZN5RFM6913setPowerLevelEh>
   d59c8:	2003e06c 	.word	0x2003e06c

000d59cc <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d59cc:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d59ce:	2101      	movs	r1, #1
   d59d0:	2006      	movs	r0, #6
   d59d2:	f004 fbee 	bl	da1b2 <digitalWrite>
    delay(100);
   d59d6:	2064      	movs	r0, #100	; 0x64
   d59d8:	f003 fb12 	bl	d9000 <delay>
    digitalWrite(RFM69_RST, LOW);
   d59dc:	2006      	movs	r0, #6
   d59de:	2100      	movs	r1, #0
   d59e0:	f004 fbe7 	bl	da1b2 <digitalWrite>
    delay(100);
   d59e4:	2064      	movs	r0, #100	; 0x64
}
   d59e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d59ea:	f003 bb09 	b.w	d9000 <delay>
	...

000d59f0 <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d59f0:	b538      	push	{r3, r4, r5, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d59f2:	4c21      	ldr	r4, [pc, #132]	; (d5a78 <_Z15igh_rfm69_setupv+0x88>)
RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d59f4:	2101      	movs	r1, #1
   d59f6:	2006      	movs	r0, #6
   d59f8:	f004 fbca 	bl	da190 <pinMode>

    igh_rfm69_reset();
   d59fc:	f7ff ffe6 	bl	d59cc <_Z15igh_rfm69_resetv>
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d5a00:	7fa3      	ldrb	r3, [r4, #30]
   d5a02:	7fe2      	ldrb	r2, [r4, #31]
   d5a04:	481d      	ldr	r0, [pc, #116]	; (d5a7c <_Z15igh_rfm69_setupv+0x8c>)
   d5a06:	215b      	movs	r1, #91	; 0x5b
   d5a08:	f002 fb10 	bl	d802c <_ZN5RFM6910initializeEhhh>
   d5a0c:	b920      	cbnz	r0, d5a18 <_Z15igh_rfm69_setupv+0x28>
    Serial.println("RFM69 INIT ERROR");
   d5a0e:	f003 fd97 	bl	d9540 <_Z16_fetch_usbserialv>
   d5a12:	491b      	ldr	r1, [pc, #108]	; (d5a80 <_Z15igh_rfm69_setupv+0x90>)
   d5a14:	f003 fa47 	bl	d8ea6 <_ZN5Print7printlnEPKc>

    Serial.print( "NEW SHIELD RF ID: " ); Serial.println( RFM69_NODE_ID);
   d5a18:	f003 fd92 	bl	d9540 <_Z16_fetch_usbserialv>
   d5a1c:	4919      	ldr	r1, [pc, #100]	; (d5a84 <_Z15igh_rfm69_setupv+0x94>)
   d5a1e:	f003 fa2f 	bl	d8e80 <_ZN5Print5printEPKc>
   d5a22:	f003 fd8d 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5a26:	220a      	movs	r2, #10
   d5a28:	7fe1      	ldrb	r1, [r4, #31]
   d5a2a:	4605      	mov	r5, r0
   d5a2c:	f003 fa45 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5a30:	4628      	mov	r0, r5
   d5a32:	f003 fa2c 	bl	d8e8e <_ZN5Print7printlnEv>
    Serial.print( "NEW NETWORK ID: " ); Serial.println( RFM69_NETWORK_ID);
   d5a36:	f003 fd83 	bl	d9540 <_Z16_fetch_usbserialv>
   d5a3a:	4913      	ldr	r1, [pc, #76]	; (d5a88 <_Z15igh_rfm69_setupv+0x98>)
   d5a3c:	f003 fa20 	bl	d8e80 <_ZN5Print5printEPKc>
   d5a40:	f003 fd7e 	bl	d9540 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5a44:	220a      	movs	r2, #10
   d5a46:	7fa1      	ldrb	r1, [r4, #30]
   d5a48:	4605      	mov	r5, r0
   d5a4a:	f003 fa36 	bl	d8eba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5a4e:	4628      	mov	r0, r5
   d5a50:	f003 fa1d 	bl	d8e8e <_ZN5Print7printlnEv>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d5a54:	2101      	movs	r1, #1
   d5a56:	4809      	ldr	r0, [pc, #36]	; (d5a7c <_Z15igh_rfm69_setupv+0x8c>)
   d5a58:	f002 fa0e 	bl	d7e78 <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d5a5c:	2105      	movs	r1, #5
   d5a5e:	200d      	movs	r0, #13
   d5a60:	f7ff ff9c 	bl	d599c <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d5a64:	4b09      	ldr	r3, [pc, #36]	; (d5a8c <_Z15igh_rfm69_setupv+0x9c>)
   d5a66:	7818      	ldrb	r0, [r3, #0]
   d5a68:	f7ff ffaa 	bl	d59c0 <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d5a6c:	4908      	ldr	r1, [pc, #32]	; (d5a90 <_Z15igh_rfm69_setupv+0xa0>)
   d5a6e:	4803      	ldr	r0, [pc, #12]	; (d5a7c <_Z15igh_rfm69_setupv+0x8c>)
} 
   d5a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d5a74:	f002 baae 	b.w	d7fd4 <_ZN5RFM697encryptEPKc>
   d5a78:	2003e60c 	.word	0x2003e60c
   d5a7c:	2003e06c 	.word	0x2003e06c
   d5a80:	000db229 	.word	0x000db229
   d5a84:	000db23a 	.word	0x000db23a
   d5a88:	000db24d 	.word	0x000db24d
   d5a8c:	2003d9bd 	.word	0x2003d9bd
   d5a90:	000db25e 	.word	0x000db25e

000d5a94 <_Z27igh_rfm69_receive_raw_bytesPhh>:
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d5a94:	b570      	push	{r4, r5, r6, lr}
   d5a96:	4605      	mov	r5, r0
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d5a98:	4809      	ldr	r0, [pc, #36]	; (d5ac0 <_Z27igh_rfm69_receive_raw_bytesPhh+0x2c>)
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d5a9a:	460e      	mov	r6, r1
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d5a9c:	f002 f9cc 	bl	d7e38 <_ZN5RFM6911receiveDoneEv>
   d5aa0:	b160      	cbz	r0, d5abc <_Z27igh_rfm69_receive_raw_bytesPhh+0x28>
    {
        if( igh_radio.DATALEN <= len )
   d5aa2:	4c08      	ldr	r4, [pc, #32]	; (d5ac4 <_Z27igh_rfm69_receive_raw_bytesPhh+0x30>)
   d5aa4:	7823      	ldrb	r3, [r4, #0]
   d5aa6:	42b3      	cmp	r3, r6
   d5aa8:	d807      	bhi.n	d5aba <_Z27igh_rfm69_receive_raw_bytesPhh+0x26>
        {
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d5aaa:	7822      	ldrb	r2, [r4, #0]
   d5aac:	4906      	ldr	r1, [pc, #24]	; (d5ac8 <_Z27igh_rfm69_receive_raw_bytesPhh+0x34>)
   d5aae:	4628      	mov	r0, r5
   d5ab0:	f005 f9e1 	bl	dae76 <memcpy>
            rx_len = igh_radio.DATALEN;
   d5ab4:	7820      	ldrb	r0, [r4, #0]
   d5ab6:	b2c0      	uxtb	r0, r0
   d5ab8:	bd70      	pop	{r4, r5, r6, pc}
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
    uint8_t rx_len = 0;
   d5aba:	2000      	movs	r0, #0
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
            rx_len = igh_radio.DATALEN;
        }
    }
    return rx_len;
}
   d5abc:	bd70      	pop	{r4, r5, r6, pc}
   d5abe:	bf00      	nop
   d5ac0:	2003e06c 	.word	0x2003e06c
   d5ac4:	2003e0e3 	.word	0x2003e0e3
   d5ac8:	2003e0a6 	.word	0x2003e0a6

000d5acc <_Z17igh_rfm69_servicev>:

void igh_rfm69_service( void )
{
   d5acc:	b510      	push	{r4, lr}
    // if new settings have been sent, re initialize the module
    if( true == initialize_rfm69 )
   d5ace:	4c04      	ldr	r4, [pc, #16]	; (d5ae0 <_Z17igh_rfm69_servicev+0x14>)
   d5ad0:	7823      	ldrb	r3, [r4, #0]
   d5ad2:	2b01      	cmp	r3, #1
   d5ad4:	d103      	bne.n	d5ade <_Z17igh_rfm69_servicev+0x12>
    {
        igh_rfm69_setup();
   d5ad6:	f7ff ff8b 	bl	d59f0 <_Z15igh_rfm69_setupv>
        initialize_rfm69 = false;
   d5ada:	2300      	movs	r3, #0
   d5adc:	7023      	strb	r3, [r4, #0]
   d5ade:	bd10      	pop	{r4, pc}
   d5ae0:	2003da2d 	.word	0x2003da2d

000d5ae4 <_GLOBAL__sub_I_NETWORKID>:
    }
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	f002 fbc5 	bl	d8274 <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d5aea:	4b08      	ldr	r3, [pc, #32]	; (d5b0c <_GLOBAL__sub_I_NETWORKID+0x28>)
   d5aec:	4a08      	ldr	r2, [pc, #32]	; (d5b10 <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d5aee:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d5af0:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d5af2:	4908      	ldr	r1, [pc, #32]	; (d5b14 <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d5af4:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d5af6:	2208      	movs	r2, #8
   d5af8:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d5afa:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d5afc:	2201      	movs	r2, #1
   d5afe:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d5b00:	2100      	movs	r1, #0
   d5b02:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d5b04:	211f      	movs	r1, #31
   d5b06:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d5b08:	729a      	strb	r2, [r3, #10]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	2003e06c 	.word	0x2003e06c
   d5b10:	000db298 	.word	0x000db298
   d5b14:	2003e0e4 	.word	0x2003e0e4

000d5b18 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5b18:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5b1a:	6984      	ldr	r4, [r0, #24]
   d5b1c:	4b0a      	ldr	r3, [pc, #40]	; (d5b48 <_ZN9TCPClientD1Ev+0x30>)
   d5b1e:	6003      	str	r3, [r0, #0]
   d5b20:	4605      	mov	r5, r0
   d5b22:	b17c      	cbz	r4, d5b44 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5b24:	6863      	ldr	r3, [r4, #4]
   d5b26:	3b01      	subs	r3, #1
   d5b28:	6063      	str	r3, [r4, #4]
   d5b2a:	b95b      	cbnz	r3, d5b44 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5b2c:	6823      	ldr	r3, [r4, #0]
   d5b2e:	4620      	mov	r0, r4
   d5b30:	689b      	ldr	r3, [r3, #8]
   d5b32:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5b34:	68a3      	ldr	r3, [r4, #8]
   d5b36:	3b01      	subs	r3, #1
   d5b38:	60a3      	str	r3, [r4, #8]
   d5b3a:	b91b      	cbnz	r3, d5b44 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5b3c:	6823      	ldr	r3, [r4, #0]
   d5b3e:	4620      	mov	r0, r4
   d5b40:	68db      	ldr	r3, [r3, #12]
   d5b42:	4798      	blx	r3
   d5b44:	4628      	mov	r0, r5
   d5b46:	bd38      	pop	{r3, r4, r5, pc}
   d5b48:	000db53c 	.word	0x000db53c

000d5b4c <_ZN9TCPClientD0Ev>:
   d5b4c:	b510      	push	{r4, lr}
   d5b4e:	4604      	mov	r4, r0
   d5b50:	f7ff ffe2 	bl	d5b18 <_ZN9TCPClientD1Ev>
   d5b54:	4620      	mov	r0, r4
   d5b56:	211c      	movs	r1, #28
   d5b58:	f004 fbfa 	bl	da350 <_ZdlPvj>
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	bd10      	pop	{r4, pc}

000d5b60 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5b60:	b538      	push	{r3, r4, r5, lr}
   d5b62:	461d      	mov	r5, r3
    this->callback = callback;
   d5b64:	9b05      	ldr	r3, [sp, #20]
   d5b66:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d5b68:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5b6a:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d5b6c:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d5b6e:	b102      	cbz	r2, d5b72 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d5b70:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d5b72:	b119      	cbz	r1, d5b7c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d5b74:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5b78:	f003 f91c 	bl	d8db4 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d5b7c:	9b04      	ldr	r3, [sp, #16]
   d5b7e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5b80:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d5b82:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d5b84:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5b88:	2bff      	cmp	r3, #255	; 0xff
   d5b8a:	bfb8      	it	lt
   d5b8c:	23ff      	movlt	r3, #255	; 0xff
   d5b8e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d5b92:	b108      	cbz	r0, d5b98 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d5b94:	f7fe fa85 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d5b98:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d5b9c:	f7fe fa7d 	bl	d409a <_Znaj>
   d5ba0:	61e0      	str	r0, [r4, #28]
   d5ba2:	bd38      	pop	{r3, r4, r5, pc}

000d5ba4 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d5ba4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5ba8:	4604      	mov	r4, r0
   d5baa:	2500      	movs	r5, #0
   d5bac:	4617      	mov	r7, r2
   d5bae:	4698      	mov	r8, r3
   d5bb0:	460e      	mov	r6, r1
   d5bb2:	f004 f9f5 	bl	d9fa0 <_ZN9TCPClientC1Ev>
   d5bb6:	61e5      	str	r5, [r4, #28]
   d5bb8:	490a      	ldr	r1, [pc, #40]	; (d5be4 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d5bba:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5bbe:	f003 f8b2 	bl	d8d26 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d5bc2:	23ff      	movs	r3, #255	; 0xff
   d5bc4:	9302      	str	r3, [sp, #8]
   d5bc6:	230f      	movs	r3, #15
   d5bc8:	9300      	str	r3, [sp, #0]
   d5bca:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d5bcc:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d5bce:	f8cd 8004 	str.w	r8, [sp, #4]
   d5bd2:	463b      	mov	r3, r7
   d5bd4:	462a      	mov	r2, r5
   d5bd6:	4631      	mov	r1, r6
   d5bd8:	f7ff ffc2 	bl	d5b60 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d5bdc:	4620      	mov	r0, r4
   d5bde:	b004      	add	sp, #16
   d5be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5be4:	000db37c 	.word	0x000db37c

000d5be8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d5be8:	b510      	push	{r4, lr}
   d5bea:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d5bec:	4620      	mov	r0, r4
   d5bee:	f004 f93b 	bl	d9e68 <_ZN9TCPClient9availableEv>
   d5bf2:	2800      	cmp	r0, #0
   d5bf4:	d0fa      	beq.n	d5bec <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	f003 ffdf 	bl	d9bba <_ZN9TCPClient4readEv>
}
   d5bfc:	b2c0      	uxtb	r0, r0
   d5bfe:	bd10      	pop	{r4, pc}

000d5c00 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5c04:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5c06:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5c08:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5c0a:	f7ff ffed 	bl	d5be8 <_ZN4MQTT8readByteEv>
   d5c0e:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d5c10:	69eb      	ldr	r3, [r5, #28]
   d5c12:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d5c16:	f04f 0901 	mov.w	r9, #1
   d5c1a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d5c1e:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5c20:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d5c22:	4628      	mov	r0, r5
   d5c24:	f7ff ffe0 	bl	d5be8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d5c28:	69eb      	ldr	r3, [r5, #28]
   d5c2a:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d5c2c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d5c30:	fb13 f309 	smulbb	r3, r3, r9
   d5c34:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5c36:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d5c38:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5c3a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d5c3c:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d5c3e:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d5c42:	d501      	bpl.n	d5c48 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5c44:	4626      	mov	r6, r4
   d5c46:	e7ec      	b.n	d5c22 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5c48:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d5c4a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5c4e:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d5c52:	d113      	bne.n	d5c7c <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d5c54:	4628      	mov	r0, r5
   d5c56:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5c5a:	f7ff ffc5 	bl	d5be8 <_ZN4MQTT8readByteEv>
   d5c5e:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d5c62:	4628      	mov	r0, r5
   d5c64:	1cf4      	adds	r4, r6, #3
   d5c66:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5c6a:	3602      	adds	r6, #2
   d5c6c:	f7ff ffbc 	bl	d5be8 <_ZN4MQTT8readByteEv>
   d5c70:	b2b6      	uxth	r6, r6
   d5c72:	b2a4      	uxth	r4, r4
   d5c74:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d5c78:	2302      	movs	r3, #2
   d5c7a:	e000      	b.n	d5c7e <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d5c7c:	2300      	movs	r3, #0
   d5c7e:	1b1b      	subs	r3, r3, r4
   d5c80:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5c82:	19a3      	adds	r3, r4, r6
   d5c84:	b29b      	uxth	r3, r3
   d5c86:	429f      	cmp	r7, r3
   d5c88:	d90b      	bls.n	d5ca2 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d5c8a:	4628      	mov	r0, r5
   d5c8c:	f7ff ffac 	bl	d5be8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d5c90:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d5c94:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d5c96:	bf84      	itt	hi
   d5c98:	69eb      	ldrhi	r3, [r5, #28]
   d5c9a:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d5c9c:	3401      	adds	r4, #1
   d5c9e:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5ca0:	e7ef      	b.n	d5c82 <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d5ca2:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d5ca6:	42a0      	cmp	r0, r4
   d5ca8:	bf2c      	ite	cs
   d5caa:	4620      	movcs	r0, r4
   d5cac:	2000      	movcc	r0, #0
   d5cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5cb2 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d5cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5cb4:	4607      	mov	r7, r0
   d5cb6:	468e      	mov	lr, r1
   d5cb8:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d5cba:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d5cbc:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5cbe:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d5cc0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5cc4:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d5cc6:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d5cc8:	bf18      	it	ne
   d5cca:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d5cce:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5cd0:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d5cd4:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d5cd6:	2d00      	cmp	r5, #0
   d5cd8:	d1f1      	bne.n	d5cbe <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d5cda:	f1c4 0304 	rsb	r3, r4, #4
   d5cde:	18d1      	adds	r1, r2, r3
   d5ce0:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d5ce4:	42a5      	cmp	r5, r4
   d5ce6:	da06      	bge.n	d5cf6 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d5ce8:	1b2b      	subs	r3, r5, r4
   d5cea:	a801      	add	r0, sp, #4
   d5cec:	4413      	add	r3, r2
   d5cee:	5c28      	ldrb	r0, [r5, r0]
   d5cf0:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d5cf2:	3501      	adds	r5, #1
   d5cf4:	e7f6      	b.n	d5ce4 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d5cf6:	1c72      	adds	r2, r6, #1
   d5cf8:	4422      	add	r2, r4
   d5cfa:	4638      	mov	r0, r7
   d5cfc:	f003 feb3 	bl	d9a66 <_ZN9TCPClient5writeEPKhj>
   d5d00:	4605      	mov	r5, r0
   d5d02:	f002 fb7f 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d5d06:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d5d08:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d5d0a:	4434      	add	r4, r6
   d5d0c:	b2a8      	uxth	r0, r5
}
   d5d0e:	1a23      	subs	r3, r4, r0
   d5d10:	4258      	negs	r0, r3
   d5d12:	4158      	adcs	r0, r3
   d5d14:	b003      	add	sp, #12
   d5d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d18 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5d18:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d5d1a:	69c3      	ldr	r3, [r0, #28]
   d5d1c:	22e0      	movs	r2, #224	; 0xe0
   d5d1e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d5d20:	69c3      	ldr	r3, [r0, #28]
   d5d22:	2200      	movs	r2, #0
   d5d24:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5d26:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d5d28:	2202      	movs	r2, #2
   d5d2a:	69c1      	ldr	r1, [r0, #28]
   d5d2c:	f003 fe9b 	bl	d9a66 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d5d30:	4620      	mov	r0, r4
   d5d32:	f004 f881 	bl	d9e38 <_ZN9TCPClient4stopEv>
   d5d36:	f002 fb65 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d5d3a:	6260      	str	r0, [r4, #36]	; 0x24
   d5d3c:	62a0      	str	r0, [r4, #40]	; 0x28
   d5d3e:	bd10      	pop	{r4, pc}

000d5d40 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5d40:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d5d42:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5d44:	b29b      	uxth	r3, r3
   d5d46:	460d      	mov	r5, r1
   d5d48:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d5d4a:	f815 6b01 	ldrb.w	r6, [r5], #1
   d5d4e:	b2a4      	uxth	r4, r4
   d5d50:	b13e      	cbz	r6, d5d62 <_ZN4MQTT11writeStringEPKcPht+0x22>
   d5d52:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d5d56:	429f      	cmp	r7, r3
   d5d58:	d903      	bls.n	d5d62 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d5d5a:	1c5c      	adds	r4, r3, #1
   d5d5c:	54d6      	strb	r6, [r2, r3]
   d5d5e:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d5d60:	e7f2      	b.n	d5d48 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5d62:	1b19      	subs	r1, r3, r4
   d5d64:	440a      	add	r2, r1
   d5d66:	1221      	asrs	r1, r4, #8
   d5d68:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d5d6c:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d5d70:	4618      	mov	r0, r3
   d5d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d74 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d5d74:	b538      	push	{r3, r4, r5, lr}
   d5d76:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d5d78:	f003 fe8b 	bl	d9a92 <_ZN9TCPClient9connectedEv>
   d5d7c:	2800      	cmp	r0, #0
   d5d7e:	bf14      	ite	ne
   d5d80:	2401      	movne	r4, #1
   d5d82:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d5d84:	d102      	bne.n	d5d8c <_ZN4MQTT11isConnectedEv+0x18>
   d5d86:	4628      	mov	r0, r5
   d5d88:	f004 f856 	bl	d9e38 <_ZN9TCPClient4stopEv>
    return rc;
}
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	bd38      	pop	{r3, r4, r5, pc}

000d5d90 <_ZN4MQTT9setBrokerEPct>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

void MQTT::setBroker(char* domain, uint16_t port) {
   d5d90:	b570      	push	{r4, r5, r6, lr}
   d5d92:	4604      	mov	r4, r0
   d5d94:	460e      	mov	r6, r1
   d5d96:	4615      	mov	r5, r2
    if(isConnected()) {
   d5d98:	f7ff ffec 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d5d9c:	b110      	cbz	r0, d5da4 <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d5d9e:	4620      	mov	r0, r4
   d5da0:	f7ff ffba 	bl	d5d18 <_ZN4MQTT10disconnectEv>
    }
    this->domain = domain;
   d5da4:	4631      	mov	r1, r6
   d5da6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5daa:	f003 f803 	bl	d8db4 <_ZN6StringaSEPKc>
    this->ip = NULL;
   d5dae:	2300      	movs	r3, #0
   d5db0:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d5db2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   d5db6:	bd70      	pop	{r4, r5, r6, pc}

000d5db8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d5db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5dbc:	b087      	sub	sp, #28
   d5dbe:	4604      	mov	r4, r0
   d5dc0:	4689      	mov	r9, r1
   d5dc2:	4617      	mov	r7, r2
   d5dc4:	461e      	mov	r6, r3
   d5dc6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d5dca:	f7ff ffd3 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d5dce:	4605      	mov	r5, r0
   d5dd0:	2800      	cmp	r0, #0
   d5dd2:	f040 80bd 	bne.w	d5f50 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d5dd6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5dd8:	b939      	cbnz	r1, d5dea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d5dda:	4603      	mov	r3, r0
   d5ddc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5de0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5de2:	4620      	mov	r0, r4
   d5de4:	f003 ff2c 	bl	d9c40 <_ZN9TCPClient7connectEPKctm>
   d5de8:	e009      	b.n	d5dfe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d5dea:	4668      	mov	r0, sp
   d5dec:	f003 fb3c 	bl	d9468 <_ZN9IPAddressC1EPKh>
   d5df0:	462b      	mov	r3, r5
   d5df2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5df6:	4669      	mov	r1, sp
   d5df8:	4620      	mov	r0, r4
   d5dfa:	f003 ffa3 	bl	d9d44 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d5dfe:	2800      	cmp	r0, #0
   d5e00:	f000 80a2 	beq.w	d5f48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d5e04:	2301      	movs	r3, #1
   d5e06:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d5e08:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d5e0c:	2b04      	cmp	r3, #4
   d5e0e:	d115      	bne.n	d5e3c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5e10:	4b52      	ldr	r3, [pc, #328]	; (d5f5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d5e12:	6818      	ldr	r0, [r3, #0]
   d5e14:	889a      	ldrh	r2, [r3, #4]
   d5e16:	f8ad 2004 	strh.w	r2, [sp, #4]
   d5e1a:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5e1c:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5e1e:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5e20:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5e22:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5e26:	1d53      	adds	r3, r2, #5
   d5e28:	f8c2 0005 	str.w	r0, [r2, #5]
   d5e2c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d5e30:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d5e34:	719a      	strb	r2, [r3, #6]
   d5e36:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d5e38:	230c      	movs	r3, #12
   d5e3a:	e012      	b.n	d5e62 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5e3c:	4b48      	ldr	r3, [pc, #288]	; (d5f60 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5e3e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5e42:	6818      	ldr	r0, [r3, #0]
   d5e44:	6859      	ldr	r1, [r3, #4]
   d5e46:	7a1b      	ldrb	r3, [r3, #8]
   d5e48:	466a      	mov	r2, sp
   d5e4a:	c203      	stmia	r2!, {r0, r1}
   d5e4c:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5e4e:	466b      	mov	r3, sp
   d5e50:	cb03      	ldmia	r3!, {r0, r1}
   d5e52:	f8cc 0005 	str.w	r0, [ip, #5]
   d5e56:	f8cc 1009 	str.w	r1, [ip, #9]
   d5e5a:	7813      	ldrb	r3, [r2, #0]
   d5e5c:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5e60:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d5e62:	f1b8 0f00 	cmp.w	r8, #0
   d5e66:	d00a      	beq.n	d5e7e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5e68:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d5e6c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d5e70:	0152      	lsls	r2, r2, #5
   d5e72:	f042 0206 	orr.w	r2, r2, #6
   d5e76:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d5e7a:	b2d2      	uxtb	r2, r2
   d5e7c:	e000      	b.n	d5e80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d5e7e:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d5e80:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d5e84:	b909      	cbnz	r1, d5e8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d5e86:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d5e8a:	b12f      	cbz	r7, d5e98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d5e8c:	b916      	cbnz	r6, d5e94 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d5e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d5e92:	e001      	b.n	d5e98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d5e94:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d5e98:	69e1      	ldr	r1, [r4, #28]
   d5e9a:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d5e9c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5e9e:	69e1      	ldr	r1, [r4, #28]
   d5ea0:	1c58      	adds	r0, r3, #1
   d5ea2:	1212      	asrs	r2, r2, #8
   d5ea4:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d5ea6:	1c9a      	adds	r2, r3, #2
   d5ea8:	69e1      	ldr	r1, [r4, #28]
   d5eaa:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5eac:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5eae:	3303      	adds	r3, #3
   d5eb0:	69e2      	ldr	r2, [r4, #28]
   d5eb2:	4649      	mov	r1, r9
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	f7ff ff43 	bl	d5d40 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d5eba:	f1b8 0f00 	cmp.w	r8, #0
   d5ebe:	d00b      	beq.n	d5ed8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d5ec0:	4603      	mov	r3, r0
   d5ec2:	69e2      	ldr	r2, [r4, #28]
   d5ec4:	4641      	mov	r1, r8
   d5ec6:	4620      	mov	r0, r4
   d5ec8:	f7ff ff3a 	bl	d5d40 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5ecc:	69e2      	ldr	r2, [r4, #28]
   d5ece:	9911      	ldr	r1, [sp, #68]	; 0x44
   d5ed0:	4603      	mov	r3, r0
   d5ed2:	4620      	mov	r0, r4
   d5ed4:	f7ff ff34 	bl	d5d40 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d5ed8:	b167      	cbz	r7, d5ef4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d5eda:	4603      	mov	r3, r0
   d5edc:	69e2      	ldr	r2, [r4, #28]
   d5ede:	4639      	mov	r1, r7
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	f7ff ff2d 	bl	d5d40 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d5ee6:	b12e      	cbz	r6, d5ef4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d5ee8:	4603      	mov	r3, r0
   d5eea:	69e2      	ldr	r2, [r4, #28]
   d5eec:	4631      	mov	r1, r6
   d5eee:	4620      	mov	r0, r4
   d5ef0:	f7ff ff26 	bl	d5d40 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d5ef4:	1f43      	subs	r3, r0, #5
   d5ef6:	b29b      	uxth	r3, r3
   d5ef8:	69e2      	ldr	r2, [r4, #28]
   d5efa:	2110      	movs	r1, #16
   d5efc:	4620      	mov	r0, r4
   d5efe:	f7ff fed8 	bl	d5cb2 <_ZN4MQTT5writeEhPht>
   d5f02:	f002 fa7f 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5f06:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d5f0a:	6260      	str	r0, [r4, #36]	; 0x24
   d5f0c:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d5f0e:	4620      	mov	r0, r4
   d5f10:	f003 ffaa 	bl	d9e68 <_ZN9TCPClient9availableEv>
   d5f14:	b940      	cbnz	r0, d5f28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d5f16:	f002 fa75 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5f1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5f1c:	1ac0      	subs	r0, r0, r3
   d5f1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5f20:	4373      	muls	r3, r6
   d5f22:	4298      	cmp	r0, r3
   d5f24:	d9f3      	bls.n	d5f0e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d5f26:	e00f      	b.n	d5f48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5f28:	4669      	mov	r1, sp
   d5f2a:	4620      	mov	r0, r4
   d5f2c:	f7ff fe68 	bl	d5c00 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d5f30:	2804      	cmp	r0, #4
   d5f32:	d109      	bne.n	d5f48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d5f34:	69e3      	ldr	r3, [r4, #28]
   d5f36:	78de      	ldrb	r6, [r3, #3]
   d5f38:	b936      	cbnz	r6, d5f48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d5f3a:	f002 fa63 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d5f3e:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d5f40:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d5f42:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d5f46:	e004      	b.n	d5f52 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d5f48:	4620      	mov	r0, r4
   d5f4a:	f003 ff75 	bl	d9e38 <_ZN9TCPClient4stopEv>
   d5f4e:	e000      	b.n	d5f52 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d5f50:	2500      	movs	r5, #0
}
   d5f52:	4628      	mov	r0, r5
   d5f54:	b007      	add	sp, #28
   d5f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5f5a:	bf00      	nop
   d5f5c:	000db280 	.word	0x000db280
   d5f60:	000db287 	.word	0x000db287

000d5f64 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d5f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d5f66:	2304      	movs	r3, #4
   d5f68:	9305      	str	r3, [sp, #20]
   d5f6a:	2301      	movs	r3, #1
   d5f6c:	9304      	str	r3, [sp, #16]
   d5f6e:	2300      	movs	r3, #0
   d5f70:	9303      	str	r3, [sp, #12]
   d5f72:	9302      	str	r3, [sp, #8]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	9300      	str	r3, [sp, #0]
   d5f78:	461a      	mov	r2, r3
   d5f7a:	f7ff ff1d 	bl	d5db8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5f7e:	b007      	add	sp, #28
   d5f80:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f84 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5f84:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f88:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d5f8a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5f8e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5f92:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d5f96:	4604      	mov	r4, r0
   d5f98:	468b      	mov	fp, r1
   d5f9a:	4691      	mov	r9, r2
   d5f9c:	469a      	mov	sl, r3
    if (isConnected()) {
   d5f9e:	f7ff fee9 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d5fa2:	2800      	cmp	r0, #0
   d5fa4:	d04c      	beq.n	d6040 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d5fa6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d5faa:	69e0      	ldr	r0, [r4, #28]
   d5fac:	2100      	movs	r1, #0
   d5fae:	f004 ff6d 	bl	dae8c <memset>

        length = writeString(topic, buffer, length);
   d5fb2:	2305      	movs	r3, #5
   d5fb4:	69e2      	ldr	r2, [r4, #28]
   d5fb6:	4659      	mov	r1, fp
   d5fb8:	4620      	mov	r0, r4
   d5fba:	f7ff fec1 	bl	d5d40 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d5fbe:	1e6b      	subs	r3, r5, #1
   d5fc0:	2b01      	cmp	r3, #1
   d5fc2:	d812      	bhi.n	d5fea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d5fc4:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5fc6:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d5fc8:	3301      	adds	r3, #1
   d5fca:	b29b      	uxth	r3, r3
   d5fcc:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5fce:	121b      	asrs	r3, r3, #8
   d5fd0:	5413      	strb	r3, [r2, r0]
   d5fd2:	1c41      	adds	r1, r0, #1
   d5fd4:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d5fd6:	69e3      	ldr	r3, [r4, #28]
   d5fd8:	8c22      	ldrh	r2, [r4, #32]
   d5fda:	545a      	strb	r2, [r3, r1]
   d5fdc:	3002      	adds	r0, #2
   d5fde:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d5fe0:	b11e      	cbz	r6, d5fea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d5fe2:	8c23      	ldrh	r3, [r4, #32]
   d5fe4:	1c5a      	adds	r2, r3, #1
   d5fe6:	8422      	strh	r2, [r4, #32]
   d5fe8:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5fea:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d5fec:	b291      	uxth	r1, r2
   d5fee:	1883      	adds	r3, r0, r2
   d5ff0:	458a      	cmp	sl, r1
   d5ff2:	b29b      	uxth	r3, r3
   d5ff4:	d90a      	bls.n	d600c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d5ff6:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5ffa:	429e      	cmp	r6, r3
   d5ffc:	f102 0201 	add.w	r2, r2, #1
   d6000:	d904      	bls.n	d600c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d6002:	f819 6001 	ldrb.w	r6, [r9, r1]
   d6006:	69e1      	ldr	r1, [r4, #28]
   d6008:	54ce      	strb	r6, [r1, r3]
   d600a:	e7ef      	b.n	d5fec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d600c:	f1b8 0f00 	cmp.w	r8, #0
   d6010:	bf0c      	ite	eq
   d6012:	2130      	moveq	r1, #48	; 0x30
   d6014:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d6016:	b10f      	cbz	r7, d601c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d6018:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d601c:	2d02      	cmp	r5, #2
   d601e:	d102      	bne.n	d6026 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d6020:	f041 0104 	orr.w	r1, r1, #4
   d6024:	e003      	b.n	d602e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d6026:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d6028:	bf08      	it	eq
   d602a:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d602e:	3b05      	subs	r3, #5
   d6030:	69e2      	ldr	r2, [r4, #28]
   d6032:	b29b      	uxth	r3, r3
   d6034:	4620      	mov	r0, r4
    }
    return false;
}
   d6036:	b001      	add	sp, #4
   d6038:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d603c:	f7ff be39 	b.w	d5cb2 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6040:	b001      	add	sp, #4
   d6042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6046 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d6046:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d6048:	9c08      	ldr	r4, [sp, #32]
   d604a:	9403      	str	r4, [sp, #12]
   d604c:	2400      	movs	r4, #0
   d604e:	9402      	str	r4, [sp, #8]
   d6050:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d6054:	9401      	str	r4, [sp, #4]
   d6056:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d605a:	9400      	str	r4, [sp, #0]
   d605c:	f7ff ff92 	bl	d5f84 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d6060:	b004      	add	sp, #16
   d6062:	bd10      	pop	{r4, pc}

000d6064 <_ZN4MQTT7publishEPKcPKhj>:

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
   d6064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, false, QOS0, NULL);
   d6066:	2400      	movs	r4, #0
   d6068:	9402      	str	r4, [sp, #8]
   d606a:	9401      	str	r4, [sp, #4]
   d606c:	9400      	str	r4, [sp, #0]
   d606e:	f7ff ffea 	bl	d6046 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d6072:	b004      	add	sp, #16
   d6074:	bd10      	pop	{r4, pc}

000d6076 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d6076:	b538      	push	{r3, r4, r5, lr}
   d6078:	4604      	mov	r4, r0
   d607a:	460d      	mov	r5, r1
    if (isConnected()) {
   d607c:	f7ff fe7a 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d6080:	b190      	cbz	r0, d60a8 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d6082:	69e3      	ldr	r3, [r4, #28]
   d6084:	2262      	movs	r2, #98	; 0x62
   d6086:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d6088:	69e3      	ldr	r3, [r4, #28]
   d608a:	2202      	movs	r2, #2
   d608c:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d608e:	69e3      	ldr	r3, [r4, #28]
   d6090:	122a      	asrs	r2, r5, #8
   d6092:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d6094:	69e3      	ldr	r3, [r4, #28]
   d6096:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d6098:	2204      	movs	r2, #4
   d609a:	69e1      	ldr	r1, [r4, #28]
   d609c:	4620      	mov	r0, r4
   d609e:	f003 fce2 	bl	d9a66 <_ZN9TCPClient5writeEPKhj>
   d60a2:	3000      	adds	r0, #0
   d60a4:	bf18      	it	ne
   d60a6:	2001      	movne	r0, #1
    }
    return false;
}
   d60a8:	bd38      	pop	{r3, r4, r5, pc}

000d60aa <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d60aa:	b538      	push	{r3, r4, r5, lr}
   d60ac:	4604      	mov	r4, r0
   d60ae:	460d      	mov	r5, r1
    if (isConnected()) {
   d60b0:	f7ff fe60 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d60b4:	b190      	cbz	r0, d60dc <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d60b6:	69e3      	ldr	r3, [r4, #28]
   d60b8:	2272      	movs	r2, #114	; 0x72
   d60ba:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d60bc:	69e3      	ldr	r3, [r4, #28]
   d60be:	2202      	movs	r2, #2
   d60c0:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d60c2:	69e3      	ldr	r3, [r4, #28]
   d60c4:	122a      	asrs	r2, r5, #8
   d60c6:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d60c8:	69e3      	ldr	r3, [r4, #28]
   d60ca:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d60cc:	2204      	movs	r2, #4
   d60ce:	69e1      	ldr	r1, [r4, #28]
   d60d0:	4620      	mov	r0, r4
   d60d2:	f003 fcc8 	bl	d9a66 <_ZN9TCPClient5writeEPKhj>
   d60d6:	3000      	adds	r0, #0
   d60d8:	bf18      	it	ne
   d60da:	2001      	movne	r0, #1
    }
    return false;
}
   d60dc:	bd38      	pop	{r3, r4, r5, pc}

000d60de <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d60de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d60e2:	b083      	sub	sp, #12
   d60e4:	af00      	add	r7, sp, #0
   d60e6:	4604      	mov	r4, r0
    if (isConnected()) {
   d60e8:	f7ff fe44 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d60ec:	4681      	mov	r9, r0
   d60ee:	2800      	cmp	r0, #0
   d60f0:	f000 80f6 	beq.w	d62e0 <_ZN4MQTT4loopEv+0x202>
   d60f4:	f002 f986 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d60f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d60fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d60fe:	4353      	muls	r3, r2
   d6100:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d6102:	1a82      	subs	r2, r0, r2
   d6104:	429a      	cmp	r2, r3
   d6106:	4605      	mov	r5, r0
   d6108:	d803      	bhi.n	d6112 <_ZN4MQTT4loopEv+0x34>
   d610a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d610c:	1a82      	subs	r2, r0, r2
   d610e:	4293      	cmp	r3, r2
   d6110:	d217      	bcs.n	d6142 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d6112:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d6116:	b12b      	cbz	r3, d6124 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d6118:	4620      	mov	r0, r4
   d611a:	f003 fe8d 	bl	d9e38 <_ZN9TCPClient4stopEv>
                return false;
   d611e:	f04f 0900 	mov.w	r9, #0
   d6122:	e0dd      	b.n	d62e0 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d6124:	69e2      	ldr	r2, [r4, #28]
   d6126:	21c0      	movs	r1, #192	; 0xc0
   d6128:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d612a:	69e2      	ldr	r2, [r4, #28]
   d612c:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d612e:	69e1      	ldr	r1, [r4, #28]
   d6130:	2202      	movs	r2, #2
   d6132:	4620      	mov	r0, r4
   d6134:	f003 fc97 	bl	d9a66 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d6138:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d613a:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d613c:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d613e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d6142:	4620      	mov	r0, r4
   d6144:	f003 fe90 	bl	d9e68 <_ZN9TCPClient9availableEv>
   d6148:	2800      	cmp	r0, #0
   d614a:	f000 80c9 	beq.w	d62e0 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d614e:	1df9      	adds	r1, r7, #7
   d6150:	4620      	mov	r0, r4
   d6152:	f7ff fd55 	bl	d5c00 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d6156:	4602      	mov	r2, r0
   d6158:	2800      	cmp	r0, #0
   d615a:	f000 80c1 	beq.w	d62e0 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d615e:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d6160:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d6162:	7818      	ldrb	r0, [r3, #0]
   d6164:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d6168:	2930      	cmp	r1, #48	; 0x30
   d616a:	d17d      	bne.n	d6268 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d616c:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d6170:	f1bb 0f00 	cmp.w	fp, #0
   d6174:	f000 80b4 	beq.w	d62e0 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d6178:	f897 c007 	ldrb.w	ip, [r7, #7]
   d617c:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d6180:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d6182:	7881      	ldrb	r1, [r0, #2]
   d6184:	f890 e001 	ldrb.w	lr, [r0, #1]
   d6188:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d618c:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d6190:	f10e 0108 	add.w	r1, lr, #8
   d6194:	f021 0107 	bic.w	r1, r1, #7
   d6198:	ebad 0d01 	sub.w	sp, sp, r1
   d619c:	4668      	mov	r0, sp
   d619e:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d61a0:	b28e      	uxth	r6, r1
   d61a2:	45b6      	cmp	lr, r6
   d61a4:	d906      	bls.n	d61b4 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d61a6:	eb0c 0601 	add.w	r6, ip, r1
   d61aa:	441e      	add	r6, r3
   d61ac:	78f6      	ldrb	r6, [r6, #3]
   d61ae:	5446      	strb	r6, [r0, r1]
   d61b0:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d61b2:	e7f5      	b.n	d61a0 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d61b4:	2100      	movs	r1, #0
   d61b6:	f800 100e 	strb.w	r1, [r0, lr]
   d61ba:	781e      	ldrb	r6, [r3, #0]
   d61bc:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d61c0:	2e02      	cmp	r6, #2
   d61c2:	f10c 0103 	add.w	r1, ip, #3
   d61c6:	ebcc 0202 	rsb	r2, ip, r2
   d61ca:	d11e      	bne.n	d620a <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d61cc:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d61ce:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d61d2:	f813 8001 	ldrb.w	r8, [r3, r1]
   d61d6:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d61d8:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d61da:	7849      	ldrb	r1, [r1, #1]
   d61dc:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d61e0:	f10c 0105 	add.w	r1, ip, #5
   d61e4:	4471      	add	r1, lr
   d61e6:	4419      	add	r1, r3
   d61e8:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d61ea:	69e3      	ldr	r3, [r4, #28]
   d61ec:	2240      	movs	r2, #64	; 0x40
   d61ee:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d61f0:	69e3      	ldr	r3, [r4, #28]
   d61f2:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d61f4:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d61f6:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d61fa:	ea4f 2228 	mov.w	r2, r8, asr #8
   d61fe:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d6200:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d6202:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d6204:	f883 8003 	strb.w	r8, [r3, #3]
   d6208:	e020      	b.n	d624c <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d620a:	2e04      	cmp	r6, #4
   d620c:	d124      	bne.n	d6258 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d620e:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6210:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6214:	f813 8001 	ldrb.w	r8, [r3, r1]
   d6218:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d621a:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d621c:	7849      	ldrb	r1, [r1, #1]
   d621e:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6222:	f10c 0105 	add.w	r1, ip, #5
   d6226:	4471      	add	r1, lr
   d6228:	4419      	add	r1, r3
   d622a:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d622c:	69e3      	ldr	r3, [r4, #28]
   d622e:	2250      	movs	r2, #80	; 0x50
   d6230:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d6232:	69e3      	ldr	r3, [r4, #28]
   d6234:	2202      	movs	r2, #2
   d6236:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d6238:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d623a:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d623e:	ea4f 2228 	mov.w	r2, r8, asr #8
   d6242:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d6244:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d6246:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d6248:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d624c:	69e1      	ldr	r1, [r4, #28]
   d624e:	4620      	mov	r0, r4
   d6250:	f003 fc09 	bl	d9a66 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d6254:	6265      	str	r5, [r4, #36]	; 0x24
   d6256:	e005      	b.n	d6264 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d6258:	3a03      	subs	r2, #3
   d625a:	4471      	add	r1, lr
   d625c:	ebce 0202 	rsb	r2, lr, r2
   d6260:	4419      	add	r1, r3
   d6262:	47d8      	blx	fp
   d6264:	46d5      	mov	sp, sl
   d6266:	e03b      	b.n	d62e0 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d6268:	2950      	cmp	r1, #80	; 0x50
   d626a:	d108      	bne.n	d627e <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d626c:	7899      	ldrb	r1, [r3, #2]
   d626e:	78db      	ldrb	r3, [r3, #3]
   d6270:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d6274:	b289      	uxth	r1, r1
   d6276:	4620      	mov	r0, r4
   d6278:	f7ff fefd 	bl	d6076 <_ZN4MQTT14publishReleaseEt>
   d627c:	e030      	b.n	d62e0 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d627e:	2940      	cmp	r1, #64	; 0x40
   d6280:	d00c      	beq.n	d629c <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d6282:	2960      	cmp	r1, #96	; 0x60
   d6284:	d108      	bne.n	d6298 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d6286:	7899      	ldrb	r1, [r3, #2]
   d6288:	78db      	ldrb	r3, [r3, #3]
   d628a:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d628e:	b289      	uxth	r1, r1
   d6290:	4620      	mov	r0, r4
   d6292:	f7ff ff0a 	bl	d60aa <_ZN4MQTT15publishCompleteEt>
   d6296:	e023      	b.n	d62e0 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d6298:	2970      	cmp	r1, #112	; 0x70
   d629a:	d10d      	bne.n	d62b8 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d629c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d629e:	b1f9      	cbz	r1, d62e0 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d62a0:	2a04      	cmp	r2, #4
   d62a2:	d11d      	bne.n	d62e0 <_ZN4MQTT4loopEv+0x202>
   d62a4:	f010 0f06 	tst.w	r0, #6
   d62a8:	d11a      	bne.n	d62e0 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d62aa:	7898      	ldrb	r0, [r3, #2]
   d62ac:	78db      	ldrb	r3, [r3, #3]
   d62ae:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d62b2:	b280      	uxth	r0, r0
   d62b4:	4788      	blx	r1
   d62b6:	e013      	b.n	d62e0 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d62b8:	2990      	cmp	r1, #144	; 0x90
   d62ba:	d011      	beq.n	d62e0 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d62bc:	29c0      	cmp	r1, #192	; 0xc0
   d62be:	d10a      	bne.n	d62d6 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d62c0:	22d0      	movs	r2, #208	; 0xd0
   d62c2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d62c4:	69e3      	ldr	r3, [r4, #28]
   d62c6:	2200      	movs	r2, #0
   d62c8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d62ca:	69e1      	ldr	r1, [r4, #28]
   d62cc:	2202      	movs	r2, #2
   d62ce:	4620      	mov	r0, r4
   d62d0:	f003 fbc9 	bl	d9a66 <_ZN9TCPClient5writeEPKhj>
   d62d4:	e004      	b.n	d62e0 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d62d6:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d62d8:	bf04      	itt	eq
   d62da:	2300      	moveq	r3, #0
   d62dc:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d62e0:	4648      	mov	r0, r9
   d62e2:	370c      	adds	r7, #12
   d62e4:	46bd      	mov	sp, r7
   d62e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d62ea <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d62ea:	b570      	push	{r4, r5, r6, lr}
   d62ec:	4604      	mov	r4, r0
   d62ee:	460e      	mov	r6, r1
   d62f0:	4615      	mov	r5, r2

    if (isConnected()) {
   d62f2:	f7ff fd3f 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d62f6:	b1e8      	cbz	r0, d6334 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d62f8:	8c23      	ldrh	r3, [r4, #32]
   d62fa:	3301      	adds	r3, #1
   d62fc:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d62fe:	b903      	cbnz	r3, d6302 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d6300:	2301      	movs	r3, #1
   d6302:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d6304:	8c23      	ldrh	r3, [r4, #32]
   d6306:	69e2      	ldr	r2, [r4, #28]
   d6308:	121b      	asrs	r3, r3, #8
   d630a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d630c:	69e3      	ldr	r3, [r4, #28]
   d630e:	8c22      	ldrh	r2, [r4, #32]
   d6310:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d6312:	69e2      	ldr	r2, [r4, #28]
   d6314:	4631      	mov	r1, r6
   d6316:	2307      	movs	r3, #7
   d6318:	4620      	mov	r0, r4
   d631a:	f7ff fd11 	bl	d5d40 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d631e:	69e3      	ldr	r3, [r4, #28]
   d6320:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6322:	1f03      	subs	r3, r0, #4
   d6324:	69e2      	ldr	r2, [r4, #28]
   d6326:	4620      	mov	r0, r4
   d6328:	b29b      	uxth	r3, r3
   d632a:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d632c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6330:	f7ff bcbf 	b.w	d5cb2 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6334:	bd70      	pop	{r4, r5, r6, pc}

000d6336 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d6336:	2200      	movs	r2, #0
   d6338:	f7ff bfd7 	b.w	d62ea <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d633c <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d633c:	b510      	push	{r4, lr}
   d633e:	4604      	mov	r4, r0
    if (isConnected()) {
   d6340:	f7ff fd18 	bl	d5d74 <_ZN4MQTT11isConnectedEv>
   d6344:	b110      	cbz	r0, d634c <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d6346:	4620      	mov	r0, r4
   d6348:	f7ff fce6 	bl	d5d18 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d634c:	69e0      	ldr	r0, [r4, #28]
   d634e:	b108      	cbz	r0, d6354 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d6350:	f7fd fea7 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d6354:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6358:	f002 fc9e 	bl	d8c98 <_ZN6StringD1Ev>
   d635c:	4620      	mov	r0, r4
   d635e:	f7ff fbdb 	bl	d5b18 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d6362:	4620      	mov	r0, r4
   d6364:	bd10      	pop	{r4, pc}

000d6366 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d6366:	f001 bf85 	b.w	d8274 <HAL_Pin_Map>

000d636a <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d636a:	f001 bf83 	b.w	d8274 <HAL_Pin_Map>

000d636e <_GLOBAL__sub_I__ZN7istream3getEv>:
   d636e:	f001 bf81 	b.w	d8274 <HAL_Pin_Map>

000d6372 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d6372:	b510      	push	{r4, lr}
   d6374:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6376:	3024      	adds	r0, #36	; 0x24
   d6378:	f000 ff9c 	bl	d72b4 <_ZN8FatCache4syncEv>
   d637c:	b128      	cbz	r0, d638a <_ZN9FatVolume9cacheSyncEv+0x18>
   d637e:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d6382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6386:	f000 bf95 	b.w	d72b4 <_ZN8FatCache4syncEv>
  }
   d638a:	bd10      	pop	{r4, pc}

000d638c <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d638c:	1e41      	subs	r1, r0, #1
   d638e:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d6392:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6394:	0843      	lsrs	r3, r0, #1
   d6396:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d639a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d639e:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d63a2:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d63a4:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d63a6:	d1f5      	bne.n	d6394 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d63a8:	4770      	bx	lr

000d63aa <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d63aa:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d63ac:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d63ae:	4604      	mov	r4, r0
   d63b0:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d63b2:	b923      	cbnz	r3, d63be <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d63b4:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d63b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d63ba:	f000 bc08 	b.w	d6bce <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d63be:	2224      	movs	r2, #36	; 0x24
   d63c0:	2100      	movs	r1, #0
   d63c2:	f004 fd63 	bl	dae8c <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d63c6:	2310      	movs	r3, #16
  m_flags = F_READ;
   d63c8:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d63ca:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d63cc:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d63ce:	68ab      	ldr	r3, [r5, #8]
   d63d0:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d63d2:	68eb      	ldr	r3, [r5, #12]
   d63d4:	6223      	str	r3, [r4, #32]
  return true;
}
   d63d6:	bd38      	pop	{r3, r4, r5, pc}

000d63d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d63d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d63dc:	7803      	ldrb	r3, [r0, #0]
   d63de:	2b20      	cmp	r3, #32
   d63e0:	f100 0401 	add.w	r4, r0, #1
   d63e4:	d101      	bne.n	d63ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d63e6:	4620      	mov	r0, r4
   d63e8:	e7f8      	b.n	d63dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d63ea:	4f70      	ldr	r7, [pc, #448]	; (d65ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d63ec:	6088      	str	r0, [r1, #8]
   d63ee:	4605      	mov	r5, r0
   d63f0:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d63f2:	462e      	mov	r6, r5
   d63f4:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d63f8:	b30b      	cbz	r3, d643e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d63fa:	2b2f      	cmp	r3, #47	; 0x2f
   d63fc:	d101      	bne.n	d6402 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d63fe:	1903      	adds	r3, r0, r4
   d6400:	e017      	b.n	d6432 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6402:	2b5c      	cmp	r3, #92	; 0x5c
   d6404:	d102      	bne.n	d640c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6406:	2000      	movs	r0, #0
   d6408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d640c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6410:	b2e4      	uxtb	r4, r4
   d6412:	2c1d      	cmp	r4, #29
   d6414:	d803      	bhi.n	d641e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d6416:	fa27 f404 	lsr.w	r4, r7, r4
   d641a:	07e4      	lsls	r4, r4, #31
   d641c:	d4f3      	bmi.n	d6406 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d641e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6422:	2c3c      	cmp	r4, #60	; 0x3c
   d6424:	d0ef      	beq.n	d6406 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d6426:	3b20      	subs	r3, #32
   d6428:	2b5e      	cmp	r3, #94	; 0x5e
   d642a:	d9e1      	bls.n	d63f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d642c:	e7eb      	b.n	d6406 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d642e:	2d2f      	cmp	r5, #47	; 0x2f
   d6430:	d105      	bne.n	d643e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6432:	461e      	mov	r6, r3
   d6434:	f813 5b01 	ldrb.w	r5, [r3], #1
   d6438:	2d20      	cmp	r5, #32
   d643a:	d1f8      	bne.n	d642e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d643c:	e7f9      	b.n	d6432 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d643e:	6016      	str	r6, [r2, #0]
   d6440:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d6442:	4298      	cmp	r0, r3
   d6444:	ebc0 0803 	rsb	r8, r0, r3
   d6448:	d009      	beq.n	d645e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d644a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d644e:	2a2e      	cmp	r2, #46	; 0x2e
   d6450:	d0f7      	beq.n	d6442 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d6452:	2a20      	cmp	r2, #32
   d6454:	d0f5      	beq.n	d6442 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d6456:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d645a:	dcd4      	bgt.n	d6406 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d645c:	e001      	b.n	d6462 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d645e:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d6462:	f8c1 8004 	str.w	r8, [r1, #4]
   d6466:	f101 030c 	add.w	r3, r1, #12
   d646a:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d646e:	2420      	movs	r4, #32
   d6470:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d6474:	4293      	cmp	r3, r2
   d6476:	d1fb      	bne.n	d6470 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6478:	4603      	mov	r3, r0
   d647a:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d647c:	f813 4b01 	ldrb.w	r4, [r3], #1
   d6480:	2c2e      	cmp	r4, #46	; 0x2e
   d6482:	d0fa      	beq.n	d647a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d6484:	2c20      	cmp	r4, #32
   d6486:	d0f8      	beq.n	d647a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d6488:	fab2 f482 	clz	r4, r2
   d648c:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d648e:	f108 36ff 	add.w	r6, r8, #4294967295
   d6492:	1c73      	adds	r3, r6, #1
   d6494:	d107      	bne.n	d64a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d6496:	2700      	movs	r7, #0
   d6498:	f04f 0e07 	mov.w	lr, #7
   d649c:	463d      	mov	r5, r7
   d649e:	46ba      	mov	sl, r7
   d64a0:	f04f 0908 	mov.w	r9, #8
   d64a4:	e009      	b.n	d64ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d64a6:	5d83      	ldrb	r3, [r0, r6]
   d64a8:	2b2e      	cmp	r3, #46	; 0x2e
   d64aa:	d0f4      	beq.n	d6496 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d64ac:	3e01      	subs	r6, #1
   d64ae:	e7f0      	b.n	d6492 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d64b0:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d64b2:	2b20      	cmp	r3, #32
   d64b4:	d104      	bne.n	d64c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d64b6:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d64b8:	3201      	adds	r2, #1
   d64ba:	4542      	cmp	r2, r8
   d64bc:	dbf8      	blt.n	d64b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d64be:	e04b      	b.n	d6558 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d64c0:	2b2e      	cmp	r3, #46	; 0x2e
   d64c2:	d102      	bne.n	d64ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d64c4:	42b2      	cmp	r2, r6
   d64c6:	d1f6      	bne.n	d64b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d64c8:	e003      	b.n	d64d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d64ca:	2b22      	cmp	r3, #34	; 0x22
   d64cc:	d017      	beq.n	d64fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d64ce:	2b7c      	cmp	r3, #124	; 0x7c
   d64d0:	d015      	beq.n	d64fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d64d2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d64d6:	f1bc 0f05 	cmp.w	ip, #5
   d64da:	d801      	bhi.n	d64e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d64dc:	2b2d      	cmp	r3, #45	; 0x2d
   d64de:	d10e      	bne.n	d64fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d64e0:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d64e4:	f1bc 0f05 	cmp.w	ip, #5
   d64e8:	d909      	bls.n	d64fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d64ea:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d64ee:	f1bc 0f02 	cmp.w	ip, #2
   d64f2:	d904      	bls.n	d64fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d64f4:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d64f8:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d64fc:	d902      	bls.n	d6504 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d64fe:	42b2      	cmp	r2, r6
   d6500:	d10e      	bne.n	d6520 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6502:	e049      	b.n	d6598 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6504:	42b2      	cmp	r2, r6
   d6506:	d047      	beq.n	d6598 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6508:	4575      	cmp	r5, lr
   d650a:	d821      	bhi.n	d6550 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d650c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6510:	f1bc 0f19 	cmp.w	ip, #25
   d6514:	d808      	bhi.n	d6528 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d6516:	3b20      	subs	r3, #32
   d6518:	b2db      	uxtb	r3, r3
        lc |= bit;
   d651a:	ea49 0707 	orr.w	r7, r9, r7
   d651e:	e00a      	b.n	d6536 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6520:	4575      	cmp	r5, lr
   d6522:	d815      	bhi.n	d6550 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6524:	2400      	movs	r4, #0
      c = '_';
   d6526:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d6528:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d652c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6530:	bf98      	it	ls
   d6532:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d6536:	f105 0c01 	add.w	ip, r5, #1
   d653a:	fa5f fc8c 	uxtb.w	ip, ip
   d653e:	440d      	add	r5, r1
      if (i < 7) {
   d6540:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d6544:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d6546:	d801      	bhi.n	d654c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d6548:	f881 c00c 	strb.w	ip, [r1, #12]
   d654c:	4665      	mov	r5, ip
   d654e:	e7b3      	b.n	d64b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6550:	f1be 0f0a 	cmp.w	lr, #10
   d6554:	d117      	bne.n	d6586 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d6556:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d6558:	7b4b      	ldrb	r3, [r1, #13]
   d655a:	2b20      	cmp	r3, #32
   d655c:	f43f af53 	beq.w	d6406 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d6560:	b13c      	cbz	r4, d6572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6562:	ea1a 0f07 	tst.w	sl, r7
   d6566:	bf18      	it	ne
   d6568:	2702      	movne	r7, #2
   d656a:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d656c:	2001      	movs	r0, #1
   d656e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d6572:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6574:	2001      	movs	r0, #1
   d6576:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6578:	4419      	add	r1, r3
   d657a:	237e      	movs	r3, #126	; 0x7e
   d657c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d657e:	2331      	movs	r3, #49	; 0x31
   d6580:	738b      	strb	r3, [r1, #14]
   d6582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d6586:	42b2      	cmp	r2, r6
   d6588:	dce5      	bgt.n	d6556 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d658a:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d658c:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6590:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6592:	f04f 0910 	mov.w	r9, #16
   d6596:	e78e      	b.n	d64b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6598:	f1be 0f0a 	cmp.w	lr, #10
   d659c:	d0db      	beq.n	d6556 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d659e:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d65a0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d65a4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d65a6:	f04f 0910 	mov.w	r9, #16
   d65aa:	e785      	b.n	d64b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d65ac:	31000101 	.word	0x31000101

000d65b0 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d65b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65b2:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d65b4:	2300      	movs	r3, #0
   d65b6:	f88d 3004 	strb.w	r3, [sp, #4]
   d65ba:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d65be:	7803      	ldrb	r3, [r0, #0]
   d65c0:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d65c2:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d65c4:	d508      	bpl.n	d65d8 <_ZN7FatFile6removeEv+0x28>
   d65c6:	7883      	ldrb	r3, [r0, #2]
   d65c8:	079a      	lsls	r2, r3, #30
   d65ca:	d505      	bpl.n	d65d8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d65cc:	6a01      	ldr	r1, [r0, #32]
   d65ce:	b129      	cbz	r1, d65dc <_ZN7FatFile6removeEv+0x2c>
   d65d0:	68a0      	ldr	r0, [r4, #8]
   d65d2:	f000 ff60 	bl	d7496 <_ZN9FatVolume9freeChainEm>
   d65d6:	b908      	cbnz	r0, d65dc <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d65d8:	2000      	movs	r0, #0
   d65da:	e049      	b.n	d6670 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d65dc:	2101      	movs	r1, #1
   d65de:	4620      	mov	r0, r4
   d65e0:	f000 fabc 	bl	d6b5c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d65e4:	4605      	mov	r5, r0
   d65e6:	2800      	cmp	r0, #0
   d65e8:	d0f6      	beq.n	d65d8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d65ea:	f7ff fecf 	bl	d638c <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d65ee:	26e5      	movs	r6, #229	; 0xe5
   d65f0:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d65f2:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d65f4:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d65f6:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d65f8:	68a0      	ldr	r0, [r4, #8]
   d65fa:	f7ff feba 	bl	d6372 <_ZN9FatVolume9cacheSyncEv>
   d65fe:	2800      	cmp	r0, #0
   d6600:	d0ea      	beq.n	d65d8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6602:	78e3      	ldrb	r3, [r4, #3]
   d6604:	2b00      	cmp	r3, #0
   d6606:	d033      	beq.n	d6670 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d6608:	4621      	mov	r1, r4
   d660a:	a801      	add	r0, sp, #4
   d660c:	f7ff fecd 	bl	d63aa <_ZN7FatFile11openClusterEPS_>
   d6610:	2800      	cmp	r0, #0
   d6612:	d0e1      	beq.n	d65d8 <_ZN7FatFile6removeEv+0x28>
   d6614:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6616:	78e3      	ldrb	r3, [r4, #3]
   d6618:	42ab      	cmp	r3, r5
   d661a:	d3dd      	bcc.n	d65d8 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d661c:	88a1      	ldrh	r1, [r4, #4]
   d661e:	1b49      	subs	r1, r1, r5
   d6620:	0149      	lsls	r1, r1, #5
   d6622:	a801      	add	r0, sp, #4
   d6624:	f000 fbce 	bl	d6dc4 <_ZN7FatFile7seekSetEm>
   d6628:	2800      	cmp	r0, #0
   d662a:	d0d5      	beq.n	d65d8 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d662c:	2100      	movs	r1, #0
   d662e:	a801      	add	r0, sp, #4
   d6630:	f000 fbab 	bl	d6d8a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6634:	2800      	cmp	r0, #0
   d6636:	d0cf      	beq.n	d65d8 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6638:	7ac3      	ldrb	r3, [r0, #11]
   d663a:	2b0f      	cmp	r3, #15
   d663c:	d1cc      	bne.n	d65d8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d663e:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6640:	f002 031f 	and.w	r3, r2, #31
   d6644:	429d      	cmp	r5, r3
   d6646:	d1c7      	bne.n	d65d8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6648:	7b43      	ldrb	r3, [r0, #13]
   d664a:	42bb      	cmp	r3, r7
   d664c:	d1c4      	bne.n	d65d8 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d664e:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d6650:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d6652:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d6656:	f043 0301 	orr.w	r3, r3, #1
   d665a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d665e:	0653      	lsls	r3, r2, #25
   d6660:	d503      	bpl.n	d666a <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d6662:	68a0      	ldr	r0, [r4, #8]
   d6664:	f7ff fe85 	bl	d6372 <_ZN9FatVolume9cacheSyncEv>
   d6668:	e002      	b.n	d6670 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d666a:	3501      	adds	r5, #1
   d666c:	b2ed      	uxtb	r5, r5
   d666e:	e7d2      	b.n	d6616 <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d6670:	b00b      	add	sp, #44	; 0x2c
   d6672:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6674 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6678:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d667c:	4606      	mov	r6, r0
   d667e:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6680:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6682:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6684:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6688:	6869      	ldr	r1, [r5, #4]
   d668a:	68aa      	ldr	r2, [r5, #8]
   d668c:	1863      	adds	r3, r4, r1
   d668e:	b29b      	uxth	r3, r3
   d6690:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d6692:	4291      	cmp	r1, r2
   d6694:	d006      	beq.n	d66a4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d6696:	f812 0b01 	ldrb.w	r0, [r2], #1
   d669a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d669e:	4043      	eors	r3, r0
   d66a0:	b29b      	uxth	r3, r3
   d66a2:	e7f6      	b.n	d6692 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d66a4:	f1b9 0f03 	cmp.w	r9, #3
   d66a8:	bf28      	it	cs
   d66aa:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66ae:	f109 0204 	add.w	r2, r9, #4
   d66b2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d66b4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d66b8:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66ba:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d66bc:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66be:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d66c0:	bf94      	ite	ls
   d66c2:	3130      	addls	r1, #48	; 0x30
   d66c4:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66c6:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d66c8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d66ca:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66ce:	d3f1      	bcc.n	d66b4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d66d0:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d66d4:	2100      	movs	r1, #0
   d66d6:	735f      	strb	r7, [r3, #13]
   d66d8:	4630      	mov	r0, r6
   d66da:	f000 fb73 	bl	d6dc4 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d66de:	2101      	movs	r1, #1
   d66e0:	4630      	mov	r0, r6
   d66e2:	f000 fb52 	bl	d6d8a <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d66e6:	4601      	mov	r1, r0
   d66e8:	b928      	cbnz	r0, d66f6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d66ea:	7870      	ldrb	r0, [r6, #1]
   d66ec:	fab0 f080 	clz	r0, r0
   d66f0:	0940      	lsrs	r0, r0, #5
   d66f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d66f6:	7803      	ldrb	r3, [r0, #0]
   d66f8:	b14b      	cbz	r3, d670e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d66fa:	7ac3      	ldrb	r3, [r0, #11]
   d66fc:	071b      	lsls	r3, r3, #28
   d66fe:	d4ee      	bmi.n	d66de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6700:	220b      	movs	r2, #11
   d6702:	4640      	mov	r0, r8
   d6704:	f004 fba8 	bl	dae58 <memcmp>
   d6708:	2800      	cmp	r0, #0
   d670a:	d1e8      	bne.n	d66de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d670c:	e002      	b.n	d6714 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d670e:	2001      	movs	r0, #1
   d6710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6714:	3401      	adds	r4, #1
   d6716:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6718:	2c64      	cmp	r4, #100	; 0x64
   d671a:	d1b5      	bne.n	d6688 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d671c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6720 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6724:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6726:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6728:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d672a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d672e:	9005      	str	r0, [sp, #20]
   d6730:	460e      	mov	r6, r1
   d6732:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6734:	d101      	bne.n	d673a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d6736:	2000      	movs	r0, #0
   d6738:	e1a0      	b.n	d6a7c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d673a:	9b05      	ldr	r3, [sp, #20]
   d673c:	781b      	ldrb	r3, [r3, #0]
   d673e:	2b00      	cmp	r3, #0
   d6740:	d1f9      	bne.n	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d6742:	6853      	ldr	r3, [r2, #4]
   d6744:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6746:	7813      	ldrb	r3, [r2, #0]
   d6748:	079b      	lsls	r3, r3, #30
   d674a:	f000 818d 	beq.w	d6a68 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d674e:	9b02      	ldr	r3, [sp, #8]
   d6750:	270d      	movs	r7, #13
   d6752:	330c      	adds	r3, #12
   d6754:	fbb3 f7f7 	udiv	r7, r3, r7
   d6758:	3701      	adds	r7, #1
   d675a:	b2ff      	uxtb	r7, r7
   d675c:	2100      	movs	r1, #0
   d675e:	4630      	mov	r0, r6
   d6760:	f000 fb30 	bl	d6dc4 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d6764:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6768:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d676c:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d6770:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d6772:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d6774:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d6776:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d677a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d677c:	6972      	ldr	r2, [r6, #20]
   d677e:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6780:	2101      	movs	r1, #1
   d6782:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6784:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6788:	f000 faff 	bl	d6d8a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d678c:	9b07      	ldr	r3, [sp, #28]
   d678e:	b920      	cbnz	r0, d679a <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d6790:	7873      	ldrb	r3, [r6, #1]
   d6792:	2b00      	cmp	r3, #0
   d6794:	f000 8090 	beq.w	d68b8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d6798:	e7cd      	b.n	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d679a:	7802      	ldrb	r2, [r0, #0]
   d679c:	2ae5      	cmp	r2, #229	; 0xe5
   d679e:	d000      	beq.n	d67a2 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d67a0:	b942      	cbnz	r2, d67b4 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d67a2:	2c00      	cmp	r4, #0
   d67a4:	bf08      	it	eq
   d67a6:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d67a8:	42bc      	cmp	r4, r7
        freeFound++;
   d67aa:	bf3c      	itt	cc
   d67ac:	3401      	addcc	r4, #1
   d67ae:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d67b0:	b922      	cbnz	r2, d67bc <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d67b2:	e081      	b.n	d68b8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d67b4:	42bc      	cmp	r4, r7
   d67b6:	bf38      	it	cc
   d67b8:	2400      	movcc	r4, #0
   d67ba:	e003      	b.n	d67c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d67bc:	2ae5      	cmp	r2, #229	; 0xe5
   d67be:	d101      	bne.n	d67c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d67c0:	2500      	movs	r5, #0
   d67c2:	e7db      	b.n	d677c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d67c4:	2a2e      	cmp	r2, #46	; 0x2e
   d67c6:	d0fb      	beq.n	d67c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d67c8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d67ca:	290f      	cmp	r1, #15
   d67cc:	d152      	bne.n	d6874 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d67ce:	b93d      	cbnz	r5, d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d67d0:	0651      	lsls	r1, r2, #25
   d67d2:	d5d3      	bpl.n	d677c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d67d4:	7b43      	ldrb	r3, [r0, #13]
   d67d6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d67d8:	f002 051f 	and.w	r5, r2, #31
   d67dc:	462b      	mov	r3, r5
   d67de:	e007      	b.n	d67f0 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d67e0:	3b01      	subs	r3, #1
   d67e2:	b2db      	uxtb	r3, r3
   d67e4:	429a      	cmp	r2, r3
   d67e6:	d1eb      	bne.n	d67c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d67e8:	7b42      	ldrb	r2, [r0, #13]
   d67ea:	9903      	ldr	r1, [sp, #12]
   d67ec:	4291      	cmp	r1, r2
   d67ee:	d1e7      	bne.n	d67c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d67f0:	1e5a      	subs	r2, r3, #1
   d67f2:	f04f 0c0d 	mov.w	ip, #13
   d67f6:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d67fa:	9a02      	ldr	r2, [sp, #8]
   d67fc:	4562      	cmp	r2, ip
   d67fe:	d9df      	bls.n	d67c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6800:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6804:	f1be 0f04 	cmp.w	lr, #4
   d6808:	fa5f f28e 	uxtb.w	r2, lr
   d680c:	d804      	bhi.n	d6818 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d680e:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6812:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6816:	e00c      	b.n	d6832 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6818:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d681a:	bf95      	itete	ls
   d681c:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6820:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6824:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6828:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d682c:	bf94      	ite	ls
   d682e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6830:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6832:	9902      	ldr	r1, [sp, #8]
   d6834:	4561      	cmp	r1, ip
   d6836:	d103      	bne.n	d6840 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6838:	2a00      	cmp	r2, #0
   d683a:	bf18      	it	ne
   d683c:	2500      	movne	r5, #0
   d683e:	e79d      	b.n	d677c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6840:	2aff      	cmp	r2, #255	; 0xff
   d6842:	d8bd      	bhi.n	d67c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6844:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6846:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d684a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d684c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d6850:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6854:	bf98      	it	ls
   d6856:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6858:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d685c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d6860:	bf98      	it	ls
   d6862:	b2d2      	uxtbls	r2, r2
   d6864:	f1bc 0f19 	cmp.w	ip, #25
   d6868:	bf9c      	itt	ls
   d686a:	3120      	addls	r1, #32
   d686c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d686e:	4291      	cmp	r1, r2
   d6870:	d1a6      	bne.n	d67c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6872:	e0fb      	b.n	d6a6c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6874:	0709      	lsls	r1, r1, #28
   d6876:	d4a3      	bmi.n	d67c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d6878:	b14d      	cbz	r5, d688e <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d687a:	2b01      	cmp	r3, #1
   d687c:	f47f af5b 	bne.w	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6880:	f7ff fd84 	bl	d638c <_ZN7FatFile11lfnChecksumEPh>
   d6884:	9b03      	ldr	r3, [sp, #12]
   d6886:	4283      	cmp	r3, r0
   d6888:	f47f af55 	bne.w	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d688c:	e00f      	b.n	d68ae <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d688e:	220b      	movs	r2, #11
   d6890:	9906      	ldr	r1, [sp, #24]
   d6892:	9307      	str	r3, [sp, #28]
   d6894:	f004 fae0 	bl	dae58 <memcmp>
   d6898:	9b07      	ldr	r3, [sp, #28]
   d689a:	2800      	cmp	r0, #0
   d689c:	f47f af6e 	bne.w	d677c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d68a0:	f899 2000 	ldrb.w	r2, [r9]
   d68a4:	07d2      	lsls	r2, r2, #31
   d68a6:	d502      	bpl.n	d68ae <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d68a8:	2201      	movs	r2, #1
   d68aa:	9204      	str	r2, [sp, #16]
   d68ac:	e766      	b.n	d677c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d68ae:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d68b2:	f000 80d1 	beq.w	d6a58 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d68b6:	e73e      	b.n	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d68b8:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d68bc:	f43f af3b 	beq.w	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d68c0:	f00b 0303 	and.w	r3, fp, #3
   d68c4:	3b01      	subs	r3, #1
   d68c6:	2b01      	cmp	r3, #1
   d68c8:	f63f af35 	bhi.w	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d68cc:	2c00      	cmp	r4, #0
   d68ce:	bf08      	it	eq
   d68d0:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d68d2:	42bc      	cmp	r4, r7
   d68d4:	d302      	bcc.n	d68dc <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d68d6:	9b04      	ldr	r3, [sp, #16]
   d68d8:	b9cb      	cbnz	r3, d690e <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d68da:	e01f      	b.n	d691c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d68dc:	2100      	movs	r1, #0
   d68de:	4630      	mov	r0, r6
   d68e0:	f000 fa53 	bl	d6d8a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d68e4:	b910      	cbnz	r0, d68ec <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d68e6:	7873      	ldrb	r3, [r6, #1]
   d68e8:	b15b      	cbz	r3, d6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d68ea:	e724      	b.n	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d68ec:	3401      	adds	r4, #1
   d68ee:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d68f0:	e7ef      	b.n	d68d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d68f2:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d68f4:	791b      	ldrb	r3, [r3, #4]
   d68f6:	2b01      	cmp	r3, #1
   d68f8:	d8ed      	bhi.n	d68d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d68fa:	3410      	adds	r4, #16
   d68fc:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d68fe:	42a7      	cmp	r7, r4
   d6900:	d9e9      	bls.n	d68d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6902:	4630      	mov	r0, r6
   d6904:	f000 f8ea 	bl	d6adc <_ZN7FatFile13addDirClusterEv>
   d6908:	2800      	cmp	r0, #0
   d690a:	d1f2      	bne.n	d68f2 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d690c:	e713      	b.n	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d690e:	4649      	mov	r1, r9
   d6910:	4630      	mov	r0, r6
   d6912:	f7ff feaf 	bl	d6674 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6916:	2800      	cmp	r0, #0
   d6918:	f43f af0d 	beq.w	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d691c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6920:	4630      	mov	r0, r6
   d6922:	f000 fa4f 	bl	d6dc4 <_ZN7FatFile7seekSetEm>
   d6926:	2800      	cmp	r0, #0
   d6928:	f43f af05 	beq.w	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d692c:	1e7d      	subs	r5, r7, #1
   d692e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6930:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6932:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d6936:	f04f 080f 	mov.w	r8, #15
   d693a:	e041      	b.n	d69c0 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d693c:	2100      	movs	r1, #0
   d693e:	4630      	mov	r0, r6
   d6940:	f000 fa23 	bl	d6d8a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6944:	4607      	mov	r7, r0
   d6946:	2800      	cmp	r0, #0
   d6948:	f43f aef5 	beq.w	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d694c:	68b2      	ldr	r2, [r6, #8]
   d694e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6952:	42ac      	cmp	r4, r5
   d6954:	f043 0301 	orr.w	r3, r3, #1
   d6958:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d695c:	bf0c      	ite	eq
   d695e:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d6962:	4622      	movne	r2, r4
   d6964:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6966:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d696a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d696e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6972:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6974:	f7ff fd0a 	bl	d638c <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6978:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d697a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d697c:	f887 a01a 	strb.w	sl, [r7, #26]
   d6980:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6984:	f002 021f 	and.w	r2, r2, #31
   d6988:	230d      	movs	r3, #13
   d698a:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d698c:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6990:	435a      	muls	r2, r3
   d6992:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6994:	9902      	ldr	r1, [sp, #8]
   d6996:	4291      	cmp	r1, r2
   d6998:	d915      	bls.n	d69c6 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d699a:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d699e:	2b04      	cmp	r3, #4
   d69a0:	fa5f fc83 	uxtb.w	ip, r3
   d69a4:	f103 0001 	add.w	r0, r3, #1
   d69a8:	d813      	bhi.n	d69d2 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d69aa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d69ae:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d69b2:	280d      	cmp	r0, #13
   d69b4:	f102 0201 	add.w	r2, r2, #1
   d69b8:	4603      	mov	r3, r0
   d69ba:	d1eb      	bne.n	d6994 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d69bc:	3c01      	subs	r4, #1
   d69be:	b2e4      	uxtb	r4, r4
   d69c0:	2c00      	cmp	r4, #0
   d69c2:	d1bb      	bne.n	d693c <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d69c4:	e00e      	b.n	d69e4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d69c6:	bf14      	ite	ne
   d69c8:	f04f 31ff 	movne.w	r1, #4294967295
   d69cc:	2100      	moveq	r1, #0
   d69ce:	b289      	uxth	r1, r1
   d69d0:	e7e5      	b.n	d699e <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d69d2:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d69d6:	bf94      	ite	ls
   d69d8:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d69dc:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d69e0:	8099      	strh	r1, [r3, #4]
   d69e2:	e7e6      	b.n	d69b2 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d69e4:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d69e6:	4621      	mov	r1, r4
   d69e8:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d69ea:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d69ee:	f000 f9cc 	bl	d6d8a <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d69f2:	4607      	mov	r7, r0
   d69f4:	2800      	cmp	r0, #0
   d69f6:	f43f ae9e 	beq.w	d6736 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d69fa:	2220      	movs	r2, #32
   d69fc:	4621      	mov	r1, r4
   d69fe:	f004 fa45 	bl	dae8c <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6a02:	464b      	mov	r3, r9
   d6a04:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6a08:	603a      	str	r2, [r7, #0]
   d6a0a:	685a      	ldr	r2, [r3, #4]
   d6a0c:	607a      	str	r2, [r7, #4]
   d6a0e:	891a      	ldrh	r2, [r3, #8]
   d6a10:	813a      	strh	r2, [r7, #8]
   d6a12:	7a9b      	ldrb	r3, [r3, #10]
   d6a14:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6a16:	f899 3000 	ldrb.w	r3, [r9]
   d6a1a:	f003 0318 	and.w	r3, r3, #24
   d6a1e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6a20:	4b18      	ldr	r3, [pc, #96]	; (d6a84 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6a22:	681b      	ldr	r3, [r3, #0]
   d6a24:	b12b      	cbz	r3, d6a32 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6a26:	f107 010e 	add.w	r1, r7, #14
   d6a2a:	f107 0010 	add.w	r0, r7, #16
   d6a2e:	4798      	blx	r3
   d6a30:	e006      	b.n	d6a40 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d6a32:	2321      	movs	r3, #33	; 0x21
   d6a34:	743b      	strb	r3, [r7, #16]
   d6a36:	2328      	movs	r3, #40	; 0x28
   d6a38:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6a3a:	2308      	movs	r3, #8
   d6a3c:	73bc      	strb	r4, [r7, #14]
   d6a3e:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6a40:	8a3b      	ldrh	r3, [r7, #16]
   d6a42:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d6a44:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d6a46:	89fb      	ldrh	r3, [r7, #14]
   d6a48:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d6a4a:	68b2      	ldr	r2, [r6, #8]
   d6a4c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6a50:	f043 0301 	orr.w	r3, r3, #1
   d6a54:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6a58:	9500      	str	r5, [sp, #0]
   d6a5a:	465b      	mov	r3, fp
   d6a5c:	4652      	mov	r2, sl
   d6a5e:	4631      	mov	r1, r6
   d6a60:	9805      	ldr	r0, [sp, #20]
   d6a62:	f000 f9f8 	bl	d6e56 <_ZN7FatFile15openCachedEntryEPS_tih>
   d6a66:	e009      	b.n	d6a7c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6a68:	2701      	movs	r7, #1
   d6a6a:	e677      	b.n	d675c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d6a6c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d6a70:	f1be 0f0d 	cmp.w	lr, #13
   d6a74:	f43f ae82 	beq.w	d677c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a78:	46d4      	mov	ip, sl
   d6a7a:	e6c3      	b.n	d6804 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d6a7c:	b009      	add	sp, #36	; 0x24
   d6a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a82:	bf00      	nop
   d6a84:	2003e080 	.word	0x2003e080

000d6a88 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6a88:	f001 bbf4 	b.w	d8274 <HAL_Pin_Map>

000d6a8c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d6a8c:	f001 bbf2 	b.w	d8274 <HAL_Pin_Map>

000d6a90 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d6a90:	f001 bbf0 	b.w	d8274 <HAL_Pin_Map>

000d6a94 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d6a94:	b510      	push	{r4, lr}
   d6a96:	460c      	mov	r4, r1
   d6a98:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d6a9a:	b909      	cbnz	r1, d6aa0 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d6a9c:	2000      	movs	r0, #0
   d6a9e:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d6aa0:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6aa4:	d004      	beq.n	d6ab0 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d6aa6:	232f      	movs	r3, #47	; 0x2f
   d6aa8:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d6aaa:	2300      	movs	r3, #0
   d6aac:	7063      	strb	r3, [r4, #1]
   d6aae:	e006      	b.n	d6abe <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6ab0:	f000 f854 	bl	d6b5c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6ab4:	2800      	cmp	r0, #0
   d6ab6:	d0f1      	beq.n	d6a9c <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d6ab8:	4621      	mov	r1, r4
   d6aba:	f000 f85e 	bl	d6b7a <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d6abe:	2001      	movs	r0, #1

fail:
  return false;
}
   d6ac0:	bd10      	pop	{r4, pc}

000d6ac2 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6ac2:	f001 bbd7 	b.w	d8274 <HAL_Pin_Map>

000d6ac6 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6ac6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6ac8:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6aca:	f043 0304 	orr.w	r3, r3, #4
   d6ace:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6ad0:	f100 0210 	add.w	r2, r0, #16
   d6ad4:	6880      	ldr	r0, [r0, #8]
   d6ad6:	f000 bca3 	b.w	d7420 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6adc <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6ae0:	7803      	ldrb	r3, [r0, #0]
   d6ae2:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6ae6:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6ae8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d6aec:	b10b      	cbz	r3, d6af2 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6aee:	2600      	movs	r6, #0
   d6af0:	e02e      	b.n	d6b50 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d6af2:	6942      	ldr	r2, [r0, #20]
   d6af4:	4b18      	ldr	r3, [pc, #96]	; (d6b58 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d6af6:	429a      	cmp	r2, r3
   d6af8:	d8f9      	bhi.n	d6aee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d6afa:	f7ff ffe4 	bl	d6ac6 <_ZN7FatFile10addClusterEv>
   d6afe:	4606      	mov	r6, r0
   d6b00:	2800      	cmp	r0, #0
   d6b02:	d0f4      	beq.n	d6aee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6b04:	6921      	ldr	r1, [r4, #16]
   d6b06:	68a0      	ldr	r0, [r4, #8]
   d6b08:	f000 fc1f 	bl	d734a <_ZNK9FatVolume17clusterFirstBlockEm>
   d6b0c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6b0e:	68a0      	ldr	r0, [r4, #8]
   d6b10:	2205      	movs	r2, #5
   d6b12:	4639      	mov	r1, r7
   d6b14:	3024      	adds	r0, #36	; 0x24
   d6b16:	f000 fbf4 	bl	d7302 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d6b1a:	4680      	mov	r8, r0
   d6b1c:	2800      	cmp	r0, #0
   d6b1e:	d0e6      	beq.n	d6aee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d6b20:	4629      	mov	r1, r5
   d6b22:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6b26:	f004 f9b1 	bl	dae8c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6b2a:	2501      	movs	r5, #1
   d6b2c:	68a3      	ldr	r3, [r4, #8]
   d6b2e:	791a      	ldrb	r2, [r3, #4]
   d6b30:	42aa      	cmp	r2, r5
   d6b32:	d909      	bls.n	d6b48 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6b34:	4642      	mov	r2, r8
   d6b36:	19e9      	adds	r1, r5, r7
   d6b38:	6818      	ldr	r0, [r3, #0]
   d6b3a:	f000 ff5f 	bl	d79fc <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6b3e:	2800      	cmp	r0, #0
   d6b40:	d0d5      	beq.n	d6aee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6b42:	3501      	adds	r5, #1
   d6b44:	b2ed      	uxtb	r5, r5
   d6b46:	e7f1      	b.n	d6b2c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d6b48:	6963      	ldr	r3, [r4, #20]
   d6b4a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6b4e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d6b50:	4630      	mov	r0, r6
   d6b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b56:	bf00      	nop
   d6b58:	001ffdff 	.word	0x001ffdff

000d6b5c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d6b5c:	b510      	push	{r4, lr}
   d6b5e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6b60:	6880      	ldr	r0, [r0, #8]
   d6b62:	460a      	mov	r2, r1
   d6b64:	3024      	adds	r0, #36	; 0x24
   d6b66:	69a1      	ldr	r1, [r4, #24]
   d6b68:	f000 fbcb 	bl	d7302 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d6b6c:	b120      	cbz	r0, d6b78 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d6b6e:	88a3      	ldrh	r3, [r4, #4]
   d6b70:	f003 030f 	and.w	r3, r3, #15
   d6b74:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d6b78:	bd10      	pop	{r4, pc}

000d6b7a <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d6b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b7c:	2400      	movs	r4, #0
   d6b7e:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d6b80:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d6b82:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6b84:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d6b86:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6b8a:	2a20      	cmp	r2, #32
   d6b8c:	d018      	beq.n	d6bc0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d6b8e:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6b90:	bf02      	ittt	eq
   d6b92:	54cf      	strbeq	r7, [r1, r3]
   d6b94:	1c5a      	addeq	r2, r3, #1
   d6b96:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d6b98:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6b9a:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d6b9e:	bf08      	it	eq
   d6ba0:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6ba2:	f1be 0f19 	cmp.w	lr, #25
   d6ba6:	d806      	bhi.n	d6bb6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d6ba8:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d6bac:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d6bb0:	bf1c      	itt	ne
   d6bb2:	3220      	addne	r2, #32
   d6bb4:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d6bb6:	f103 0e01 	add.w	lr, r3, #1
   d6bba:	54ca      	strb	r2, [r1, r3]
   d6bbc:	fa5f f38e 	uxtb.w	r3, lr
   d6bc0:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d6bc2:	2c0b      	cmp	r4, #11
   d6bc4:	d1df      	bne.n	d6b86 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d6bc6:	2200      	movs	r2, #0
   d6bc8:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d6bca:	4618      	mov	r0, r3
   d6bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6bce <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6bce:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6bd0:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6bd2:	4605      	mov	r5, r0
   d6bd4:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d6bd6:	b984      	cbnz	r4, d6bfa <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6bd8:	2224      	movs	r2, #36	; 0x24
   d6bda:	4621      	mov	r1, r4
   d6bdc:	f004 f956 	bl	dae8c <memset>

  m_vol = vol;
   d6be0:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d6be2:	79f3      	ldrb	r3, [r6, #7]
   d6be4:	2b10      	cmp	r3, #16
   d6be6:	d003      	beq.n	d6bf0 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d6be8:	2b20      	cmp	r3, #32
   d6bea:	d106      	bne.n	d6bfa <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6bec:	2340      	movs	r3, #64	; 0x40
   d6bee:	e000      	b.n	d6bf2 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d6bf0:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6bf2:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6bf4:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6bf6:	70a8      	strb	r0, [r5, #2]
   d6bf8:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d6bfa:	2000      	movs	r0, #0
   d6bfc:	bd70      	pop	{r4, r5, r6, pc}

000d6bfe <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d6bfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c02:	7803      	ldrb	r3, [r0, #0]
   d6c04:	4604      	mov	r4, r0
   d6c06:	4689      	mov	r9, r1
   d6c08:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d6c0a:	b14b      	cbz	r3, d6c20 <_ZN7FatFile4readEPvj+0x22>
   d6c0c:	7882      	ldrb	r2, [r0, #2]
   d6c0e:	07d1      	lsls	r1, r2, #31
   d6c10:	d506      	bpl.n	d6c20 <_ZN7FatFile4readEPvj+0x22>
   d6c12:	e00c      	b.n	d6c2e <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6c14:	465a      	mov	r2, fp
   d6c16:	6921      	ldr	r1, [r4, #16]
   d6c18:	f000 fb9d 	bl	d7356 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d6c1c:	2800      	cmp	r0, #0
   d6c1e:	da3d      	bge.n	d6c9c <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6c20:	7863      	ldrb	r3, [r4, #1]
   d6c22:	f043 0302 	orr.w	r3, r3, #2
   d6c26:	7063      	strb	r3, [r4, #1]
  return -1;
   d6c28:	f04f 30ff 	mov.w	r0, #4294967295
   d6c2c:	e097      	b.n	d6d5e <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6c2e:	071a      	lsls	r2, r3, #28
   d6c30:	d503      	bpl.n	d6c3a <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6c32:	69e3      	ldr	r3, [r4, #28]
   d6c34:	6962      	ldr	r2, [r4, #20]
   d6c36:	1a9b      	subs	r3, r3, r2
   d6c38:	e007      	b.n	d6c4a <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d6c3a:	069a      	lsls	r2, r3, #26
   d6c3c:	d508      	bpl.n	d6c50 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6c3e:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d6c40:	891a      	ldrh	r2, [r3, #8]
   d6c42:	6963      	ldr	r3, [r4, #20]
   d6c44:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d6c48:	b29b      	uxth	r3, r3
   d6c4a:	429d      	cmp	r5, r3
   d6c4c:	bf28      	it	cs
   d6c4e:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6c50:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d6c52:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6c56:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6c5a:	2e00      	cmp	r6, #0
   d6c5c:	d035      	beq.n	d6cca <_ZN7FatFile4readEPvj+0xcc>
   d6c5e:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6c60:	6963      	ldr	r3, [r4, #20]
   d6c62:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6c64:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6c68:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d6c6c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6c70:	d002      	beq.n	d6c78 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6c72:	6a03      	ldr	r3, [r0, #32]
   d6c74:	4419      	add	r1, r3
   d6c76:	e01d      	b.n	d6cb4 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6c78:	f890 8005 	ldrb.w	r8, [r0, #5]
   d6c7c:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d6c80:	f1ba 0f00 	cmp.w	sl, #0
   d6c84:	d110      	bne.n	d6ca8 <_ZN7FatFile4readEPvj+0xaa>
   d6c86:	f1b8 0f00 	cmp.w	r8, #0
   d6c8a:	d10d      	bne.n	d6ca8 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d6c8c:	2b00      	cmp	r3, #0
   d6c8e:	d1c1      	bne.n	d6c14 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6c90:	0653      	lsls	r3, r2, #25
   d6c92:	bf4c      	ite	mi
   d6c94:	6a03      	ldrmi	r3, [r0, #32]
   d6c96:	6a23      	ldrpl	r3, [r4, #32]
   d6c98:	6123      	str	r3, [r4, #16]
   d6c9a:	e005      	b.n	d6ca8 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d6c9c:	d104      	bne.n	d6ca8 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d6c9e:	7823      	ldrb	r3, [r4, #0]
   d6ca0:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6ca4:	d111      	bne.n	d6cca <_ZN7FatFile4readEPvj+0xcc>
   d6ca6:	e7bb      	b.n	d6c20 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6ca8:	6921      	ldr	r1, [r4, #16]
   d6caa:	68a0      	ldr	r0, [r4, #8]
   d6cac:	f000 fb4d 	bl	d734a <_ZNK9FatVolume17clusterFirstBlockEm>
   d6cb0:	eb08 0100 	add.w	r1, r8, r0
   d6cb4:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6cb6:	f1ba 0f00 	cmp.w	sl, #0
   d6cba:	d135      	bne.n	d6d28 <_ZN7FatFile4readEPvj+0x12a>
   d6cbc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6cc0:	d332      	bcc.n	d6d28 <_ZN7FatFile4readEPvj+0x12a>
   d6cc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6cc4:	4299      	cmp	r1, r3
   d6cc6:	d102      	bne.n	d6cce <_ZN7FatFile4readEPvj+0xd0>
   d6cc8:	e02e      	b.n	d6d28 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d6cca:	1ba8      	subs	r0, r5, r6
   d6ccc:	e047      	b.n	d6d5e <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6cce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6cd2:	d31b      	bcc.n	d6d0c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d6cd4:	7822      	ldrb	r2, [r4, #0]
   d6cd6:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d6cd8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6cdc:	d406      	bmi.n	d6cec <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d6cde:	7902      	ldrb	r2, [r0, #4]
   d6ce0:	ebc8 0202 	rsb	r2, r8, r2
   d6ce4:	b2d2      	uxtb	r2, r2
   d6ce6:	4592      	cmp	sl, r2
   d6ce8:	bf28      	it	cs
   d6cea:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6cec:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d6cee:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6cf2:	d207      	bcs.n	d6d04 <_ZN7FatFile4readEPvj+0x106>
   d6cf4:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d6cf6:	4653      	mov	r3, sl
   d6cf8:	464a      	mov	r2, r9
   d6cfa:	6800      	ldr	r0, [r0, #0]
   d6cfc:	f000 fe3c 	bl	d7978 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6d00:	b960      	cbnz	r0, d6d1c <_ZN7FatFile4readEPvj+0x11e>
   d6d02:	e78d      	b.n	d6c20 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d04:	4453      	add	r3, sl
   d6d06:	4299      	cmp	r1, r3
   d6d08:	d321      	bcc.n	d6d4e <_ZN7FatFile4readEPvj+0x150>
   d6d0a:	e7f3      	b.n	d6cf4 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6d0c:	464a      	mov	r2, r9
   d6d0e:	6800      	ldr	r0, [r0, #0]
   d6d10:	f000 fdea 	bl	d78e8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6d14:	2800      	cmp	r0, #0
   d6d16:	d083      	beq.n	d6c20 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d6d18:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d6d1c:	6963      	ldr	r3, [r4, #20]
   d6d1e:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d6d20:	44b9      	add	r9, r7
    m_curPosition += n;
   d6d22:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6d24:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6d26:	e798      	b.n	d6c5a <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6d28:	2200      	movs	r2, #0
   d6d2a:	3024      	adds	r0, #36	; 0x24
   d6d2c:	f000 fae9 	bl	d7302 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d6d30:	2800      	cmp	r0, #0
   d6d32:	f43f af75 	beq.w	d6c20 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d6d36:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d6d3a:	42b7      	cmp	r7, r6
   d6d3c:	bf28      	it	cs
   d6d3e:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d6d40:	eb00 010a 	add.w	r1, r0, sl
   d6d44:	463a      	mov	r2, r7
   d6d46:	4648      	mov	r0, r9
   d6d48:	f004 f895 	bl	dae76 <memcpy>
   d6d4c:	e7e6      	b.n	d6d1c <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6d4e:	3024      	adds	r0, #36	; 0x24
   d6d50:	9101      	str	r1, [sp, #4]
   d6d52:	f000 faaf 	bl	d72b4 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d6d56:	9901      	ldr	r1, [sp, #4]
   d6d58:	2800      	cmp	r0, #0
   d6d5a:	d1cb      	bne.n	d6cf4 <_ZN7FatFile4readEPvj+0xf6>
   d6d5c:	e760      	b.n	d6c20 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d6d5e:	b003      	add	sp, #12
   d6d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6d64 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d6d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d6d66:	2201      	movs	r2, #1
   d6d68:	f10d 0107 	add.w	r1, sp, #7
   d6d6c:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d6d6e:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d6d70:	6905      	ldr	r5, [r0, #16]
   d6d72:	f7ff ff44 	bl	d6bfe <_ZN7FatFile4readEPvj>
   d6d76:	2801      	cmp	r0, #1
   d6d78:	bf05      	ittet	eq
   d6d7a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d6d7e:	6166      	streq	r6, [r4, #20]
   d6d80:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d6d84:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d6d86:	b002      	add	sp, #8
   d6d88:	bd70      	pop	{r4, r5, r6, pc}

000d6d8a <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6d8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6d8c:	6943      	ldr	r3, [r0, #20]
   d6d8e:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6d92:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d6d94:	b105      	cbz	r5, d6d98 <_ZN7FatFile12readDirCacheEb+0xe>
   d6d96:	b969      	cbnz	r1, d6db4 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d6d98:	2201      	movs	r2, #1
   d6d9a:	f10d 0107 	add.w	r1, sp, #7
   d6d9e:	4620      	mov	r0, r4
   d6da0:	f7ff ff2d 	bl	d6bfe <_ZN7FatFile4readEPvj>
   d6da4:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d6da6:	2801      	cmp	r0, #1
   d6da8:	d001      	beq.n	d6dae <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d6daa:	2000      	movs	r0, #0
   d6dac:	e008      	b.n	d6dc0 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d6dae:	6963      	ldr	r3, [r4, #20]
   d6db0:	331f      	adds	r3, #31
   d6db2:	e000      	b.n	d6db6 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d6db4:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6db6:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d6db8:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6dba:	3030      	adds	r0, #48	; 0x30
   d6dbc:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d6dc0:	b003      	add	sp, #12
   d6dc2:	bd30      	pop	{r4, r5, pc}

000d6dc4 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6dc8:	460e      	mov	r6, r1
   d6dca:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d6dcc:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6dce:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d6dd0:	2900      	cmp	r1, #0
   d6dd2:	d039      	beq.n	d6e48 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d6dd4:	6945      	ldr	r5, [r0, #20]
   d6dd6:	42b5      	cmp	r5, r6
   d6dd8:	d03a      	beq.n	d6e50 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d6dda:	b90e      	cbnz	r6, d6de0 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d6ddc:	6106      	str	r6, [r0, #16]
    goto done;
   d6dde:	e031      	b.n	d6e44 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d6de0:	070b      	lsls	r3, r1, #28
   d6de2:	d503      	bpl.n	d6dec <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d6de4:	69c3      	ldr	r3, [r0, #28]
   d6de6:	429e      	cmp	r6, r3
   d6de8:	d82e      	bhi.n	d6e48 <_ZN7FatFile7seekSetEm+0x84>
   d6dea:	e007      	b.n	d6dfc <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d6dec:	0688      	lsls	r0, r1, #26
   d6dee:	d505      	bpl.n	d6dfc <_ZN7FatFile7seekSetEm+0x38>
   d6df0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d6df2:	891b      	ldrh	r3, [r3, #8]
   d6df4:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d6df8:	d826      	bhi.n	d6e48 <_ZN7FatFile7seekSetEm+0x84>
   d6dfa:	e023      	b.n	d6e44 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6dfc:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d6e00:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d6e04:	1e6a      	subs	r2, r5, #1
   d6e06:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e0a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e0c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e0e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d6e10:	429a      	cmp	r2, r3
   d6e12:	d800      	bhi.n	d6e16 <_ZN7FatFile7seekSetEm+0x52>
   d6e14:	b94d      	cbnz	r5, d6e2a <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6e16:	064a      	lsls	r2, r1, #25
   d6e18:	bf4c      	ite	mi
   d6e1a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d6e1e:	6a22      	ldrpl	r2, [r4, #32]
   d6e20:	6122      	str	r2, [r4, #16]
   d6e22:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6e24:	f104 0810 	add.w	r8, r4, #16
   d6e28:	e00a      	b.n	d6e40 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d6e2a:	1a9b      	subs	r3, r3, r2
   d6e2c:	e7f9      	b.n	d6e22 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6e2e:	4642      	mov	r2, r8
   d6e30:	6921      	ldr	r1, [r4, #16]
   d6e32:	68a0      	ldr	r0, [r4, #8]
   d6e34:	f000 fa8f 	bl	d7356 <_ZN9FatVolume6fatGetEmPm>
   d6e38:	2800      	cmp	r0, #0
   d6e3a:	f105 35ff 	add.w	r5, r5, #4294967295
   d6e3e:	dd03      	ble.n	d6e48 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d6e40:	2d00      	cmp	r5, #0
   d6e42:	d1f4      	bne.n	d6e2e <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d6e44:	6166      	str	r6, [r4, #20]
   d6e46:	e003      	b.n	d6e50 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d6e48:	6127      	str	r7, [r4, #16]
  return false;
   d6e4a:	2000      	movs	r0, #0
   d6e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d6e50:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d6e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e56 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e58:	460f      	mov	r7, r1
   d6e5a:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6e5c:	2100      	movs	r1, #0
   d6e5e:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6e60:	4604      	mov	r4, r0
   d6e62:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6e64:	f004 f812 	bl	dae8c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d6e68:	68b8      	ldr	r0, [r7, #8]
   d6e6a:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6e6c:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d6e70:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6e72:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d6e76:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d6e78:	6a3b      	ldr	r3, [r7, #32]
   d6e7a:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6e7c:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6e7e:	7acb      	ldrb	r3, [r1, #11]
   d6e80:	071d      	lsls	r5, r3, #28
   d6e82:	d44c      	bmi.n	d6f1e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6e84:	1883      	adds	r3, r0, r2
   d6e86:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6e8a:	f003 0317 	and.w	r3, r3, #23
   d6e8e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6e90:	7ac9      	ldrb	r1, [r1, #11]
   d6e92:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d6e96:	bf04      	itt	eq
   d6e98:	f043 0308 	orreq.w	r3, r3, #8
   d6e9c:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d6e9e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6ea2:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d6ea4:	f006 0303 	and.w	r3, r6, #3
   d6ea8:	2b01      	cmp	r3, #1
   d6eaa:	d009      	beq.n	d6ec0 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d6eac:	2b02      	cmp	r3, #2
   d6eae:	d005      	beq.n	d6ebc <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d6eb0:	2b00      	cmp	r3, #0
   d6eb2:	d134      	bne.n	d6f1e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d6eb4:	0571      	lsls	r1, r6, #21
   d6eb6:	d432      	bmi.n	d6f1e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d6eb8:	2301      	movs	r3, #1
   d6eba:	e002      	b.n	d6ec2 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d6ebc:	2303      	movs	r3, #3
   d6ebe:	e000      	b.n	d6ec2 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d6ec0:	2302      	movs	r3, #2
   d6ec2:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d6ec4:	78a1      	ldrb	r1, [r4, #2]
   d6ec6:	078b      	lsls	r3, r1, #30
   d6ec8:	d503      	bpl.n	d6ed2 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d6eca:	7823      	ldrb	r3, [r4, #0]
   d6ecc:	f013 0f11 	tst.w	r3, #17
   d6ed0:	d125      	bne.n	d6f1e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6ed2:	b24b      	sxtb	r3, r1
   d6ed4:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d6ed8:	f006 0108 	and.w	r1, r6, #8
   d6edc:	bf14      	ite	ne
   d6ede:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d6ee2:	2700      	moveq	r7, #0
   d6ee4:	4319      	orrs	r1, r3
   d6ee6:	4339      	orrs	r1, r7
   d6ee8:	70a1      	strb	r1, [r4, #2]
   d6eea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d6eec:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6eee:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d6ef0:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d6ef2:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d6ef6:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d6efa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d6efe:	d504      	bpl.n	d6f0a <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6f00:	b181      	cbz	r1, d6f24 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6f02:	f000 fac8 	bl	d7496 <_ZN9FatVolume9freeChainEm>
   d6f06:	b968      	cbnz	r0, d6f24 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6f08:	e009      	b.n	d6f1e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d6f0a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6f0c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d6f0e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6f10:	0473      	lsls	r3, r6, #17
   d6f12:	d50c      	bpl.n	d6f2e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d6f14:	69e1      	ldr	r1, [r4, #28]
   d6f16:	4620      	mov	r0, r4
   d6f18:	f7ff ff54 	bl	d6dc4 <_ZN7FatFile7seekSetEm>
   d6f1c:	b938      	cbnz	r0, d6f2e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d6f1e:	2000      	movs	r0, #0
   d6f20:	7020      	strb	r0, [r4, #0]
  return false;
   d6f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d6f24:	78a3      	ldrb	r3, [r4, #2]
   d6f26:	f043 0304 	orr.w	r3, r3, #4
   d6f2a:	70a3      	strb	r3, [r4, #2]
   d6f2c:	e7f0      	b.n	d6f10 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d6f2e:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d6f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f32 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6f32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6f36:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6f38:	4606      	mov	r6, r0
   d6f3a:	460d      	mov	r5, r1
   d6f3c:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6f3e:	bb53      	cbnz	r3, d6f96 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f40:	780b      	ldrb	r3, [r1, #0]
   d6f42:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6f46:	d026      	beq.n	d6f96 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f48:	694c      	ldr	r4, [r1, #20]
   d6f4a:	f014 041f 	ands.w	r4, r4, #31
   d6f4e:	d122      	bne.n	d6f96 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f50:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d6f52:	2100      	movs	r1, #0
   d6f54:	4628      	mov	r0, r5
   d6f56:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d6f5a:	f7ff ff16 	bl	d6d8a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6f5e:	b1d0      	cbz	r0, d6f96 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d6f60:	7803      	ldrb	r3, [r0, #0]
   d6f62:	b1c3      	cbz	r3, d6f96 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6f64:	2b2e      	cmp	r3, #46	; 0x2e
   d6f66:	d101      	bne.n	d6f6c <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d6f68:	2400      	movs	r4, #0
   d6f6a:	e7f2      	b.n	d6f52 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6f6c:	2be5      	cmp	r3, #229	; 0xe5
   d6f6e:	d0fb      	beq.n	d6f68 <_ZN7FatFile8openNextEPS_i+0x36>
   d6f70:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6f72:	f011 0f08 	tst.w	r1, #8
   d6f76:	d105      	bne.n	d6f84 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d6f78:	b17c      	cbz	r4, d6f9a <_ZN7FatFile8openNextEPS_i+0x68>
   d6f7a:	f7ff fa07 	bl	d638c <_ZN7FatFile11lfnChecksumEPh>
   d6f7e:	4580      	cmp	r8, r0
   d6f80:	d109      	bne.n	d6f96 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f82:	e00a      	b.n	d6f9a <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6f84:	290f      	cmp	r1, #15
   d6f86:	d1ef      	bne.n	d6f68 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6f88:	0659      	lsls	r1, r3, #25
   d6f8a:	d5e2      	bpl.n	d6f52 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d6f8c:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d6f90:	f890 800d 	ldrb.w	r8, [r0, #13]
   d6f94:	e7dd      	b.n	d6f52 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d6f96:	2000      	movs	r0, #0
   d6f98:	e007      	b.n	d6faa <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d6f9a:	9400      	str	r4, [sp, #0]
   d6f9c:	463b      	mov	r3, r7
   d6f9e:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d6fa2:	4629      	mov	r1, r5
   d6fa4:	4630      	mov	r0, r6
   d6fa6:	f7ff ff56 	bl	d6e56 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d6faa:	b003      	add	sp, #12
   d6fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6fb0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6fb0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6fb2:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6fb4:	4604      	mov	r4, r0
  if (!isOpen()) {
   d6fb6:	b90b      	cbnz	r3, d6fbc <_ZN7FatFile4syncEv+0xc>
    return true;
   d6fb8:	2001      	movs	r0, #1
   d6fba:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6fbc:	7883      	ldrb	r3, [r0, #2]
   d6fbe:	075a      	lsls	r2, r3, #29
   d6fc0:	d523      	bpl.n	d700a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6fc2:	2101      	movs	r1, #1
   d6fc4:	f7ff fdca 	bl	d6b5c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6fc8:	4605      	mov	r5, r0
   d6fca:	b928      	cbnz	r0, d6fd8 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d6fcc:	7863      	ldrb	r3, [r4, #1]
   d6fce:	f043 0301 	orr.w	r3, r3, #1
   d6fd2:	7063      	strb	r3, [r4, #1]
  return false;
   d6fd4:	2000      	movs	r0, #0
   d6fd6:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6fd8:	7803      	ldrb	r3, [r0, #0]
   d6fda:	2be5      	cmp	r3, #229	; 0xe5
   d6fdc:	d0f6      	beq.n	d6fcc <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d6fde:	7823      	ldrb	r3, [r4, #0]
   d6fe0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6fe2:	bf44      	itt	mi
   d6fe4:	69e3      	ldrmi	r3, [r4, #28]
   d6fe6:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d6fe8:	8c23      	ldrh	r3, [r4, #32]
   d6fea:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6fec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6fee:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d6ff0:	4b09      	ldr	r3, [pc, #36]	; (d7018 <_ZN7FatFile4syncEv+0x68>)
   d6ff2:	681b      	ldr	r3, [r3, #0]
   d6ff4:	b12b      	cbz	r3, d7002 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d6ff6:	f100 0116 	add.w	r1, r0, #22
   d6ffa:	3018      	adds	r0, #24
   d6ffc:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6ffe:	8b2b      	ldrh	r3, [r5, #24]
   d7000:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d7002:	78a3      	ldrb	r3, [r4, #2]
   d7004:	f023 0304 	bic.w	r3, r3, #4
   d7008:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d700a:	68a0      	ldr	r0, [r4, #8]
   d700c:	f7ff f9b1 	bl	d6372 <_ZN9FatVolume9cacheSyncEv>
   d7010:	2800      	cmp	r0, #0
   d7012:	d0db      	beq.n	d6fcc <_ZN7FatFile4syncEv+0x1c>
   d7014:	e7d0      	b.n	d6fb8 <_ZN7FatFile4syncEv+0x8>
   d7016:	bf00      	nop
   d7018:	2003e080 	.word	0x2003e080

000d701c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d701c:	b510      	push	{r4, lr}
   d701e:	4604      	mov	r4, r0
  bool rtn = sync();
   d7020:	f7ff ffc6 	bl	d6fb0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d7024:	2300      	movs	r3, #0
   d7026:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d7028:	bd10      	pop	{r4, pc}

000d702a <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d702a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d702c:	b093      	sub	sp, #76	; 0x4c
   d702e:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7030:	2300      	movs	r3, #0
   d7032:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d7036:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d703a:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d703c:	9201      	str	r2, [sp, #4]
   d703e:	4606      	mov	r6, r0
   d7040:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7042:	b10b      	cbz	r3, d7048 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d7044:	2000      	movs	r0, #0
   d7046:	e03d      	b.n	d70c4 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7048:	780b      	ldrb	r3, [r1, #0]
   d704a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d704e:	d0f9      	beq.n	d7044 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d7050:	7813      	ldrb	r3, [r2, #0]
   d7052:	2b2f      	cmp	r3, #47	; 0x2f
   d7054:	d112      	bne.n	d707c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d7056:	9b01      	ldr	r3, [sp, #4]
   d7058:	781a      	ldrb	r2, [r3, #0]
   d705a:	2a2f      	cmp	r2, #47	; 0x2f
   d705c:	d102      	bne.n	d7064 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d705e:	3301      	adds	r3, #1
   d7060:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d7062:	e7f8      	b.n	d7056 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d7064:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d7066:	b91a      	cbnz	r2, d7070 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d7068:	4630      	mov	r0, r6
   d706a:	f7ff fdb0 	bl	d6bce <_ZN7FatFile8openRootEP9FatVolume>
   d706e:	e029      	b.n	d70c4 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d7070:	a809      	add	r0, sp, #36	; 0x24
   d7072:	f7ff fdac 	bl	d6bce <_ZN7FatFile8openRootEP9FatVolume>
   d7076:	2800      	cmp	r0, #0
   d7078:	d0e4      	beq.n	d7044 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d707a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d707c:	aa01      	add	r2, sp, #4
   d707e:	a903      	add	r1, sp, #12
   d7080:	9801      	ldr	r0, [sp, #4]
   d7082:	f7ff f9a9 	bl	d63d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d7086:	2800      	cmp	r0, #0
   d7088:	d0dc      	beq.n	d7044 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d708a:	9b01      	ldr	r3, [sp, #4]
   d708c:	781b      	ldrb	r3, [r3, #0]
   d708e:	b19b      	cbz	r3, d70b8 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d7090:	2300      	movs	r3, #0
   d7092:	aa03      	add	r2, sp, #12
   d7094:	4621      	mov	r1, r4
   d7096:	4630      	mov	r0, r6
   d7098:	f7ff fb42 	bl	d6720 <_ZN7FatFile4openEPS_P7fname_ti>
   d709c:	2800      	cmp	r0, #0
   d709e:	d0d1      	beq.n	d7044 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d70a0:	4635      	mov	r5, r6
   d70a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70a4:	ac09      	add	r4, sp, #36	; 0x24
   d70a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70ac:	682b      	ldr	r3, [r5, #0]
   d70ae:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d70b0:	4630      	mov	r0, r6
   d70b2:	f7ff ffb3 	bl	d701c <_ZN7FatFile5closeEv>
   d70b6:	e7e0      	b.n	d707a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d70b8:	463b      	mov	r3, r7
   d70ba:	aa03      	add	r2, sp, #12
   d70bc:	4621      	mov	r1, r4
   d70be:	4630      	mov	r0, r6
   d70c0:	f7ff fb2e 	bl	d6720 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d70c4:	b013      	add	sp, #76	; 0x4c
   d70c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d70c8 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d70c8:	b500      	push	{lr}
   d70ca:	b08b      	sub	sp, #44	; 0x2c
   d70cc:	2300      	movs	r3, #0
   d70ce:	f88d 3004 	strb.w	r3, [sp, #4]
   d70d2:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d70d6:	460a      	mov	r2, r1
   d70d8:	2301      	movs	r3, #1
   d70da:	4601      	mov	r1, r0
   d70dc:	a801      	add	r0, sp, #4
   d70de:	f7ff ffa4 	bl	d702a <_ZN7FatFile4openEPS_PKci>
   d70e2:	b110      	cbz	r0, d70ea <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d70e4:	a801      	add	r0, sp, #4
   d70e6:	f7ff fa63 	bl	d65b0 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d70ea:	b00b      	add	sp, #44	; 0x2c
   d70ec:	f85d fb04 	ldr.w	pc, [sp], #4

000d70f0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d70f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d70f4:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d70f6:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d70f8:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d70fa:	4604      	mov	r4, r0
   d70fc:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d70fe:	d508      	bpl.n	d7112 <_ZN7FatFile5writeEPKvj+0x22>
   d7100:	7883      	ldrb	r3, [r0, #2]
   d7102:	079a      	lsls	r2, r3, #30
   d7104:	d505      	bpl.n	d7112 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d7106:	071b      	lsls	r3, r3, #28
   d7108:	d50b      	bpl.n	d7122 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d710a:	69e1      	ldr	r1, [r4, #28]
   d710c:	f7ff fe5a 	bl	d6dc4 <_ZN7FatFile7seekSetEm>
   d7110:	b938      	cbnz	r0, d7122 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d7112:	7863      	ldrb	r3, [r4, #1]
   d7114:	f043 0301 	orr.w	r3, r3, #1
   d7118:	7063      	strb	r3, [r4, #1]
  return -1;
   d711a:	f04f 30ff 	mov.w	r0, #4294967295
   d711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d7122:	6963      	ldr	r3, [r4, #20]
   d7124:	43db      	mvns	r3, r3
   d7126:	4598      	cmp	r8, r3
   d7128:	d8f3      	bhi.n	d7112 <_ZN7FatFile5writeEPKvj+0x22>
   d712a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d712c:	f04f 0a00 	mov.w	sl, #0
   d7130:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7132:	2e00      	cmp	r6, #0
   d7134:	f000 8081 	beq.w	d723a <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d7138:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d713a:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d713c:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d7140:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7144:	d11c      	bne.n	d7180 <_ZN7FatFile5writeEPKvj+0x90>
   d7146:	b9df      	cbnz	r7, d7180 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d7148:	6921      	ldr	r1, [r4, #16]
   d714a:	b171      	cbz	r1, d716a <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d714c:	f104 0210 	add.w	r2, r4, #16
   d7150:	f000 f901 	bl	d7356 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d7154:	2800      	cmp	r0, #0
   d7156:	dbdc      	blt.n	d7112 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d7158:	f040 808e 	bne.w	d7278 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d715c:	4620      	mov	r0, r4
   d715e:	f7ff fcb2 	bl	d6ac6 <_ZN7FatFile10addClusterEv>
   d7162:	2800      	cmp	r0, #0
   d7164:	f040 8088 	bne.w	d7278 <_ZN7FatFile5writeEPKvj+0x188>
   d7168:	e7d3      	b.n	d7112 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d716a:	6a23      	ldr	r3, [r4, #32]
   d716c:	b93b      	cbnz	r3, d717e <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d716e:	4620      	mov	r0, r4
   d7170:	f7ff fca9 	bl	d6ac6 <_ZN7FatFile10addClusterEv>
   d7174:	2800      	cmp	r0, #0
   d7176:	d0cc      	beq.n	d7112 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d7178:	6923      	ldr	r3, [r4, #16]
   d717a:	6223      	str	r3, [r4, #32]
   d717c:	e000      	b.n	d7180 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d717e:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7180:	6921      	ldr	r1, [r4, #16]
   d7182:	68a0      	ldr	r0, [r4, #8]
   d7184:	f000 f8e1 	bl	d734a <_ZNK9FatVolume17clusterFirstBlockEm>
   d7188:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d718a:	b917      	cbnz	r7, d7192 <_ZN7FatFile5writeEPKvj+0xa2>
   d718c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7190:	d221      	bcs.n	d71d6 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d7192:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d7196:	42b5      	cmp	r5, r6
   d7198:	bf28      	it	cs
   d719a:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d719c:	b937      	cbnz	r7, d71ac <_ZN7FatFile5writeEPKvj+0xbc>
   d719e:	6963      	ldr	r3, [r4, #20]
   d71a0:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d71a2:	4293      	cmp	r3, r2
   d71a4:	bf34      	ite	cc
   d71a6:	2201      	movcc	r2, #1
   d71a8:	2205      	movcs	r2, #5
   d71aa:	e000      	b.n	d71ae <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d71ac:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d71ae:	68a0      	ldr	r0, [r4, #8]
   d71b0:	3024      	adds	r0, #36	; 0x24
   d71b2:	f000 f8a6 	bl	d7302 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d71b6:	2800      	cmp	r0, #0
   d71b8:	d0ab      	beq.n	d7112 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d71ba:	4438      	add	r0, r7
   d71bc:	462a      	mov	r2, r5
   d71be:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d71c0:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d71c2:	f003 fe58 	bl	dae76 <memcpy>
      if (512 == (n + blockOffset)) {
   d71c6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d71ca:	d130      	bne.n	d722e <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d71cc:	68a0      	ldr	r0, [r4, #8]
   d71ce:	3024      	adds	r0, #36	; 0x24
   d71d0:	f000 f870 	bl	d72b4 <_ZN8FatCache4syncEv>
   d71d4:	e017      	b.n	d7206 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d71d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d71da:	68a0      	ldr	r0, [r4, #8]
   d71dc:	d315      	bcc.n	d720a <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d71de:	7902      	ldrb	r2, [r0, #4]
   d71e0:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d71e2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d71e4:	b2d2      	uxtb	r2, r2
   d71e6:	4293      	cmp	r3, r2
   d71e8:	bf28      	it	cs
   d71ea:	4613      	movcs	r3, r2
   d71ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d71ee:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d71f0:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d71f4:	d302      	bcc.n	d71fc <_ZN7FatFile5writeEPKvj+0x10c>
   d71f6:	441a      	add	r2, r3
   d71f8:	4291      	cmp	r1, r2
   d71fa:	d337      	bcc.n	d726c <_ZN7FatFile5writeEPKvj+0x17c>
   d71fc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d71fe:	464a      	mov	r2, r9
   d7200:	6838      	ldr	r0, [r7, #0]
   d7202:	f000 fc6d 	bl	d7ae0 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d7206:	b990      	cbnz	r0, d722e <_ZN7FatFile5writeEPKvj+0x13e>
   d7208:	e783      	b.n	d7112 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d720a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d720c:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d720e:	bf02      	ittt	eq
   d7210:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7214:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7218:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d721a:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d721c:	464a      	mov	r2, r9
   d721e:	6818      	ldr	r0, [r3, #0]
   d7220:	f000 fbec 	bl	d79fc <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d7224:	2800      	cmp	r0, #0
   d7226:	f43f af74 	beq.w	d7112 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d722a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d722e:	6963      	ldr	r3, [r4, #20]
   d7230:	442b      	add	r3, r5
   d7232:	6163      	str	r3, [r4, #20]
    src += n;
   d7234:	44a9      	add	r9, r5
    nToWrite -= n;
   d7236:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7238:	e77a      	b.n	d7130 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d723a:	69e2      	ldr	r2, [r4, #28]
   d723c:	4293      	cmp	r3, r2
   d723e:	d901      	bls.n	d7244 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d7240:	61e3      	str	r3, [r4, #28]
   d7242:	e002      	b.n	d724a <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d7244:	4b0f      	ldr	r3, [pc, #60]	; (d7284 <_ZN7FatFile5writeEPKvj+0x194>)
   d7246:	681b      	ldr	r3, [r3, #0]
   d7248:	b11b      	cbz	r3, d7252 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d724a:	78a3      	ldrb	r3, [r4, #2]
   d724c:	f043 0304 	orr.w	r3, r3, #4
   d7250:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d7252:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d7256:	2b00      	cmp	r3, #0
   d7258:	db02      	blt.n	d7260 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d725a:	4640      	mov	r0, r8
   d725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d7260:	4620      	mov	r0, r4
   d7262:	f7ff fea5 	bl	d6fb0 <_ZN7FatFile4syncEv>
   d7266:	2800      	cmp	r0, #0
   d7268:	d1f7      	bne.n	d725a <_ZN7FatFile5writeEPKvj+0x16a>
   d726a:	e752      	b.n	d7112 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d726c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7270:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7274:	62c2      	str	r2, [r0, #44]	; 0x2c
   d7276:	e7c1      	b.n	d71fc <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7278:	6921      	ldr	r1, [r4, #16]
   d727a:	68a0      	ldr	r0, [r4, #8]
   d727c:	f000 f865 	bl	d734a <_ZNK9FatVolume17clusterFirstBlockEm>
   d7280:	4601      	mov	r1, r0
   d7282:	e783      	b.n	d718c <_ZN7FatFile5writeEPKvj+0x9c>
   d7284:	2003e080 	.word	0x2003e080

000d7288 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d7288:	f000 bff4 	b.w	d8274 <HAL_Pin_Map>

000d728c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d728c:	b570      	push	{r4, r5, r6, lr}
   d728e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7290:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7292:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7294:	b149      	cbz	r1, d72aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7296:	f003 fe3f 	bl	daf18 <strlen>
   d729a:	682b      	ldr	r3, [r5, #0]
   d729c:	4602      	mov	r2, r0
   d729e:	4621      	mov	r1, r4
   d72a0:	4628      	mov	r0, r5
   d72a2:	68db      	ldr	r3, [r3, #12]
    }
   d72a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d72a8:	4718      	bx	r3
    }
   d72aa:	bd70      	pop	{r4, r5, r6, pc}

000d72ac <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d72ac:	f000 bfe2 	b.w	d8274 <HAL_Pin_Map>

000d72b0 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d72b0:	f000 bfe0 	b.w	d8274 <HAL_Pin_Map>

000d72b4 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d72b4:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d72b6:	7803      	ldrb	r3, [r0, #0]
   d72b8:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d72ba:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d72bc:	d51e      	bpl.n	d72fc <_ZN8FatCache4syncEv+0x48>
   d72be:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d72c0:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d72c2:	f100 060c 	add.w	r6, r0, #12
   d72c6:	4632      	mov	r2, r6
   d72c8:	6818      	ldr	r0, [r3, #0]
   d72ca:	f000 fb97 	bl	d79fc <_ZN9SdSpiCard10writeBlockEmPKh>
   d72ce:	4605      	mov	r5, r0
   d72d0:	b908      	cbnz	r0, d72d6 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d72d2:	2500      	movs	r5, #0
   d72d4:	e013      	b.n	d72fe <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d72d6:	7823      	ldrb	r3, [r4, #0]
   d72d8:	079b      	lsls	r3, r3, #30
   d72da:	d404      	bmi.n	d72e6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d72dc:	7823      	ldrb	r3, [r4, #0]
   d72de:	f023 0301 	bic.w	r3, r3, #1
   d72e2:	7023      	strb	r3, [r4, #0]
   d72e4:	e00b      	b.n	d72fe <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d72e6:	6863      	ldr	r3, [r4, #4]
   d72e8:	68a0      	ldr	r0, [r4, #8]
   d72ea:	6919      	ldr	r1, [r3, #16]
   d72ec:	4632      	mov	r2, r6
   d72ee:	4401      	add	r1, r0
   d72f0:	6818      	ldr	r0, [r3, #0]
   d72f2:	f000 fb83 	bl	d79fc <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d72f6:	2800      	cmp	r0, #0
   d72f8:	d1f0      	bne.n	d72dc <_ZN8FatCache4syncEv+0x28>
   d72fa:	e7ea      	b.n	d72d2 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d72fc:	2501      	movs	r5, #1

fail:
  return false;
}
   d72fe:	4628      	mov	r0, r5
   d7300:	bd70      	pop	{r4, r5, r6, pc}

000d7302 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7302:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7304:	6883      	ldr	r3, [r0, #8]
   d7306:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7308:	4604      	mov	r4, r0
   d730a:	460e      	mov	r6, r1
   d730c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d730e:	d014      	beq.n	d733a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d7310:	f7ff ffd0 	bl	d72b4 <_ZN8FatCache4syncEv>
   d7314:	b908      	cbnz	r0, d731a <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d7316:	2000      	movs	r0, #0
   d7318:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d731a:	076b      	lsls	r3, r5, #29
   d731c:	d503      	bpl.n	d7326 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d731e:	2300      	movs	r3, #0
   d7320:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7322:	60a6      	str	r6, [r4, #8]
   d7324:	e009      	b.n	d733a <_ZN8FatCache4readEmh+0x38>
   d7326:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d7328:	f104 020c 	add.w	r2, r4, #12
   d732c:	4631      	mov	r1, r6
   d732e:	6818      	ldr	r0, [r3, #0]
   d7330:	f000 fada 	bl	d78e8 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7334:	2800      	cmp	r0, #0
   d7336:	d1f2      	bne.n	d731e <_ZN8FatCache4readEmh+0x1c>
   d7338:	e7ed      	b.n	d7316 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d733a:	7823      	ldrb	r3, [r4, #0]
   d733c:	4620      	mov	r0, r4
   d733e:	f005 0503 	and.w	r5, r5, #3
   d7342:	431d      	orrs	r5, r3
   d7344:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d7348:	bd70      	pop	{r4, r5, r6, pc}

000d734a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d734a:	7983      	ldrb	r3, [r0, #6]
   d734c:	6940      	ldr	r0, [r0, #20]
   d734e:	3902      	subs	r1, #2
   d7350:	4099      	lsls	r1, r3
}
   d7352:	4408      	add	r0, r1
   d7354:	4770      	bx	lr

000d7356 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7356:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d7358:	b570      	push	{r4, r5, r6, lr}
   d735a:	4605      	mov	r5, r0
   d735c:	460c      	mov	r4, r1
   d735e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7360:	d802      	bhi.n	d7368 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d7362:	f04f 30ff 	mov.w	r0, #4294967295
   d7366:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7368:	69c3      	ldr	r3, [r0, #28]
   d736a:	4299      	cmp	r1, r3
   d736c:	d8f9      	bhi.n	d7362 <_ZN9FatVolume6fatGetEmPm+0xc>
   d736e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7370:	2b20      	cmp	r3, #32
   d7372:	d110      	bne.n	d7396 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d7374:	6981      	ldr	r1, [r0, #24]
   d7376:	2202      	movs	r2, #2
   d7378:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d737c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7380:	f7ff ffbf 	bl	d7302 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7384:	2800      	cmp	r0, #0
   d7386:	d0ec      	beq.n	d7362 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d7388:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d738c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d7390:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d7394:	e00f      	b.n	d73b6 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d7396:	2b10      	cmp	r3, #16
   d7398:	d1e3      	bne.n	d7362 <_ZN9FatVolume6fatGetEmPm+0xc>
   d739a:	6983      	ldr	r3, [r0, #24]
   d739c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d73a0:	2202      	movs	r2, #2
   d73a2:	4419      	add	r1, r3
   d73a4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d73a8:	f7ff ffab 	bl	d7302 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d73ac:	2800      	cmp	r0, #0
   d73ae:	d0d8      	beq.n	d7362 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d73b0:	b2e4      	uxtb	r4, r4
   d73b2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d73b6:	69ea      	ldr	r2, [r5, #28]
   d73b8:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d73ba:	bf9a      	itte	ls
   d73bc:	6033      	strls	r3, [r6, #0]
  return 1;
   d73be:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d73c0:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d73c2:	bd70      	pop	{r4, r5, r6, pc}

000d73c4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d73c4:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d73c6:	b538      	push	{r3, r4, r5, lr}
   d73c8:	460c      	mov	r4, r1
   d73ca:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d73cc:	d801      	bhi.n	d73d2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d73ce:	2000      	movs	r0, #0
   d73d0:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d73d2:	69c3      	ldr	r3, [r0, #28]
   d73d4:	4299      	cmp	r1, r3
   d73d6:	d8fa      	bhi.n	d73ce <_ZN9FatVolume6fatPutEmm+0xa>
   d73d8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d73da:	2b20      	cmp	r3, #32
   d73dc:	d10e      	bne.n	d73fc <_ZN9FatVolume6fatPutEmm+0x38>
   d73de:	6981      	ldr	r1, [r0, #24]
   d73e0:	2203      	movs	r2, #3
   d73e2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d73e6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d73ea:	f7ff ff8a 	bl	d7302 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d73ee:	2800      	cmp	r0, #0
   d73f0:	d0ed      	beq.n	d73ce <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d73f2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d73f6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d73fa:	e00f      	b.n	d741c <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d73fc:	2b10      	cmp	r3, #16
   d73fe:	d1e6      	bne.n	d73ce <_ZN9FatVolume6fatPutEmm+0xa>
   d7400:	6983      	ldr	r3, [r0, #24]
   d7402:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7406:	2203      	movs	r2, #3
   d7408:	4419      	add	r1, r3
   d740a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d740e:	f7ff ff78 	bl	d7302 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d7412:	2800      	cmp	r0, #0
   d7414:	d0db      	beq.n	d73ce <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d7416:	b2e4      	uxtb	r4, r4
   d7418:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d741c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d741e:	bd38      	pop	{r3, r4, r5, pc}

000d7420 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d7424:	68c4      	ldr	r4, [r0, #12]
   d7426:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7428:	4605      	mov	r5, r0
   d742a:	460e      	mov	r6, r1
   d742c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d742e:	d207      	bcs.n	d7440 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d7430:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d7432:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d7434:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d7436:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7438:	429c      	cmp	r4, r3
   d743a:	d903      	bls.n	d7444 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d743c:	b9cf      	cbnz	r7, d7472 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d743e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d7440:	2701      	movs	r7, #1
   d7442:	e7f7      	b.n	d7434 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d7444:	42a6      	cmp	r6, r4
   d7446:	d014      	beq.n	d7472 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d7448:	aa01      	add	r2, sp, #4
   d744a:	4621      	mov	r1, r4
   d744c:	4628      	mov	r0, r5
   d744e:	f7ff ff82 	bl	d7356 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7452:	2800      	cmp	r0, #0
   d7454:	db0d      	blt.n	d7472 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d7456:	d0ed      	beq.n	d7434 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d7458:	9b01      	ldr	r3, [sp, #4]
   d745a:	2b00      	cmp	r3, #0
   d745c:	d1ea      	bne.n	d7434 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d745e:	b107      	cbz	r7, d7462 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d7460:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d7462:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d7466:	4621      	mov	r1, r4
   d7468:	4628      	mov	r0, r5
   d746a:	f7ff ffab 	bl	d73c4 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d746e:	4607      	mov	r7, r0
   d7470:	b908      	cbnz	r0, d7476 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d7472:	2700      	movs	r7, #0
   d7474:	e00b      	b.n	d748e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d7476:	b916      	cbnz	r6, d747e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d7478:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d747c:	e007      	b.n	d748e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d747e:	4622      	mov	r2, r4
   d7480:	4631      	mov	r1, r6
   d7482:	4628      	mov	r0, r5
   d7484:	f7ff ff9e 	bl	d73c4 <_ZN9FatVolume6fatPutEmm>
   d7488:	2800      	cmp	r0, #0
   d748a:	d1f5      	bne.n	d7478 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d748c:	e7f1      	b.n	d7472 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d748e:	4638      	mov	r0, r7
   d7490:	b002      	add	sp, #8
   d7492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7496 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d7496:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7498:	4605      	mov	r5, r0
   d749a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d749c:	aa01      	add	r2, sp, #4
   d749e:	4621      	mov	r1, r4
   d74a0:	4628      	mov	r0, r5
   d74a2:	f7ff ff58 	bl	d7356 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d74a6:	1e06      	subs	r6, r0, #0
   d74a8:	da01      	bge.n	d74ae <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d74aa:	2000      	movs	r0, #0
   d74ac:	e00f      	b.n	d74ce <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d74ae:	2200      	movs	r2, #0
   d74b0:	4621      	mov	r1, r4
   d74b2:	4628      	mov	r0, r5
   d74b4:	f7ff ff86 	bl	d73c4 <_ZN9FatVolume6fatPutEmm>
   d74b8:	2800      	cmp	r0, #0
   d74ba:	d0f6      	beq.n	d74aa <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d74bc:	68eb      	ldr	r3, [r5, #12]
   d74be:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d74c0:	bf9c      	itt	ls
   d74c2:	f104 34ff 	addls.w	r4, r4, #4294967295
   d74c6:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d74c8:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d74ca:	2e00      	cmp	r6, #0
   d74cc:	d1e6      	bne.n	d749c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d74ce:	b002      	add	sp, #8
   d74d0:	bd70      	pop	{r4, r5, r6, pc}

000d74d2 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d74d2:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d74d4:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d74d6:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d74d8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d74da:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d74dc:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d74e0:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d74e2:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d74e4:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d74e6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d74ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d74ec:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d74f0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d74f4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d74f8:	b1a1      	cbz	r1, d7524 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d74fa:	2904      	cmp	r1, #4
   d74fc:	d85d      	bhi.n	d75ba <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d74fe:	4611      	mov	r1, r2
   d7500:	3024      	adds	r0, #36	; 0x24
   d7502:	f7ff fefe 	bl	d7302 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7506:	2800      	cmp	r0, #0
   d7508:	d057      	beq.n	d75ba <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d750a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d750e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d7512:	065b      	lsls	r3, r3, #25
   d7514:	d151      	bne.n	d75ba <_ZN9FatVolume4initEh+0xe8>
   d7516:	351b      	adds	r5, #27
   d7518:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d751c:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d7520:	2d00      	cmp	r5, #0
   d7522:	d04a      	beq.n	d75ba <_ZN9FatVolume4initEh+0xe8>
   d7524:	2200      	movs	r2, #0
   d7526:	4629      	mov	r1, r5
   d7528:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d752c:	f7ff fee9 	bl	d7302 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d7530:	2800      	cmp	r0, #0
   d7532:	d042      	beq.n	d75ba <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d7534:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d753c:	d13d      	bne.n	d75ba <_ZN9FatVolume4initEh+0xe8>
   d753e:	7c03      	ldrb	r3, [r0, #16]
   d7540:	2b02      	cmp	r3, #2
   d7542:	d13a      	bne.n	d75ba <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d7544:	89c3      	ldrh	r3, [r0, #14]
   d7546:	2b00      	cmp	r3, #0
   d7548:	d037      	beq.n	d75ba <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d754a:	7b41      	ldrb	r1, [r0, #13]
   d754c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d754e:	1e4b      	subs	r3, r1, #1
   d7550:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d7552:	2300      	movs	r3, #0
   d7554:	71a3      	strb	r3, [r4, #6]
   d7556:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7558:	2301      	movs	r3, #1
   d755a:	428b      	cmp	r3, r1
   d755c:	d007      	beq.n	d756e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d755e:	3e01      	subs	r6, #1
   d7560:	d02b      	beq.n	d75ba <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7562:	79a2      	ldrb	r2, [r4, #6]
   d7564:	005b      	lsls	r3, r3, #1
   d7566:	3201      	adds	r2, #1
   d7568:	b2db      	uxtb	r3, r3
   d756a:	71a2      	strb	r2, [r4, #6]
   d756c:	e7f5      	b.n	d755a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d756e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d7570:	b902      	cbnz	r2, d7574 <_ZN9FatVolume4initEh+0xa2>
   d7572:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d7574:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7576:	89c6      	ldrh	r6, [r0, #14]
   d7578:	442e      	add	r6, r5
   d757a:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d757c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d7580:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d7582:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d7586:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7588:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d758c:	0152      	lsls	r2, r2, #5
   d758e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d7592:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d7596:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d7598:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d759c:	b903      	cbnz	r3, d75a0 <_ZN9FatVolume4initEh+0xce>
   d759e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d75a0:	1aad      	subs	r5, r5, r2
   d75a2:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d75a4:	79a5      	ldrb	r5, [r4, #6]
   d75a6:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d75aa:	1c6b      	adds	r3, r5, #1
   d75ac:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d75ae:	f640 73f4 	movw	r3, #4084	; 0xff4
   d75b2:	429d      	cmp	r5, r3
   d75b4:	d803      	bhi.n	d75be <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d75b6:	230c      	movs	r3, #12
   d75b8:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d75ba:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d75bc:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d75be:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d75c2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d75c4:	bf85      	ittet	hi
   d75c6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d75c8:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d75ca:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d75cc:	2320      	movhi	r3, #32
   d75ce:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d75d0:	2001      	movs	r0, #1

fail:
  return false;
}
   d75d2:	bd70      	pop	{r4, r5, r6, pc}

000d75d4 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d75d4:	f000 be4e 	b.w	d8274 <HAL_Pin_Map>

000d75d8 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d75d8:	f000 be4c 	b.w	d8274 <HAL_Pin_Map>

000d75dc <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d75dc:	f000 be4a 	b.w	d8274 <HAL_Pin_Map>

000d75e0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d75e0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d75e2:	4c0e      	ldr	r4, [pc, #56]	; (d761c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d75e4:	460e      	mov	r6, r1
   d75e6:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d75e8:	f000 ff04 	bl	d83f4 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d75ec:	6823      	ldr	r3, [r4, #0]
   d75ee:	1ac0      	subs	r0, r0, r3
   d75f0:	4b0b      	ldr	r3, [pc, #44]	; (d7620 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d75f2:	4298      	cmp	r0, r3
   d75f4:	d908      	bls.n	d7608 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d75f6:	f000 ff05 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d75fa:	4b0a      	ldr	r3, [pc, #40]	; (d7624 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d75fc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d75fe:	f001 f945 	bl	d888c <spark_process>
   d7602:	f000 fef7 	bl	d83f4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d7606:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7608:	f000 fefc 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d760c:	b280      	uxth	r0, r0
   d760e:	1b80      	subs	r0, r0, r6
}
   d7610:	42a8      	cmp	r0, r5
   d7612:	bfd4      	ite	le
   d7614:	2000      	movle	r0, #0
   d7616:	2001      	movgt	r0, #1
   d7618:	bd70      	pop	{r4, r5, r6, pc}
   d761a:	bf00      	nop
   d761c:	2003e084 	.word	0x2003e084
   d7620:	000186a0 	.word	0x000186a0
   d7624:	2003e4f4 	.word	0x2003e4f4

000d7628 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7628:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d762a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d762c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d762e:	b94d      	cbnz	r5, d7644 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7630:	6840      	ldr	r0, [r0, #4]
   d7632:	f000 fa7d 	bl	d7b30 <_ZN14SdSpiAltDriver8activateEv>
   d7636:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7638:	4629      	mov	r1, r5
   d763a:	7d18      	ldrb	r0, [r3, #20]
   d763c:	f002 fdb9 	bl	da1b2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7640:	2301      	movs	r3, #1
   d7642:	7223      	strb	r3, [r4, #8]
   d7644:	bd38      	pop	{r3, r4, r5, pc}

000d7646 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7646:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7648:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d764a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d764c:	b16b      	cbz	r3, d766a <_ZN9SdSpiCard7spiStopEv+0x24>
   d764e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d7650:	2101      	movs	r1, #1
   d7652:	7d18      	ldrb	r0, [r3, #20]
   d7654:	f002 fdad 	bl	da1b2 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7658:	21ff      	movs	r1, #255	; 0xff
   d765a:	6860      	ldr	r0, [r4, #4]
   d765c:	f000 fa9a 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d7660:	6860      	ldr	r0, [r4, #4]
   d7662:	f000 fa79 	bl	d7b58 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7666:	2300      	movs	r3, #0
   d7668:	7223      	strb	r3, [r4, #8]
   d766a:	bd10      	pop	{r4, pc}

000d766c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d766e:	4604      	mov	r4, r0
   d7670:	460d      	mov	r5, r1
   d7672:	4616      	mov	r6, r2
   d7674:	f000 fec6 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7678:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d767a:	6860      	ldr	r0, [r4, #4]
   d767c:	f000 fa6f 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d7680:	28ff      	cmp	r0, #255	; 0xff
   d7682:	7260      	strb	r0, [r4, #9]
   d7684:	d109      	bne.n	d769a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d7686:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d768a:	4639      	mov	r1, r7
   d768c:	4620      	mov	r0, r4
   d768e:	f7ff ffa7 	bl	d75e0 <_ZN9SdSpiCard10isTimedOutEtt>
   d7692:	2800      	cmp	r0, #0
   d7694:	d0f1      	beq.n	d767a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7696:	2355      	movs	r3, #85	; 0x55
   d7698:	e00b      	b.n	d76b2 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d769a:	28fe      	cmp	r0, #254	; 0xfe
   d769c:	d001      	beq.n	d76a2 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d769e:	2350      	movs	r3, #80	; 0x50
   d76a0:	e007      	b.n	d76b2 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d76a2:	4632      	mov	r2, r6
   d76a4:	4629      	mov	r1, r5
   d76a6:	6860      	ldr	r0, [r4, #4]
   d76a8:	f000 fa5e 	bl	d7b68 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d76ac:	7260      	strb	r0, [r4, #9]
   d76ae:	b130      	cbz	r0, d76be <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d76b0:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d76b2:	4620      	mov	r0, r4
   d76b4:	7023      	strb	r3, [r4, #0]
   d76b6:	f7ff ffc6 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76ba:	2000      	movs	r0, #0
}
   d76bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d76be:	6860      	ldr	r0, [r4, #4]
   d76c0:	f000 fa4d 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
   d76c4:	6860      	ldr	r0, [r4, #4]
   d76c6:	f000 fa4a 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
   d76ca:	2001      	movs	r0, #1
   d76cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76ce <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d76ce:	b570      	push	{r4, r5, r6, lr}
   d76d0:	4604      	mov	r4, r0
   d76d2:	460e      	mov	r6, r1
   d76d4:	f000 fe96 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
   d76d8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d76da:	4632      	mov	r2, r6
   d76dc:	4629      	mov	r1, r5
   d76de:	4620      	mov	r0, r4
   d76e0:	f7ff ff7e 	bl	d75e0 <_ZN9SdSpiCard10isTimedOutEtt>
   d76e4:	b930      	cbnz	r0, d76f4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d76e6:	6860      	ldr	r0, [r4, #4]
   d76e8:	f000 fa39 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d76ec:	28ff      	cmp	r0, #255	; 0xff
   d76ee:	d1f4      	bne.n	d76da <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d76f0:	2001      	movs	r0, #1
   d76f2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d76f4:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d76f6:	bd70      	pop	{r4, r5, r6, pc}

000d76f8 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d76f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d76fa:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d76fc:	9201      	str	r2, [sp, #4]
   d76fe:	4604      	mov	r4, r0
   d7700:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d7702:	b90b      	cbnz	r3, d7708 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7704:	f7ff ff90 	bl	d7628 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d7708:	b125      	cbz	r5, d7714 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d770a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d770e:	4620      	mov	r0, r4
   d7710:	f7ff ffdd 	bl	d76ce <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7714:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7718:	6860      	ldr	r0, [r4, #4]
   d771a:	f000 fa3b 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>
   d771e:	f10d 0607 	add.w	r6, sp, #7
   d7722:	f10d 0703 	add.w	r7, sp, #3
   d7726:	f816 1901 	ldrb.w	r1, [r6], #-1
   d772a:	6860      	ldr	r0, [r4, #4]
   d772c:	f000 fa32 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d7730:	42be      	cmp	r6, r7
   d7732:	d1f8      	bne.n	d7726 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7734:	2d00      	cmp	r5, #0
   d7736:	bf0c      	ite	eq
   d7738:	2195      	moveq	r1, #149	; 0x95
   d773a:	2187      	movne	r1, #135	; 0x87
   d773c:	6860      	ldr	r0, [r4, #4]
   d773e:	f000 fa29 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7742:	6860      	ldr	r0, [r4, #4]
   d7744:	f000 fa0b 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
   d7748:	250b      	movs	r5, #11
   d774a:	6860      	ldr	r0, [r4, #4]
   d774c:	f000 fa07 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7750:	0603      	lsls	r3, r0, #24
   d7752:	7260      	strb	r0, [r4, #9]
   d7754:	d503      	bpl.n	d775e <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d7756:	3d01      	subs	r5, #1
   d7758:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d775c:	d1f5      	bne.n	d774a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d775e:	b003      	add	sp, #12
   d7760:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7762 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7762:	b570      	push	{r4, r5, r6, lr}
   d7764:	4604      	mov	r4, r0
   d7766:	460d      	mov	r5, r1
   d7768:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d776a:	2137      	movs	r1, #55	; 0x37
   d776c:	2200      	movs	r2, #0
   d776e:	f7ff ffc3 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7772:	4632      	mov	r2, r6
   d7774:	4629      	mov	r1, r5
   d7776:	4620      	mov	r0, r4
  }
   d7778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d777c:	f7ff bfbc 	b.w	d76f8 <_ZN9SdSpiCard11cardCommandEhm>

000d7780 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7784:	2500      	movs	r5, #0
   d7786:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7788:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d778a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d778c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d778e:	4604      	mov	r4, r0
   d7790:	4690      	mov	r8, r2
   d7792:	461e      	mov	r6, r3
   d7794:	f000 fe36 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d7798:	4641      	mov	r1, r8
   d779a:	4607      	mov	r7, r0
   d779c:	6860      	ldr	r0, [r4, #4]
   d779e:	f000 f9cb 	bl	d7b38 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d77a2:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d77a4:	4a4f      	ldr	r2, [pc, #316]	; (d78e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d77a6:	721d      	strb	r5, [r3, #8]
   d77a8:	f04f 0801 	mov.w	r8, #1
   d77ac:	60da      	str	r2, [r3, #12]
   d77ae:	745d      	strb	r5, [r3, #17]
   d77b0:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d77b4:	4620      	mov	r0, r4
   d77b6:	f7ff ff37 	bl	d7628 <_ZN9SdSpiCard8spiStartEv>
   d77ba:	6863      	ldr	r3, [r4, #4]
   d77bc:	4641      	mov	r1, r8
   d77be:	7d18      	ldrb	r0, [r3, #20]
   d77c0:	f002 fcf7 	bl	da1b2 <digitalWrite>
   d77c4:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d77c6:	21ff      	movs	r1, #255	; 0xff
   d77c8:	6860      	ldr	r0, [r4, #4]
   d77ca:	3d01      	subs	r5, #1
   d77cc:	f000 f9e2 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d77d0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d77d4:	d1f7      	bne.n	d77c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d77d6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d77d8:	4629      	mov	r1, r5
   d77da:	7d18      	ldrb	r0, [r3, #20]
   d77dc:	f002 fce9 	bl	da1b2 <digitalWrite>
   d77e0:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d77e2:	2200      	movs	r2, #0
   d77e4:	4611      	mov	r1, r2
   d77e6:	4620      	mov	r0, r4
   d77e8:	f7ff ff86 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
   d77ec:	2801      	cmp	r0, #1
   d77ee:	4680      	mov	r8, r0
   d77f0:	d012      	beq.n	d7818 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d77f2:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d77f4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d77f8:	d101      	bne.n	d77fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d77fa:	2320      	movs	r3, #32
   d77fc:	e057      	b.n	d78ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d77fe:	21fd      	movs	r1, #253	; 0xfd
   d7800:	6860      	ldr	r0, [r4, #4]
   d7802:	f000 f9c7 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>
   d7806:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d780a:	6860      	ldr	r0, [r4, #4]
   d780c:	f000 f9a7 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d7810:	f1b8 0801 	subs.w	r8, r8, #1
   d7814:	d1f9      	bne.n	d780a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d7816:	e7e4      	b.n	d77e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7818:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d781c:	2108      	movs	r1, #8
   d781e:	4620      	mov	r0, r4
   d7820:	f7ff ff6a 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7824:	2805      	cmp	r0, #5
   d7826:	d102      	bne.n	d782e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7828:	f884 800a 	strb.w	r8, [r4, #10]
   d782c:	e00f      	b.n	d784e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d782e:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7830:	6860      	ldr	r0, [r4, #4]
   d7832:	f000 f994 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
   d7836:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7838:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d783c:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d783e:	d1f7      	bne.n	d7830 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d7840:	28aa      	cmp	r0, #170	; 0xaa
   d7842:	d102      	bne.n	d784a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7844:	2302      	movs	r3, #2
   d7846:	72a3      	strb	r3, [r4, #10]
   d7848:	e001      	b.n	d784e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d784a:	2325      	movs	r3, #37	; 0x25
   d784c:	e02f      	b.n	d78ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d784e:	7aa3      	ldrb	r3, [r4, #10]
   d7850:	2b02      	cmp	r3, #2
   d7852:	bf0c      	ite	eq
   d7854:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d7858:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d785a:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d785c:	462a      	mov	r2, r5
   d785e:	2129      	movs	r1, #41	; 0x29
   d7860:	4620      	mov	r0, r4
   d7862:	f7ff ff7e 	bl	d7762 <_ZN9SdSpiCard8cardAcmdEhm>
   d7866:	4602      	mov	r2, r0
   d7868:	b148      	cbz	r0, d787e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d786a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d786e:	4639      	mov	r1, r7
   d7870:	4620      	mov	r0, r4
   d7872:	f7ff feb5 	bl	d75e0 <_ZN9SdSpiCard10isTimedOutEtt>
   d7876:	2800      	cmp	r0, #0
   d7878:	d0f0      	beq.n	d785c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d787a:	2343      	movs	r3, #67	; 0x43
   d787c:	e017      	b.n	d78ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d787e:	7aa3      	ldrb	r3, [r4, #10]
   d7880:	2b02      	cmp	r3, #2
   d7882:	d00e      	beq.n	d78a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d7884:	4620      	mov	r0, r4
   d7886:	f7ff fede 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d788a:	6863      	ldr	r3, [r4, #4]
   d788c:	68b0      	ldr	r0, [r6, #8]
   d788e:	7934      	ldrb	r4, [r6, #4]
   d7890:	7b31      	ldrb	r1, [r6, #12]
   d7892:	7b72      	ldrb	r2, [r6, #13]
   d7894:	745a      	strb	r2, [r3, #17]
   d7896:	60d8      	str	r0, [r3, #12]
   d7898:	721c      	strb	r4, [r3, #8]
   d789a:	7419      	strb	r1, [r3, #16]
  return true;
   d789c:	2001      	movs	r0, #1
   d789e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d78a2:	213a      	movs	r1, #58	; 0x3a
   d78a4:	4620      	mov	r0, r4
   d78a6:	f7ff ff27 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
   d78aa:	b138      	cbz	r0, d78bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d78ac:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d78ae:	4620      	mov	r0, r4
   d78b0:	7023      	strb	r3, [r4, #0]
   d78b2:	f7ff fec8 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d78b6:	2000      	movs	r0, #0
}
   d78b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d78bc:	6860      	ldr	r0, [r4, #4]
   d78be:	f000 f94e 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d78c2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d78c6:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d78c8:	bf04      	itt	eq
   d78ca:	2303      	moveq	r3, #3
   d78cc:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d78ce:	6860      	ldr	r0, [r4, #4]
   d78d0:	f000 f945 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
   d78d4:	6860      	ldr	r0, [r4, #4]
   d78d6:	f000 f942 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
   d78da:	6860      	ldr	r0, [r4, #4]
   d78dc:	f000 f93f 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
   d78e0:	e7d0      	b.n	d7884 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d78e2:	bf00      	nop
   d78e4:	0003d090 	.word	0x0003d090

000d78e8 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d78e8:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d78ea:	7a83      	ldrb	r3, [r0, #10]
   d78ec:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d78ee:	bf18      	it	ne
   d78f0:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d78f2:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d78f4:	460a      	mov	r2, r1
   d78f6:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d78f8:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d78fa:	f7ff fefd 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
   d78fe:	b110      	cbz	r0, d7906 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7900:	2330      	movs	r3, #48	; 0x30
   d7902:	7023      	strb	r3, [r4, #0]
   d7904:	e00b      	b.n	d791e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d7906:	4629      	mov	r1, r5
   d7908:	f44f 7200 	mov.w	r2, #512	; 0x200
   d790c:	4620      	mov	r0, r4
   d790e:	f7ff fead 	bl	d766c <_ZN9SdSpiCard8readDataEPhj>
   d7912:	4605      	mov	r5, r0
   d7914:	b118      	cbz	r0, d791e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d7916:	4620      	mov	r0, r4
   d7918:	f7ff fe95 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d791c:	e003      	b.n	d7926 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d791e:	4620      	mov	r0, r4
   d7920:	f7ff fe91 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7924:	2500      	movs	r5, #0
}
   d7926:	4628      	mov	r0, r5
   d7928:	bd38      	pop	{r3, r4, r5, pc}

000d792a <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d792a:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d792c:	7a83      	ldrb	r3, [r0, #10]
   d792e:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7930:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7932:	bf18      	it	ne
   d7934:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7936:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7938:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d793a:	f7ff fedd 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
   d793e:	b130      	cbz	r0, d794e <_ZN9SdSpiCard9readStartEm+0x24>
   d7940:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d7942:	4620      	mov	r0, r4
   d7944:	7023      	strb	r3, [r4, #0]
   d7946:	f7ff fe7e 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d794a:	2000      	movs	r0, #0
   d794c:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d794e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7950:	bd10      	pop	{r4, pc}

000d7952 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7952:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7954:	2200      	movs	r2, #0
   d7956:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7958:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d795a:	f7ff fecd 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
   d795e:	b130      	cbz	r0, d796e <_ZN9SdSpiCard8readStopEv+0x1c>
   d7960:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d7962:	4620      	mov	r0, r4
   d7964:	7023      	strb	r3, [r4, #0]
   d7966:	f7ff fe6e 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d796a:	2000      	movs	r0, #0
   d796c:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d796e:	4620      	mov	r0, r4
   d7970:	f7ff fe69 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7974:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7976:	bd10      	pop	{r4, pc}

000d7978 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d797a:	4605      	mov	r5, r0
   d797c:	4616      	mov	r6, r2
   d797e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7980:	f7ff ffd3 	bl	d792a <_ZN9SdSpiCard9readStartEm>
   d7984:	b198      	cbz	r0, d79ae <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d7986:	2400      	movs	r4, #0
   d7988:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d798a:	429f      	cmp	r7, r3
   d798c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d7990:	d908      	bls.n	d79a4 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d7992:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7996:	4628      	mov	r0, r5
   d7998:	f7ff fe68 	bl	d766c <_ZN9SdSpiCard8readDataEPhj>
   d799c:	3401      	adds	r4, #1
   d799e:	2800      	cmp	r0, #0
   d79a0:	d1f2      	bne.n	d7988 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d79a2:	e004      	b.n	d79ae <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d79a4:	4628      	mov	r0, r5
}
   d79a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d79aa:	f7ff bfd2 	b.w	d7952 <_ZN9SdSpiCard8readStopEv>
}
   d79ae:	2000      	movs	r0, #0
   d79b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d79b2 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d79b2:	b538      	push	{r3, r4, r5, lr}
   d79b4:	4604      	mov	r4, r0
   d79b6:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d79b8:	6840      	ldr	r0, [r0, #4]
   d79ba:	f000 f8eb 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d79be:	f44f 7200 	mov.w	r2, #512	; 0x200
   d79c2:	4629      	mov	r1, r5
   d79c4:	6860      	ldr	r0, [r4, #4]
   d79c6:	f000 f8e9 	bl	d7b9c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d79ca:	21ff      	movs	r1, #255	; 0xff
   d79cc:	6860      	ldr	r0, [r4, #4]
   d79ce:	f000 f8e1 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>
   d79d2:	21ff      	movs	r1, #255	; 0xff
   d79d4:	6860      	ldr	r0, [r4, #4]
   d79d6:	f000 f8dd 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d79da:	6860      	ldr	r0, [r4, #4]
   d79dc:	f000 f8bf 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d79e0:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d79e2:	f000 001f 	and.w	r0, r0, #31
   d79e6:	2805      	cmp	r0, #5
   d79e8:	d006      	beq.n	d79f8 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d79ea:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d79ec:	4620      	mov	r0, r4
   d79ee:	7023      	strb	r3, [r4, #0]
   d79f0:	f7ff fe29 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d79f4:	2000      	movs	r0, #0
   d79f6:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d79f8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d79fa:	bd38      	pop	{r3, r4, r5, pc}

000d79fc <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d79fc:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d79fe:	7a83      	ldrb	r3, [r0, #10]
   d7a00:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7a02:	bf18      	it	ne
   d7a04:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7a06:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7a08:	460a      	mov	r2, r1
   d7a0a:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7a0c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7a0e:	f7ff fe73 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7a12:	4606      	mov	r6, r0
   d7a14:	b108      	cbz	r0, d7a1a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d7a16:	2332      	movs	r3, #50	; 0x32
   d7a18:	e01d      	b.n	d7a56 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d7a1a:	462a      	mov	r2, r5
   d7a1c:	21fe      	movs	r1, #254	; 0xfe
   d7a1e:	4620      	mov	r0, r4
   d7a20:	f7ff ffc7 	bl	d79b2 <_ZN9SdSpiCard9writeDataEhPKh>
   d7a24:	b1c0      	cbz	r0, d7a58 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a26:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7a2a:	4620      	mov	r0, r4
   d7a2c:	f7ff fe4f 	bl	d76ce <_ZN9SdSpiCard11waitNotBusyEt>
   d7a30:	4605      	mov	r5, r0
   d7a32:	b908      	cbnz	r0, d7a38 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d7a34:	235a      	movs	r3, #90	; 0x5a
   d7a36:	e00e      	b.n	d7a56 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7a38:	4632      	mov	r2, r6
   d7a3a:	210d      	movs	r1, #13
   d7a3c:	4620      	mov	r0, r4
   d7a3e:	f7ff fe5b 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7a42:	b938      	cbnz	r0, d7a54 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7a44:	6860      	ldr	r0, [r4, #4]
   d7a46:	f000 f88a 	bl	d7b5e <_ZN14SdSpiAltDriver7receiveEv>
   d7a4a:	b918      	cbnz	r0, d7a54 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d7a4c:	4620      	mov	r0, r4
   d7a4e:	f7ff fdfa 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7a52:	e005      	b.n	d7a60 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7a54:	2329      	movs	r3, #41	; 0x29
   d7a56:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d7a58:	4620      	mov	r0, r4
   d7a5a:	f7ff fdf4 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a5e:	2500      	movs	r5, #0
}
   d7a60:	4628      	mov	r0, r5
   d7a62:	bd70      	pop	{r4, r5, r6, pc}

000d7a64 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7a64:	b538      	push	{r3, r4, r5, lr}
   d7a66:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a68:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7a6c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a6e:	f7ff fe2e 	bl	d76ce <_ZN9SdSpiCard11waitNotBusyEt>
   d7a72:	b910      	cbnz	r0, d7a7a <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d7a74:	235b      	movs	r3, #91	; 0x5b
   d7a76:	7023      	strb	r3, [r4, #0]
   d7a78:	e005      	b.n	d7a86 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7a7a:	462a      	mov	r2, r5
   d7a7c:	21fc      	movs	r1, #252	; 0xfc
   d7a7e:	4620      	mov	r0, r4
   d7a80:	f7ff ff97 	bl	d79b2 <_ZN9SdSpiCard9writeDataEhPKh>
   d7a84:	b918      	cbnz	r0, d7a8e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7a86:	4620      	mov	r0, r4
   d7a88:	f7ff fddd 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a8c:	2000      	movs	r0, #0
}
   d7a8e:	bd38      	pop	{r3, r4, r5, pc}

000d7a90 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7a90:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7a92:	7a83      	ldrb	r3, [r0, #10]
   d7a94:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7a96:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7a98:	bf18      	it	ne
   d7a9a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7a9c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7a9e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7aa0:	f7ff fe2a 	bl	d76f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7aa4:	b130      	cbz	r0, d7ab4 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7aa6:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7aa8:	4620      	mov	r0, r4
   d7aaa:	7023      	strb	r3, [r4, #0]
   d7aac:	f7ff fdcb 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7ab0:	2000      	movs	r0, #0
   d7ab2:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d7ab4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7ab6:	bd10      	pop	{r4, pc}

000d7ab8 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7ab8:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7aba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7abe:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7ac0:	f7ff fe05 	bl	d76ce <_ZN9SdSpiCard11waitNotBusyEt>
   d7ac4:	4605      	mov	r5, r0
   d7ac6:	b120      	cbz	r0, d7ad2 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7ac8:	21fd      	movs	r1, #253	; 0xfd
   d7aca:	6860      	ldr	r0, [r4, #4]
   d7acc:	f000 f862 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEh>
   d7ad0:	e001      	b.n	d7ad6 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7ad2:	2356      	movs	r3, #86	; 0x56
   d7ad4:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d7ad6:	4620      	mov	r0, r4
   d7ad8:	f7ff fdb5 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7adc:	4628      	mov	r0, r5
   d7ade:	bd38      	pop	{r3, r4, r5, pc}

000d7ae0 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ae2:	4605      	mov	r5, r0
   d7ae4:	4616      	mov	r6, r2
   d7ae6:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7ae8:	f7ff ffd2 	bl	d7a90 <_ZN9SdSpiCard10writeStartEm>
   d7aec:	b170      	cbz	r0, d7b0c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7aee:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7af0:	42bc      	cmp	r4, r7
   d7af2:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7af6:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7af8:	d004      	beq.n	d7b04 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7afa:	f7ff ffb3 	bl	d7a64 <_ZN9SdSpiCard9writeDataEPKh>
   d7afe:	b128      	cbz	r0, d7b0c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7b00:	3401      	adds	r4, #1
   d7b02:	e7f5      	b.n	d7af0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d7b04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7b08:	f7ff bfd6 	b.w	d7ab8 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d7b0c:	4628      	mov	r0, r5
   d7b0e:	f7ff fd9a 	bl	d7646 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7b12:	2000      	movs	r0, #0
   d7b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b16 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d7b16:	f000 bbad 	b.w	d8274 <HAL_Pin_Map>

000d7b1a <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d7b1a:	f000 bbab 	b.w	d8274 <HAL_Pin_Map>

000d7b1e <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7b1e:	f000 bba9 	b.w	d8274 <HAL_Pin_Map>
	...

000d7b24 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7b24:	4b01      	ldr	r3, [pc, #4]	; (d7b2c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7b26:	2201      	movs	r2, #1
   d7b28:	701a      	strb	r2, [r3, #0]
   d7b2a:	4770      	bx	lr
   d7b2c:	2003e088 	.word	0x2003e088

000d7b30 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7b30:	1d01      	adds	r1, r0, #4
   d7b32:	6800      	ldr	r0, [r0, #0]
   d7b34:	f000 bfa4 	b.w	d8a80 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d7b38 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7b38:	b510      	push	{r4, lr}
   d7b3a:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7b3c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7b3e:	6800      	ldr	r0, [r0, #0]
   d7b40:	f000 ff52 	bl	d89e8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7b44:	7d20      	ldrb	r0, [r4, #20]
   d7b46:	2101      	movs	r1, #1
   d7b48:	f002 fb22 	bl	da190 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7b4c:	7d20      	ldrb	r0, [r4, #20]
   d7b4e:	2101      	movs	r1, #1
}
   d7b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d7b54:	f002 bb2d 	b.w	da1b2 <digitalWrite>

000d7b58 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7b58:	6800      	ldr	r0, [r0, #0]
   d7b5a:	f000 bf78 	b.w	d8a4e <_ZN8SPIClass14endTransactionEv>

000d7b5e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7b5e:	21ff      	movs	r1, #255	; 0xff
   d7b60:	6800      	ldr	r0, [r0, #0]
   d7b62:	f001 b853 	b.w	d8c0c <_ZN8SPIClass8transferEh>
	...

000d7b68 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b6a:	4b08      	ldr	r3, [pc, #32]	; (d7b8c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7b6c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7b6e:	2500      	movs	r5, #0
   d7b70:	4c07      	ldr	r4, [pc, #28]	; (d7b90 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b72:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7b74:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b76:	4613      	mov	r3, r2
   d7b78:	460a      	mov	r2, r1
   d7b7a:	4629      	mov	r1, r5
   d7b7c:	f001 f84c 	bl	d8c18 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7b80:	7823      	ldrb	r3, [r4, #0]
   d7b82:	2b00      	cmp	r3, #0
   d7b84:	d0fc      	beq.n	d7b80 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7b86:	2000      	movs	r0, #0
   d7b88:	b003      	add	sp, #12
   d7b8a:	bd30      	pop	{r4, r5, pc}
   d7b8c:	000d7b25 	.word	0x000d7b25
   d7b90:	2003e088 	.word	0x2003e088

000d7b94 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7b94:	6800      	ldr	r0, [r0, #0]
   d7b96:	f001 b839 	b.w	d8c0c <_ZN8SPIClass8transferEh>
	...

000d7b9c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7b9e:	4b07      	ldr	r3, [pc, #28]	; (d7bbc <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7ba0:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7ba2:	2500      	movs	r5, #0
   d7ba4:	4c06      	ldr	r4, [pc, #24]	; (d7bc0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7ba6:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7ba8:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7baa:	4613      	mov	r3, r2
   d7bac:	462a      	mov	r2, r5
   d7bae:	f001 f833 	bl	d8c18 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d7bb2:	7823      	ldrb	r3, [r4, #0]
   d7bb4:	2b00      	cmp	r3, #0
   d7bb6:	d0fc      	beq.n	d7bb2 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7bb8:	b003      	add	sp, #12
   d7bba:	bd30      	pop	{r4, r5, pc}
   d7bbc:	000d7b25 	.word	0x000d7b25
   d7bc0:	2003e088 	.word	0x2003e088

000d7bc4 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d7bc4:	f000 bb56 	b.w	d8274 <HAL_Pin_Map>

000d7bc8 <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d7bc8:	4b02      	ldr	r3, [pc, #8]	; (d7bd4 <_ZN5RFM694isr0Ev+0xc>)
   d7bca:	6818      	ldr	r0, [r3, #0]
   d7bcc:	6803      	ldr	r3, [r0, #0]
   d7bce:	681b      	ldr	r3, [r3, #0]
   d7bd0:	4718      	bx	r3
   d7bd2:	bf00      	nop
   d7bd4:	2003e0a0 	.word	0x2003e0a0

000d7bd8 <_ZN5RFM698unselectEv>:
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d7bd8:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d7bda:	2101      	movs	r1, #1
   d7bdc:	7900      	ldrb	r0, [r0, #4]
   d7bde:	f002 fae8 	bl	da1b2 <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d7be2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d7be6:	f001 bd17 	b.w	d9618 <_Z10interruptsv>
	...

000d7bec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d7bec:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   d7bee:	4c08      	ldr	r4, [pc, #32]	; (d7c10 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x24>)
   d7bf0:	6823      	ldr	r3, [r4, #0]
   d7bf2:	07db      	lsls	r3, r3, #31
   d7bf4:	d40a      	bmi.n	d7c0c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d7bf6:	4620      	mov	r0, r4
   d7bf8:	f7fc fa55 	bl	d40a6 <__cxa_guard_acquire>
   d7bfc:	b130      	cbz	r0, d7c0c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d7bfe:	2101      	movs	r1, #1
   d7c00:	4804      	ldr	r0, [pc, #16]	; (d7c14 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d7c02:	f000 fee7 	bl	d89d4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7c06:	4620      	mov	r0, r4
   d7c08:	f7fc fa52 	bl	d40b0 <__cxa_guard_release>
        return instance;
    }
   d7c0c:	4801      	ldr	r0, [pc, #4]	; (d7c14 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d7c0e:	bd10      	pop	{r4, pc}
   d7c10:	2003e08c 	.word	0x2003e08c
   d7c14:	2003e090 	.word	0x2003e090

000d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d7c18:	b510      	push	{r4, lr}
   d7c1a:	4604      	mov	r4, r0
        return instance().transfer(data);
   d7c1c:	f7ff ffe6 	bl	d7bec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d7c20:	4621      	mov	r1, r4
    }
   d7c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d7c26:	f000 bff1 	b.w	d8c0c <_ZN8SPIClass8transferEh>

000d7c2a <_ZN5RFM696selectEv>:
  SPI1.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d7c2a:	b510      	push	{r4, lr}
   d7c2c:	4604      	mov	r4, r0
  noInterrupts();
   d7c2e:	f001 fcf1 	bl	d9614 <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d7c32:	f7ff ffdb 	bl	d7bec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d7c36:	2100      	movs	r1, #0
   d7c38:	f000 fef8 	bl	d8a2c <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d7c3c:	f7ff ffd6 	bl	d7bec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d7c40:	2101      	movs	r1, #1
   d7c42:	f000 fee2 	bl	d8a0a <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d7c46:	f7ff ffd1 	bl	d7bec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d7c4a:	2118      	movs	r1, #24
   d7c4c:	f000 ffba 	bl	d8bc4 <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d7c50:	7920      	ldrb	r0, [r4, #4]
   d7c52:	2100      	movs	r1, #0
}
   d7c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d7c58:	f002 baab 	b.w	da1b2 <digitalWrite>

000d7c5c <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d7c5c:	b538      	push	{r3, r4, r5, lr}
   d7c5e:	460c      	mov	r4, r1
   d7c60:	4605      	mov	r5, r0
  select();
   d7c62:	f7ff ffe2 	bl	d7c2a <_ZN5RFM696selectEv>
  SPI1.transfer(addr & 0x7F);
   d7c66:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d7c6a:	f7ff ffd5 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  byte regval = SPI1.transfer(0);
   d7c6e:	2000      	movs	r0, #0
   d7c70:	f7ff ffd2 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7c74:	4604      	mov	r4, r0
  unselect();
   d7c76:	4628      	mov	r0, r5
   d7c78:	f7ff ffae 	bl	d7bd8 <_ZN5RFM698unselectEv>
  return regval;
}
   d7c7c:	4620      	mov	r0, r4
   d7c7e:	bd38      	pop	{r3, r4, r5, pc}

000d7c80 <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d7c80:	b570      	push	{r4, r5, r6, lr}
   d7c82:	460e      	mov	r6, r1
   d7c84:	4615      	mov	r5, r2
   d7c86:	4604      	mov	r4, r0
  select();
   d7c88:	f7ff ffcf 	bl	d7c2a <_ZN5RFM696selectEv>
  SPI1.transfer(addr | 0x80);
   d7c8c:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d7c90:	f7ff ffc2 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(value);
   d7c94:	4628      	mov	r0, r5
   d7c96:	f7ff ffbf 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  unselect();
   d7c9a:	4620      	mov	r0, r4
}
   d7c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI1.transfer(addr | 0x80);
  SPI1.transfer(value);
  unselect();
   d7ca0:	f7ff bf9a 	b.w	d7bd8 <_ZN5RFM698unselectEv>

000d7ca4 <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d7ca4:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d7ca6:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d7ca8:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d7caa:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d7cac:	f7ff ffd6 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7cb0:	7a62      	ldrb	r2, [r4, #9]
   d7cb2:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d7cb6:	2a1f      	cmp	r2, #31
   d7cb8:	bf94      	ite	ls
   d7cba:	4302      	orrls	r2, r0
   d7cbc:	f040 021f 	orrhi.w	r2, r0, #31
   d7cc0:	2111      	movs	r1, #17
   d7cc2:	4620      	mov	r0, r4
}
   d7cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d7cc8:	f7ff bfda 	b.w	d7c80 <_ZN5RFM698writeRegEhh>

000d7ccc <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d7ccc:	b510      	push	{r4, lr}
   d7cce:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d7cd0:	b149      	cbz	r1, d7ce6 <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d7cd2:	2201      	movs	r2, #1
   d7cd4:	2123      	movs	r1, #35	; 0x23
   d7cd6:	f7ff ffd3 	bl	d7c80 <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d7cda:	2123      	movs	r1, #35	; 0x23
   d7cdc:	4620      	mov	r0, r4
   d7cde:	f7ff ffbd 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7ce2:	0783      	lsls	r3, r0, #30
   d7ce4:	d5f9      	bpl.n	d7cda <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d7ce6:	2124      	movs	r1, #36	; 0x24
   d7ce8:	4620      	mov	r0, r4
   d7cea:	f7ff ffb7 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7cee:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d7cf0:	1040      	asrs	r0, r0, #1
}
   d7cf2:	bd10      	pop	{r4, pc}

000d7cf4 <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d7cf4:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d7cf6:	2900      	cmp	r1, #0
   d7cf8:	bf14      	ite	ne
   d7cfa:	225d      	movne	r2, #93	; 0x5d
   d7cfc:	2255      	moveq	r2, #85	; 0x55
   d7cfe:	460c      	mov	r4, r1
   d7d00:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d7d02:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d7d04:	f7ff ffbc 	bl	d7c80 <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d7d08:	2c00      	cmp	r4, #0
   d7d0a:	4628      	mov	r0, r5
   d7d0c:	bf14      	ite	ne
   d7d0e:	227c      	movne	r2, #124	; 0x7c
   d7d10:	2270      	moveq	r2, #112	; 0x70
   d7d12:	215c      	movs	r1, #92	; 0x5c
}
   d7d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d7d18:	f7ff bfb2 	b.w	d7c80 <_ZN5RFM698writeRegEhh>

000d7d1c <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d7d1c:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d7d1e:	4d28      	ldr	r5, [pc, #160]	; (d7dc0 <_ZN5RFM697setModeEh+0xa4>)
   d7d20:	782b      	ldrb	r3, [r5, #0]
   d7d22:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d7d24:	4604      	mov	r4, r0
   d7d26:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d7d28:	d049      	beq.n	d7dbe <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d7d2a:	2904      	cmp	r1, #4
   d7d2c:	d847      	bhi.n	d7dbe <_ZN5RFM697setModeEh+0xa2>
   d7d2e:	e8df f001 	tbb	[pc, r1]
   d7d32:	2c34      	.short	0x2c34
   d7d34:	1224      	.short	0x1224
   d7d36:	03          	.byte	0x03
   d7d37:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d7d38:	2101      	movs	r1, #1
   d7d3a:	f7ff ff8f 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7d3e:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7d42:	f042 020c 	orr.w	r2, r2, #12
   d7d46:	2101      	movs	r1, #1
   d7d48:	4620      	mov	r0, r4
   d7d4a:	f7ff ff99 	bl	d7c80 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d7d4e:	7aa3      	ldrb	r3, [r4, #10]
   d7d50:	b363      	cbz	r3, d7dac <_ZN5RFM697setModeEh+0x90>
   d7d52:	2101      	movs	r1, #1
   d7d54:	e00d      	b.n	d7d72 <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d7d56:	2101      	movs	r1, #1
   d7d58:	f7ff ff80 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7d5c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7d60:	f042 0210 	orr.w	r2, r2, #16
   d7d64:	2101      	movs	r1, #1
   d7d66:	4620      	mov	r0, r4
   d7d68:	f7ff ff8a 	bl	d7c80 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d7d6c:	7aa3      	ldrb	r3, [r4, #10]
   d7d6e:	b1eb      	cbz	r3, d7dac <_ZN5RFM697setModeEh+0x90>
   d7d70:	2100      	movs	r1, #0
   d7d72:	4620      	mov	r0, r4
   d7d74:	f7ff ffbe 	bl	d7cf4 <_ZN5RFM6916setHighPowerRegsEb>
   d7d78:	e018      	b.n	d7dac <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d7d7a:	2101      	movs	r1, #1
   d7d7c:	f7ff ff6e 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7d80:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7d84:	f042 0208 	orr.w	r2, r2, #8
   d7d88:	e00c      	b.n	d7da4 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d7d8a:	2101      	movs	r1, #1
   d7d8c:	f7ff ff66 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7d90:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7d94:	f042 0204 	orr.w	r2, r2, #4
   d7d98:	e004      	b.n	d7da4 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d7d9a:	2101      	movs	r1, #1
   d7d9c:	f7ff ff5e 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7da0:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7da4:	2101      	movs	r1, #1
   d7da6:	4620      	mov	r0, r4
   d7da8:	f7ff ff6a 	bl	d7c80 <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d7dac:	782b      	ldrb	r3, [r5, #0]
   d7dae:	b92b      	cbnz	r3, d7dbc <_ZN5RFM697setModeEh+0xa0>
   d7db0:	2127      	movs	r1, #39	; 0x27
   d7db2:	4620      	mov	r0, r4
   d7db4:	f7ff ff52 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7db8:	0603      	lsls	r3, r0, #24
   d7dba:	d5f7      	bpl.n	d7dac <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d7dbc:	702e      	strb	r6, [r5, #0]
   d7dbe:	bd70      	pop	{r4, r5, r6, pc}
   d7dc0:	2003e0e4 	.word	0x2003e0e4

000d7dc4 <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d7dc4:	4a15      	ldr	r2, [pc, #84]	; (d7e1c <_ZN5RFM6912receiveBeginEv+0x58>)
   d7dc6:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d7dc8:	b510      	push	{r4, lr}
  DATALEN = 0;
   d7dca:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d7dcc:	4a14      	ldr	r2, [pc, #80]	; (d7e20 <_ZN5RFM6912receiveBeginEv+0x5c>)
   d7dce:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d7dd0:	4a14      	ldr	r2, [pc, #80]	; (d7e24 <_ZN5RFM6912receiveBeginEv+0x60>)
   d7dd2:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d7dd4:	4a14      	ldr	r2, [pc, #80]	; (d7e28 <_ZN5RFM6912receiveBeginEv+0x64>)
   d7dd6:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d7dd8:	4a14      	ldr	r2, [pc, #80]	; (d7e2c <_ZN5RFM6912receiveBeginEv+0x68>)
   d7dda:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d7ddc:	4a14      	ldr	r2, [pc, #80]	; (d7e30 <_ZN5RFM6912receiveBeginEv+0x6c>)
   d7dde:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d7de0:	4a14      	ldr	r2, [pc, #80]	; (d7e34 <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d7de2:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d7de4:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d7de6:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d7de8:	f7ff ff38 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7dec:	0743      	lsls	r3, r0, #29
   d7dee:	d50a      	bpl.n	d7e06 <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d7df0:	213d      	movs	r1, #61	; 0x3d
   d7df2:	4620      	mov	r0, r4
   d7df4:	f7ff ff32 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7df8:	f040 0204 	orr.w	r2, r0, #4
   d7dfc:	b2d2      	uxtb	r2, r2
   d7dfe:	213d      	movs	r1, #61	; 0x3d
   d7e00:	4620      	mov	r0, r4
   d7e02:	f7ff ff3d 	bl	d7c80 <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d7e06:	4620      	mov	r0, r4
   d7e08:	2125      	movs	r1, #37	; 0x25
   d7e0a:	2240      	movs	r2, #64	; 0x40
   d7e0c:	f7ff ff38 	bl	d7c80 <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d7e10:	4620      	mov	r0, r4
   d7e12:	2103      	movs	r1, #3
}
   d7e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d7e18:	f7ff bf80 	b.w	d7d1c <_ZN5RFM697setModeEh>
   d7e1c:	2003e0e3 	.word	0x2003e0e3
   d7e20:	2003e09e 	.word	0x2003e09e
   d7e24:	2003e09c 	.word	0x2003e09c
   d7e28:	2003e0a4 	.word	0x2003e0a4
   d7e2c:	2003e09d 	.word	0x2003e09d
   d7e30:	2003e0a5 	.word	0x2003e0a5
   d7e34:	2003e098 	.word	0x2003e098

000d7e38 <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d7e38:	b510      	push	{r4, lr}
   d7e3a:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d7e3c:	f001 fbea 	bl	d9614 <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d7e40:	4b0b      	ldr	r3, [pc, #44]	; (d7e70 <_ZN5RFM6911receiveDoneEv+0x38>)
   d7e42:	781a      	ldrb	r2, [r3, #0]
   d7e44:	2a03      	cmp	r2, #3
   d7e46:	d102      	bne.n	d7e4e <_ZN5RFM6911receiveDoneEv+0x16>
   d7e48:	4a0a      	ldr	r2, [pc, #40]	; (d7e74 <_ZN5RFM6911receiveDoneEv+0x3c>)
   d7e4a:	7812      	ldrb	r2, [r2, #0]
   d7e4c:	b952      	cbnz	r2, d7e64 <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d7e4e:	781b      	ldrb	r3, [r3, #0]
   d7e50:	2b03      	cmp	r3, #3
   d7e52:	d102      	bne.n	d7e5a <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d7e54:	f001 fbe0 	bl	d9618 <_Z10interruptsv>
   d7e58:	e002      	b.n	d7e60 <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d7e5a:	4620      	mov	r0, r4
   d7e5c:	f7ff ffb2 	bl	d7dc4 <_ZN5RFM6912receiveBeginEv>
  return false;
   d7e60:	2000      	movs	r0, #0
   d7e62:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d7e64:	4620      	mov	r0, r4
   d7e66:	2101      	movs	r1, #1
   d7e68:	f7ff ff58 	bl	d7d1c <_ZN5RFM697setModeEh>
    return true;
   d7e6c:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d7e6e:	bd10      	pop	{r4, pc}
   d7e70:	2003e0e4 	.word	0x2003e0e4
   d7e74:	2003e0a4 	.word	0x2003e0a4

000d7e78 <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d7e78:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d7e7a:	b510      	push	{r4, lr}
   d7e7c:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d7e7e:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d7e80:	bf14      	ite	ne
   d7e82:	220f      	movne	r2, #15
   d7e84:	221a      	moveq	r2, #26
   d7e86:	2113      	movs	r1, #19
   d7e88:	f7ff fefa 	bl	d7c80 <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d7e8c:	7aa3      	ldrb	r3, [r4, #10]
   d7e8e:	b143      	cbz	r3, d7ea2 <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d7e90:	2111      	movs	r1, #17
   d7e92:	4620      	mov	r0, r4
   d7e94:	f7ff fee2 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7e98:	f000 021f 	and.w	r2, r0, #31
   d7e9c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d7ea0:	e002      	b.n	d7ea8 <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d7ea2:	7a62      	ldrb	r2, [r4, #9]
   d7ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d7ea8:	4620      	mov	r0, r4
   d7eaa:	2111      	movs	r1, #17
}
   d7eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d7eb0:	f7ff bee6 	b.w	d7c80 <_ZN5RFM698writeRegEhh>

000d7eb4 <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d7eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d7eb8:	4b3d      	ldr	r3, [pc, #244]	; (d7fb0 <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d7eba:	781b      	ldrb	r3, [r3, #0]
   d7ebc:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d7ebe:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d7ec0:	d114      	bne.n	d7eec <_ZN5RFM6916interruptHandlerEv+0x38>
   d7ec2:	2128      	movs	r1, #40	; 0x28
   d7ec4:	f7ff feca 	bl	d7c5c <_ZN5RFM697readRegEh>
   d7ec8:	0743      	lsls	r3, r0, #29
   d7eca:	d417      	bmi.n	d7efc <_ZN5RFM6916interruptHandlerEv+0x48>
   d7ecc:	e00e      	b.n	d7eec <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d7ece:	7813      	ldrb	r3, [r2, #0]
   d7ed0:	2b3c      	cmp	r3, #60	; 0x3c
   d7ed2:	d804      	bhi.n	d7ede <_ZN5RFM6916interruptHandlerEv+0x2a>
   d7ed4:	7813      	ldrb	r3, [r2, #0]
   d7ed6:	4a37      	ldr	r2, [pc, #220]	; (d7fb4 <_ZN5RFM6916interruptHandlerEv+0x100>)
   d7ed8:	b2db      	uxtb	r3, r3
   d7eda:	2100      	movs	r1, #0
   d7edc:	54d1      	strb	r1, [r2, r3]
    unselect();
   d7ede:	4620      	mov	r0, r4
   d7ee0:	f7ff fe7a 	bl	d7bd8 <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d7ee4:	2103      	movs	r1, #3
   d7ee6:	4620      	mov	r0, r4
   d7ee8:	f7ff ff18 	bl	d7d1c <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d7eec:	2100      	movs	r1, #0
   d7eee:	4620      	mov	r0, r4
   d7ef0:	f7ff feec 	bl	d7ccc <_ZN5RFM698readRSSIEb>
   d7ef4:	4b30      	ldr	r3, [pc, #192]	; (d7fb8 <_ZN5RFM6916interruptHandlerEv+0x104>)
   d7ef6:	6018      	str	r0, [r3, #0]
   d7ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d7efc:	2101      	movs	r1, #1
   d7efe:	4620      	mov	r0, r4
   d7f00:	f7ff ff0c 	bl	d7d1c <_ZN5RFM697setModeEh>
    select();
   d7f04:	4620      	mov	r0, r4
   d7f06:	f7ff fe90 	bl	d7c2a <_ZN5RFM696selectEv>
    SPI1.transfer(REG_FIFO & 0x7f);
   d7f0a:	2000      	movs	r0, #0
   d7f0c:	f7ff fe84 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    PAYLOADLEN = SPI1.transfer(0);
   d7f10:	2000      	movs	r0, #0
   d7f12:	f7ff fe81 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7f16:	4d29      	ldr	r5, [pc, #164]	; (d7fbc <_ZN5RFM6916interruptHandlerEv+0x108>)
   d7f18:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d7f1a:	782b      	ldrb	r3, [r5, #0]
   d7f1c:	2b42      	cmp	r3, #66	; 0x42
   d7f1e:	d814      	bhi.n	d7f4a <_ZN5RFM6916interruptHandlerEv+0x96>
   d7f20:	782b      	ldrb	r3, [r5, #0]
   d7f22:	b2db      	uxtb	r3, r3
    TARGETID = SPI1.transfer(0);
   d7f24:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d7f26:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI1.transfer(0);
   d7f28:	f7ff fe76 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7f2c:	4b24      	ldr	r3, [pc, #144]	; (d7fc0 <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d7f2e:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
   d7f30:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d7f32:	b932      	cbnz	r2, d7f42 <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d7f34:	781a      	ldrb	r2, [r3, #0]
   d7f36:	79e1      	ldrb	r1, [r4, #7]
   d7f38:	4291      	cmp	r1, r2
   d7f3a:	d002      	beq.n	d7f42 <_ZN5RFM6916interruptHandlerEv+0x8e>
   d7f3c:	781b      	ldrb	r3, [r3, #0]
   d7f3e:	2bff      	cmp	r3, #255	; 0xff
   d7f40:	d105      	bne.n	d7f4e <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d7f42:	782b      	ldrb	r3, [r5, #0]
   d7f44:	2b02      	cmp	r3, #2
   d7f46:	d902      	bls.n	d7f4e <_ZN5RFM6916interruptHandlerEv+0x9a>
   d7f48:	e00b      	b.n	d7f62 <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d7f4a:	2342      	movs	r3, #66	; 0x42
   d7f4c:	e7ea      	b.n	d7f24 <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d7f4e:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d7f50:	2300      	movs	r3, #0
   d7f52:	702b      	strb	r3, [r5, #0]
      unselect();
   d7f54:	f7ff fe40 	bl	d7bd8 <_ZN5RFM698unselectEv>
      receiveBegin();
   d7f58:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d7f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d7f5e:	f7ff bf31 	b.w	d7dc4 <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d7f62:	4b16      	ldr	r3, [pc, #88]	; (d7fbc <_ZN5RFM6916interruptHandlerEv+0x108>)
   d7f64:	4e17      	ldr	r6, [pc, #92]	; (d7fc4 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d7f66:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
   d7f68:	4f12      	ldr	r7, [pc, #72]	; (d7fb4 <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d7f6a:	3b03      	subs	r3, #3
   d7f6c:	b2db      	uxtb	r3, r3
    SENDERID = SPI1.transfer(0);
   d7f6e:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d7f70:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI1.transfer(0);
   d7f72:	f7ff fe51 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7f76:	4b14      	ldr	r3, [pc, #80]	; (d7fc8 <_ZN5RFM6916interruptHandlerEv+0x114>)
   d7f78:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI1.transfer(0);
   d7f7a:	2000      	movs	r0, #0
   d7f7c:	f7ff fe4c 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d7f80:	4a12      	ldr	r2, [pc, #72]	; (d7fcc <_ZN5RFM6916interruptHandlerEv+0x118>)
   d7f82:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d7f86:	b2db      	uxtb	r3, r3
   d7f88:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d7f8a:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d7f8e:	4b10      	ldr	r3, [pc, #64]	; (d7fd0 <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d7f90:	b2c0      	uxtb	r0, r0
   d7f92:	7018      	strb	r0, [r3, #0]
   d7f94:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d7f96:	7831      	ldrb	r1, [r6, #0]
   d7f98:	4a0a      	ldr	r2, [pc, #40]	; (d7fc4 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d7f9a:	b2dd      	uxtb	r5, r3
   d7f9c:	428d      	cmp	r5, r1
   d7f9e:	f103 0801 	add.w	r8, r3, #1
   d7fa2:	d294      	bcs.n	d7ece <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI1.transfer(0);
   d7fa4:	2000      	movs	r0, #0
   d7fa6:	f7ff fe37 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d7faa:	4643      	mov	r3, r8
    {
      DATA[i] = SPI1.transfer(0);
   d7fac:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d7fae:	e7f2      	b.n	d7f96 <_ZN5RFM6916interruptHandlerEv+0xe2>
   d7fb0:	2003e0e4 	.word	0x2003e0e4
   d7fb4:	2003e0a6 	.word	0x2003e0a6
   d7fb8:	2003e098 	.word	0x2003e098
   d7fbc:	2003e0a4 	.word	0x2003e0a4
   d7fc0:	2003e09c 	.word	0x2003e09c
   d7fc4:	2003e0e3 	.word	0x2003e0e3
   d7fc8:	2003e09e 	.word	0x2003e09e
   d7fcc:	2003e0a5 	.word	0x2003e0a5
   d7fd0:	2003e09d 	.word	0x2003e09d

000d7fd4 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d7fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7fd6:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d7fd8:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d7fda:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d7fdc:	f7ff fe9e 	bl	d7d1c <_ZN5RFM697setModeEh>
  if (key!=0)
   d7fe0:	b18d      	cbz	r5, d8006 <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d7fe2:	4620      	mov	r0, r4
   d7fe4:	f7ff fe21 	bl	d7c2a <_ZN5RFM696selectEv>
    SPI1.transfer(REG_AESKEY1 | 0x80);
   d7fe8:	20be      	movs	r0, #190	; 0xbe
   d7fea:	f7ff fe15 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7fee:	1e6e      	subs	r6, r5, #1
   d7ff0:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
   d7ff4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d7ff8:	f7ff fe0e 	bl	d7c18 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d7ffc:	42be      	cmp	r6, r7
   d7ffe:	d1f9      	bne.n	d7ff4 <_ZN5RFM697encryptEPKc+0x20>
      SPI1.transfer(key[i]);
    unselect();
   d8000:	4620      	mov	r0, r4
   d8002:	f7ff fde9 	bl	d7bd8 <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d8006:	213d      	movs	r1, #61	; 0x3d
   d8008:	4620      	mov	r0, r4
   d800a:	f7ff fe27 	bl	d7c5c <_ZN5RFM697readRegEh>
   d800e:	f020 0001 	bic.w	r0, r0, #1
   d8012:	2d00      	cmp	r5, #0
   d8014:	bf0c      	ite	eq
   d8016:	4602      	moveq	r2, r0
   d8018:	f040 0201 	orrne.w	r2, r0, #1
   d801c:	b2d2      	uxtb	r2, r2
   d801e:	4620      	mov	r0, r4
   d8020:	213d      	movs	r1, #61	; 0x3d
}
   d8022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d8026:	f7ff be2b 	b.w	d7c80 <_ZN5RFM698writeRegEhh>
	...

000d802c <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d802c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d802e:	b08f      	sub	sp, #60	; 0x3c
   d8030:	460d      	mov	r5, r1
   d8032:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d8034:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d8036:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d8038:	a803      	add	r0, sp, #12
   d803a:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d803c:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d803e:	f002 ff25 	bl	dae8c <memset>
   d8042:	2301      	movs	r3, #1
   d8044:	f88d 300c 	strb.w	r3, [sp, #12]
   d8048:	2303      	movs	r3, #3
   d804a:	f88d 3010 	strb.w	r3, [sp, #16]
   d804e:	f88d 3015 	strb.w	r3, [sp, #21]
   d8052:	2306      	movs	r3, #6
   d8054:	f88d 3016 	strb.w	r3, [sp, #22]
   d8058:	2333      	movs	r3, #51	; 0x33
   d805a:	f88d 3017 	strb.w	r3, [sp, #23]
   d805e:	2307      	movs	r3, #7
   d8060:	f88d 3018 	strb.w	r3, [sp, #24]
   d8064:	2308      	movs	r3, #8
   d8066:	f88d 301a 	strb.w	r3, [sp, #26]
   d806a:	2309      	movs	r3, #9
   d806c:	f88d 301c 	strb.w	r3, [sp, #28]
   d8070:	2319      	movs	r3, #25
   d8072:	f88d 301e 	strb.w	r3, [sp, #30]
   d8076:	2325      	movs	r3, #37	; 0x25
   d8078:	f88d 3020 	strb.w	r3, [sp, #32]
   d807c:	2329      	movs	r3, #41	; 0x29
   d807e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d8082:	23dc      	movs	r3, #220	; 0xdc
   d8084:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d8088:	232e      	movs	r3, #46	; 0x2e
   d808a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d808e:	2388      	movs	r3, #136	; 0x88
   d8090:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d8094:	232f      	movs	r3, #47	; 0x2f
   d8096:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d809a:	232d      	movs	r3, #45	; 0x2d
   d809c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d80a0:	2337      	movs	r3, #55	; 0x37
   d80a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d80a6:	2390      	movs	r3, #144	; 0x90
   d80a8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d80ac:	2338      	movs	r3, #56	; 0x38
   d80ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d80b2:	233c      	movs	r3, #60	; 0x3c
   d80b4:	2204      	movs	r2, #4
   d80b6:	2102      	movs	r1, #2
   d80b8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d80bc:	238f      	movs	r3, #143	; 0x8f
   d80be:	f88d 200d 	strb.w	r2, [sp, #13]
   d80c2:	f88d 100e 	strb.w	r1, [sp, #14]
   d80c6:	f88d 1011 	strb.w	r1, [sp, #17]
   d80ca:	f88d 2012 	strb.w	r2, [sp, #18]
   d80ce:	2105      	movs	r1, #5
   d80d0:	2240      	movs	r2, #64	; 0x40
   d80d2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d80d6:	233d      	movs	r3, #61	; 0x3d
   d80d8:	f88d 2013 	strb.w	r2, [sp, #19]
   d80dc:	f88d 1014 	strb.w	r1, [sp, #20]
   d80e0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d80e4:	2142      	movs	r1, #66	; 0x42
   d80e6:	2230      	movs	r2, #48	; 0x30
   d80e8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d80ec:	2312      	movs	r3, #18
   d80ee:	f88d 101f 	strb.w	r1, [sp, #31]
   d80f2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d80f6:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d80fa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d80fe:	236f      	movs	r3, #111	; 0x6f
   d8100:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d8104:	2d1f      	cmp	r5, #31
   d8106:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d810a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d810e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d8112:	d006      	beq.n	d8122 <_ZN5RFM6910initializeEhhh+0xf6>
   d8114:	2d2b      	cmp	r5, #43	; 0x2b
   d8116:	d006      	beq.n	d8126 <_ZN5RFM6910initializeEhhh+0xfa>
   d8118:	2d56      	cmp	r5, #86	; 0x56
   d811a:	bf0c      	ite	eq
   d811c:	22d9      	moveq	r2, #217	; 0xd9
   d811e:	22e4      	movne	r2, #228	; 0xe4
   d8120:	e002      	b.n	d8128 <_ZN5RFM6910initializeEhhh+0xfc>
   d8122:	224e      	movs	r2, #78	; 0x4e
   d8124:	e000      	b.n	d8128 <_ZN5RFM6910initializeEhhh+0xfc>
   d8126:	226c      	movs	r2, #108	; 0x6c
   d8128:	2d1f      	cmp	r5, #31
   d812a:	f88d 2019 	strb.w	r2, [sp, #25]
   d812e:	d006      	beq.n	d813e <_ZN5RFM6910initializeEhhh+0x112>
   d8130:	2d2b      	cmp	r5, #43	; 0x2b
   d8132:	d006      	beq.n	d8142 <_ZN5RFM6910initializeEhhh+0x116>
   d8134:	2d56      	cmp	r5, #86	; 0x56
   d8136:	bf14      	ite	ne
   d8138:	22c0      	movne	r2, #192	; 0xc0
   d813a:	2200      	moveq	r2, #0
   d813c:	e002      	b.n	d8144 <_ZN5RFM6910initializeEhhh+0x118>
   d813e:	22c0      	movs	r2, #192	; 0xc0
   d8140:	e000      	b.n	d8144 <_ZN5RFM6910initializeEhhh+0x118>
   d8142:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d8144:	2101      	movs	r1, #1
   d8146:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d8148:	f88d 201b 	strb.w	r2, [sp, #27]
   d814c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d8150:	f002 f81e 	bl	da190 <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d8154:	f7ff fd4a 	bl	d7bec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d8158:	f000 fc46 	bl	d89e8 <_ZN8SPIClass5beginEv>
   d815c:	f000 f952 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
   d8160:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d8162:	22aa      	movs	r2, #170	; 0xaa
   d8164:	212f      	movs	r1, #47	; 0x2f
   d8166:	4620      	mov	r0, r4
   d8168:	f7ff fd8a 	bl	d7c80 <_ZN5RFM698writeRegEhh>
   d816c:	212f      	movs	r1, #47	; 0x2f
   d816e:	4620      	mov	r0, r4
   d8170:	f7ff fd74 	bl	d7c5c <_ZN5RFM697readRegEh>
   d8174:	28aa      	cmp	r0, #170	; 0xaa
   d8176:	d004      	beq.n	d8182 <_ZN5RFM6910initializeEhhh+0x156>
   d8178:	f000 f944 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
   d817c:	1b40      	subs	r0, r0, r5
   d817e:	2831      	cmp	r0, #49	; 0x31
   d8180:	d9ef      	bls.n	d8162 <_ZN5RFM6910initializeEhhh+0x136>
   d8182:	f000 f93f 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d8186:	1b40      	subs	r0, r0, r5
   d8188:	2831      	cmp	r0, #49	; 0x31
   d818a:	d82d      	bhi.n	d81e8 <_ZN5RFM6910initializeEhhh+0x1bc>
   d818c:	f000 f93a 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
   d8190:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d8192:	2255      	movs	r2, #85	; 0x55
   d8194:	212f      	movs	r1, #47	; 0x2f
   d8196:	4620      	mov	r0, r4
   d8198:	f7ff fd72 	bl	d7c80 <_ZN5RFM698writeRegEhh>
   d819c:	212f      	movs	r1, #47	; 0x2f
   d819e:	4620      	mov	r0, r4
   d81a0:	f7ff fd5c 	bl	d7c5c <_ZN5RFM697readRegEh>
   d81a4:	2855      	cmp	r0, #85	; 0x55
   d81a6:	d021      	beq.n	d81ec <_ZN5RFM6910initializeEhhh+0x1c0>
   d81a8:	f000 f92c 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
   d81ac:	1b40      	subs	r0, r0, r5
   d81ae:	2831      	cmp	r0, #49	; 0x31
   d81b0:	d9ef      	bls.n	d8192 <_ZN5RFM6910initializeEhhh+0x166>
   d81b2:	e01b      	b.n	d81ec <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d81b4:	2100      	movs	r1, #0
   d81b6:	4620      	mov	r0, r4
   d81b8:	f7ff ff0c 	bl	d7fd4 <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d81bc:	7aa1      	ldrb	r1, [r4, #10]
   d81be:	4620      	mov	r0, r4
   d81c0:	f7ff fe5a 	bl	d7e78 <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d81c4:	2101      	movs	r1, #1
   d81c6:	4620      	mov	r0, r4
   d81c8:	f7ff fda8 	bl	d7d1c <_ZN5RFM697setModeEh>
   d81cc:	f000 f91a 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
   d81d0:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d81d2:	2127      	movs	r1, #39	; 0x27
   d81d4:	4620      	mov	r0, r4
   d81d6:	f7ff fd41 	bl	d7c5c <_ZN5RFM697readRegEh>
   d81da:	0603      	lsls	r3, r0, #24
   d81dc:	d51b      	bpl.n	d8216 <_ZN5RFM6910initializeEhhh+0x1ea>
   d81de:	f000 f911 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d81e2:	1b40      	subs	r0, r0, r5
   d81e4:	2831      	cmp	r0, #49	; 0x31
   d81e6:	d91c      	bls.n	d8222 <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d81e8:	2000      	movs	r0, #0
   d81ea:	e028      	b.n	d823e <_ZN5RFM6910initializeEhhh+0x212>
   d81ec:	f000 f90a 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d81f0:	1b40      	subs	r0, r0, r5
   d81f2:	2831      	cmp	r0, #49	; 0x31
   d81f4:	d8f8      	bhi.n	d81e8 <_ZN5RFM6910initializeEhhh+0x1bc>
   d81f6:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d81f8:	b2eb      	uxtb	r3, r5
   d81fa:	aa0e      	add	r2, sp, #56	; 0x38
   d81fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8200:	3501      	adds	r5, #1
   d8202:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d8206:	29ff      	cmp	r1, #255	; 0xff
   d8208:	d0d4      	beq.n	d81b4 <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d820a:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d820e:	4620      	mov	r0, r4
   d8210:	f7ff fd36 	bl	d7c80 <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d8214:	e7f0      	b.n	d81f8 <_ZN5RFM6910initializeEhhh+0x1cc>
   d8216:	f000 f8f5 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d821a:	1b40      	subs	r0, r0, r5
   d821c:	2831      	cmp	r0, #49	; 0x31
   d821e:	d9d8      	bls.n	d81d2 <_ZN5RFM6910initializeEhhh+0x1a6>
   d8220:	e7dd      	b.n	d81de <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d8222:	2300      	movs	r3, #0
   d8224:	9300      	str	r3, [sp, #0]
   d8226:	79a0      	ldrb	r0, [r4, #6]
   d8228:	4906      	ldr	r1, [pc, #24]	; (d8244 <_ZN5RFM6910initializeEhhh+0x218>)
   d822a:	f04f 33ff 	mov.w	r3, #4294967295
   d822e:	2201      	movs	r2, #1
   d8230:	f001 f9ae 	bl	d9590 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d8234:	2800      	cmp	r0, #0
   d8236:	d0d7      	beq.n	d81e8 <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d8238:	4b03      	ldr	r3, [pc, #12]	; (d8248 <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d823a:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d823c:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d823e:	b00f      	add	sp, #60	; 0x3c
   d8240:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8242:	bf00      	nop
   d8244:	000d7bc9 	.word	0x000d7bc9
   d8248:	2003e0a0 	.word	0x2003e0a0

000d824c <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d824c:	f000 b812 	b.w	d8274 <HAL_Pin_Map>

000d8250 <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d8250:	f000 b810 	b.w	d8274 <HAL_Pin_Map>

000d8254 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8254:	b508      	push	{r3, lr}
   d8256:	4b02      	ldr	r3, [pc, #8]	; (d8260 <netdb_freeaddrinfo+0xc>)
   d8258:	681b      	ldr	r3, [r3, #0]
   d825a:	689b      	ldr	r3, [r3, #8]
   d825c:	9301      	str	r3, [sp, #4]
   d825e:	bd08      	pop	{r3, pc}
   d8260:	00030268 	.word	0x00030268

000d8264 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8264:	b508      	push	{r3, lr}
   d8266:	4b02      	ldr	r3, [pc, #8]	; (d8270 <netdb_getaddrinfo+0xc>)
   d8268:	681b      	ldr	r3, [r3, #0]
   d826a:	68db      	ldr	r3, [r3, #12]
   d826c:	9301      	str	r3, [sp, #4]
   d826e:	bd08      	pop	{r3, pc}
   d8270:	00030268 	.word	0x00030268

000d8274 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d8274:	b508      	push	{r3, lr}
   d8276:	4b02      	ldr	r3, [pc, #8]	; (d8280 <HAL_Pin_Map+0xc>)
   d8278:	681b      	ldr	r3, [r3, #0]
   d827a:	681b      	ldr	r3, [r3, #0]
   d827c:	9301      	str	r3, [sp, #4]
   d827e:	bd08      	pop	{r3, pc}
   d8280:	0003022c 	.word	0x0003022c

000d8284 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8284:	b508      	push	{r3, lr}
   d8286:	4b02      	ldr	r3, [pc, #8]	; (d8290 <HAL_Pin_Mode+0xc>)
   d8288:	681b      	ldr	r3, [r3, #0]
   d828a:	689b      	ldr	r3, [r3, #8]
   d828c:	9301      	str	r3, [sp, #4]
   d828e:	bd08      	pop	{r3, pc}
   d8290:	0003022c 	.word	0x0003022c

000d8294 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8294:	b508      	push	{r3, lr}
   d8296:	4b02      	ldr	r3, [pc, #8]	; (d82a0 <HAL_Get_Pin_Mode+0xc>)
   d8298:	681b      	ldr	r3, [r3, #0]
   d829a:	68db      	ldr	r3, [r3, #12]
   d829c:	9301      	str	r3, [sp, #4]
   d829e:	bd08      	pop	{r3, pc}
   d82a0:	0003022c 	.word	0x0003022c

000d82a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d82a4:	b508      	push	{r3, lr}
   d82a6:	4b02      	ldr	r3, [pc, #8]	; (d82b0 <HAL_GPIO_Write+0xc>)
   d82a8:	681b      	ldr	r3, [r3, #0]
   d82aa:	691b      	ldr	r3, [r3, #16]
   d82ac:	9301      	str	r3, [sp, #4]
   d82ae:	bd08      	pop	{r3, pc}
   d82b0:	0003022c 	.word	0x0003022c

000d82b4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d82b4:	b508      	push	{r3, lr}
   d82b6:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <HAL_GPIO_Read+0xc>)
   d82b8:	681b      	ldr	r3, [r3, #0]
   d82ba:	695b      	ldr	r3, [r3, #20]
   d82bc:	9301      	str	r3, [sp, #4]
   d82be:	bd08      	pop	{r3, pc}
   d82c0:	0003022c 	.word	0x0003022c

000d82c4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d82c4:	b508      	push	{r3, lr}
   d82c6:	4b02      	ldr	r3, [pc, #8]	; (d82d0 <HAL_Interrupts_Attach+0xc>)
   d82c8:	681b      	ldr	r3, [r3, #0]
   d82ca:	699b      	ldr	r3, [r3, #24]
   d82cc:	9301      	str	r3, [sp, #4]
   d82ce:	bd08      	pop	{r3, pc}
   d82d0:	0003022c 	.word	0x0003022c

000d82d4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d82d4:	b508      	push	{r3, lr}
   d82d6:	4b02      	ldr	r3, [pc, #8]	; (d82e0 <HAL_Interrupts_Detach+0xc>)
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	69db      	ldr	r3, [r3, #28]
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	bd08      	pop	{r3, pc}
   d82e0:	0003022c 	.word	0x0003022c

000d82e4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d82e4:	b508      	push	{r3, lr}
   d82e6:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <HAL_Interrupts_Enable_All+0xc>)
   d82e8:	681b      	ldr	r3, [r3, #0]
   d82ea:	6a1b      	ldr	r3, [r3, #32]
   d82ec:	9301      	str	r3, [sp, #4]
   d82ee:	bd08      	pop	{r3, pc}
   d82f0:	0003022c 	.word	0x0003022c

000d82f4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d82f4:	b508      	push	{r3, lr}
   d82f6:	4b02      	ldr	r3, [pc, #8]	; (d8300 <HAL_Interrupts_Disable_All+0xc>)
   d82f8:	681b      	ldr	r3, [r3, #0]
   d82fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82fc:	9301      	str	r3, [sp, #4]
   d82fe:	bd08      	pop	{r3, pc}
   d8300:	0003022c 	.word	0x0003022c

000d8304 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b02      	ldr	r3, [pc, #8]	; (d8310 <HAL_SPI_Begin+0xc>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	681b      	ldr	r3, [r3, #0]
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	bd08      	pop	{r3, pc}
   d8310:	00030230 	.word	0x00030230

000d8314 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d8314:	b508      	push	{r3, lr}
   d8316:	4b02      	ldr	r3, [pc, #8]	; (d8320 <HAL_SPI_Set_Bit_Order+0xc>)
   d8318:	681b      	ldr	r3, [r3, #0]
   d831a:	689b      	ldr	r3, [r3, #8]
   d831c:	9301      	str	r3, [sp, #4]
   d831e:	bd08      	pop	{r3, pc}
   d8320:	00030230 	.word	0x00030230

000d8324 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d8324:	b508      	push	{r3, lr}
   d8326:	4b02      	ldr	r3, [pc, #8]	; (d8330 <HAL_SPI_Set_Data_Mode+0xc>)
   d8328:	681b      	ldr	r3, [r3, #0]
   d832a:	68db      	ldr	r3, [r3, #12]
   d832c:	9301      	str	r3, [sp, #4]
   d832e:	bd08      	pop	{r3, pc}
   d8330:	00030230 	.word	0x00030230

000d8334 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d8334:	b508      	push	{r3, lr}
   d8336:	4b02      	ldr	r3, [pc, #8]	; (d8340 <HAL_SPI_Set_Clock_Divider+0xc>)
   d8338:	681b      	ldr	r3, [r3, #0]
   d833a:	691b      	ldr	r3, [r3, #16]
   d833c:	9301      	str	r3, [sp, #4]
   d833e:	bd08      	pop	{r3, pc}
   d8340:	00030230 	.word	0x00030230

000d8344 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d8344:	b508      	push	{r3, lr}
   d8346:	4b02      	ldr	r3, [pc, #8]	; (d8350 <HAL_SPI_Send_Receive_Data+0xc>)
   d8348:	681b      	ldr	r3, [r3, #0]
   d834a:	695b      	ldr	r3, [r3, #20]
   d834c:	9301      	str	r3, [sp, #4]
   d834e:	bd08      	pop	{r3, pc}
   d8350:	00030230 	.word	0x00030230

000d8354 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d8354:	b508      	push	{r3, lr}
   d8356:	4b02      	ldr	r3, [pc, #8]	; (d8360 <HAL_SPI_Init+0xc>)
   d8358:	681b      	ldr	r3, [r3, #0]
   d835a:	69db      	ldr	r3, [r3, #28]
   d835c:	9301      	str	r3, [sp, #4]
   d835e:	bd08      	pop	{r3, pc}
   d8360:	00030230 	.word	0x00030230

000d8364 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d8364:	b508      	push	{r3, lr}
   d8366:	4b02      	ldr	r3, [pc, #8]	; (d8370 <HAL_SPI_Is_Enabled+0xc>)
   d8368:	681b      	ldr	r3, [r3, #0]
   d836a:	6a1b      	ldr	r3, [r3, #32]
   d836c:	9301      	str	r3, [sp, #4]
   d836e:	bd08      	pop	{r3, pc}
   d8370:	00030230 	.word	0x00030230

000d8374 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d8374:	b508      	push	{r3, lr}
   d8376:	4b02      	ldr	r3, [pc, #8]	; (d8380 <HAL_SPI_Info+0xc>)
   d8378:	681b      	ldr	r3, [r3, #0]
   d837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d837c:	9301      	str	r3, [sp, #4]
   d837e:	bd08      	pop	{r3, pc}
   d8380:	00030230 	.word	0x00030230

000d8384 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d8384:	b508      	push	{r3, lr}
   d8386:	4b02      	ldr	r3, [pc, #8]	; (d8390 <HAL_SPI_DMA_Transfer+0xc>)
   d8388:	681b      	ldr	r3, [r3, #0]
   d838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d838c:	9301      	str	r3, [sp, #4]
   d838e:	bd08      	pop	{r3, pc}
   d8390:	00030230 	.word	0x00030230

000d8394 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d8394:	b508      	push	{r3, lr}
   d8396:	4b02      	ldr	r3, [pc, #8]	; (d83a0 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d8398:	681b      	ldr	r3, [r3, #0]
   d839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d839c:	9301      	str	r3, [sp, #4]
   d839e:	bd08      	pop	{r3, pc}
   d83a0:	00030230 	.word	0x00030230

000d83a4 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d83a4:	b508      	push	{r3, lr}
   d83a6:	4b02      	ldr	r3, [pc, #8]	; (d83b0 <HAL_SPI_Set_Settings+0xc>)
   d83a8:	681b      	ldr	r3, [r3, #0]
   d83aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d83ac:	9301      	str	r3, [sp, #4]
   d83ae:	bd08      	pop	{r3, pc}
   d83b0:	00030230 	.word	0x00030230

000d83b4 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d83b4:	b508      	push	{r3, lr}
   d83b6:	4b02      	ldr	r3, [pc, #8]	; (d83c0 <HAL_SPI_Acquire+0xc>)
   d83b8:	681b      	ldr	r3, [r3, #0]
   d83ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d83bc:	9301      	str	r3, [sp, #4]
   d83be:	bd08      	pop	{r3, pc}
   d83c0:	00030230 	.word	0x00030230

000d83c4 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d83c4:	b508      	push	{r3, lr}
   d83c6:	4b02      	ldr	r3, [pc, #8]	; (d83d0 <HAL_SPI_Release+0xc>)
   d83c8:	681b      	ldr	r3, [r3, #0]
   d83ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d83cc:	9301      	str	r3, [sp, #4]
   d83ce:	bd08      	pop	{r3, pc}
   d83d0:	00030230 	.word	0x00030230

000d83d4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d83d4:	b508      	push	{r3, lr}
   d83d6:	4b02      	ldr	r3, [pc, #8]	; (d83e0 <if_index_to_name+0xc>)
   d83d8:	681b      	ldr	r3, [r3, #0]
   d83da:	695b      	ldr	r3, [r3, #20]
   d83dc:	9301      	str	r3, [sp, #4]
   d83de:	bd08      	pop	{r3, pc}
   d83e0:	0003026c 	.word	0x0003026c

000d83e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d83e4:	b508      	push	{r3, lr}
   d83e6:	4b02      	ldr	r3, [pc, #8]	; (d83f0 <HAL_RNG_GetRandomNumber+0xc>)
   d83e8:	681b      	ldr	r3, [r3, #0]
   d83ea:	685b      	ldr	r3, [r3, #4]
   d83ec:	9301      	str	r3, [sp, #4]
   d83ee:	bd08      	pop	{r3, pc}
   d83f0:	00030218 	.word	0x00030218

000d83f4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d83f4:	b508      	push	{r3, lr}
   d83f6:	4b02      	ldr	r3, [pc, #8]	; (d8400 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d83f8:	681b      	ldr	r3, [r3, #0]
   d83fa:	691b      	ldr	r3, [r3, #16]
   d83fc:	9301      	str	r3, [sp, #4]
   d83fe:	bd08      	pop	{r3, pc}
   d8400:	00030218 	.word	0x00030218

000d8404 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d8404:	b508      	push	{r3, lr}
   d8406:	4b02      	ldr	r3, [pc, #8]	; (d8410 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8408:	681b      	ldr	r3, [r3, #0]
   d840a:	695b      	ldr	r3, [r3, #20]
   d840c:	9301      	str	r3, [sp, #4]
   d840e:	bd08      	pop	{r3, pc}
   d8410:	00030218 	.word	0x00030218

000d8414 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d8414:	b508      	push	{r3, lr}
   d8416:	4b02      	ldr	r3, [pc, #8]	; (d8420 <HAL_RTC_Get_UnixTime+0xc>)
   d8418:	681b      	ldr	r3, [r3, #0]
   d841a:	69db      	ldr	r3, [r3, #28]
   d841c:	9301      	str	r3, [sp, #4]
   d841e:	bd08      	pop	{r3, pc}
   d8420:	00030218 	.word	0x00030218

000d8424 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d8424:	b508      	push	{r3, lr}
   d8426:	4b02      	ldr	r3, [pc, #8]	; (d8430 <HAL_EEPROM_Init+0xc>)
   d8428:	681b      	ldr	r3, [r3, #0]
   d842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d842c:	9301      	str	r3, [sp, #4]
   d842e:	bd08      	pop	{r3, pc}
   d8430:	00030218 	.word	0x00030218

000d8434 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d8434:	b508      	push	{r3, lr}
   d8436:	4b02      	ldr	r3, [pc, #8]	; (d8440 <HAL_EEPROM_Get+0xc>)
   d8438:	681b      	ldr	r3, [r3, #0]
   d843a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d843c:	9301      	str	r3, [sp, #4]
   d843e:	bd08      	pop	{r3, pc}
   d8440:	00030218 	.word	0x00030218

000d8444 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d8444:	b508      	push	{r3, lr}
   d8446:	4b02      	ldr	r3, [pc, #8]	; (d8450 <HAL_EEPROM_Put+0xc>)
   d8448:	681b      	ldr	r3, [r3, #0]
   d844a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d844c:	9301      	str	r3, [sp, #4]
   d844e:	bd08      	pop	{r3, pc}
   d8450:	00030218 	.word	0x00030218

000d8454 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d8454:	b508      	push	{r3, lr}
   d8456:	4b02      	ldr	r3, [pc, #8]	; (d8460 <HAL_RTC_Time_Is_Valid+0xc>)
   d8458:	681b      	ldr	r3, [r3, #0]
   d845a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d845c:	9301      	str	r3, [sp, #4]
   d845e:	bd08      	pop	{r3, pc}
   d8460:	00030218 	.word	0x00030218

000d8464 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d8464:	b508      	push	{r3, lr}
   d8466:	4b02      	ldr	r3, [pc, #8]	; (d8470 <os_thread_is_current+0xc>)
   d8468:	681b      	ldr	r3, [r3, #0]
   d846a:	689b      	ldr	r3, [r3, #8]
   d846c:	9301      	str	r3, [sp, #4]
   d846e:	bd08      	pop	{r3, pc}
   d8470:	00030248 	.word	0x00030248

000d8474 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d8474:	b508      	push	{r3, lr}
   d8476:	4b02      	ldr	r3, [pc, #8]	; (d8480 <os_thread_yield+0xc>)
   d8478:	681b      	ldr	r3, [r3, #0]
   d847a:	68db      	ldr	r3, [r3, #12]
   d847c:	9301      	str	r3, [sp, #4]
   d847e:	bd08      	pop	{r3, pc}
   d8480:	00030248 	.word	0x00030248

000d8484 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d8484:	b508      	push	{r3, lr}
   d8486:	4b02      	ldr	r3, [pc, #8]	; (d8490 <os_thread_join+0xc>)
   d8488:	681b      	ldr	r3, [r3, #0]
   d848a:	691b      	ldr	r3, [r3, #16]
   d848c:	9301      	str	r3, [sp, #4]
   d848e:	bd08      	pop	{r3, pc}
   d8490:	00030248 	.word	0x00030248

000d8494 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d8494:	b508      	push	{r3, lr}
   d8496:	4b02      	ldr	r3, [pc, #8]	; (d84a0 <os_thread_cleanup+0xc>)
   d8498:	681b      	ldr	r3, [r3, #0]
   d849a:	695b      	ldr	r3, [r3, #20]
   d849c:	9301      	str	r3, [sp, #4]
   d849e:	bd08      	pop	{r3, pc}
   d84a0:	00030248 	.word	0x00030248

000d84a4 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d84a4:	b508      	push	{r3, lr}
   d84a6:	4b02      	ldr	r3, [pc, #8]	; (d84b0 <os_thread_scheduling+0xc>)
   d84a8:	681b      	ldr	r3, [r3, #0]
   d84aa:	69db      	ldr	r3, [r3, #28]
   d84ac:	9301      	str	r3, [sp, #4]
   d84ae:	bd08      	pop	{r3, pc}
   d84b0:	00030248 	.word	0x00030248

000d84b4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d84b4:	b508      	push	{r3, lr}
   d84b6:	4b02      	ldr	r3, [pc, #8]	; (d84c0 <os_timer_create+0xc>)
   d84b8:	681b      	ldr	r3, [r3, #0]
   d84ba:	6a1b      	ldr	r3, [r3, #32]
   d84bc:	9301      	str	r3, [sp, #4]
   d84be:	bd08      	pop	{r3, pc}
   d84c0:	00030248 	.word	0x00030248

000d84c4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d84c4:	b508      	push	{r3, lr}
   d84c6:	4b02      	ldr	r3, [pc, #8]	; (d84d0 <os_timer_destroy+0xc>)
   d84c8:	681b      	ldr	r3, [r3, #0]
   d84ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d84cc:	9301      	str	r3, [sp, #4]
   d84ce:	bd08      	pop	{r3, pc}
   d84d0:	00030248 	.word	0x00030248

000d84d4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d84d4:	b508      	push	{r3, lr}
   d84d6:	4b02      	ldr	r3, [pc, #8]	; (d84e0 <os_timer_get_id+0xc>)
   d84d8:	681b      	ldr	r3, [r3, #0]
   d84da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d84dc:	9301      	str	r3, [sp, #4]
   d84de:	bd08      	pop	{r3, pc}
   d84e0:	00030248 	.word	0x00030248

000d84e4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d84e4:	b508      	push	{r3, lr}
   d84e6:	4b02      	ldr	r3, [pc, #8]	; (d84f0 <os_timer_change+0xc>)
   d84e8:	681b      	ldr	r3, [r3, #0]
   d84ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d84ec:	9301      	str	r3, [sp, #4]
   d84ee:	bd08      	pop	{r3, pc}
   d84f0:	00030248 	.word	0x00030248

000d84f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d84f4:	b508      	push	{r3, lr}
   d84f6:	4b02      	ldr	r3, [pc, #8]	; (d8500 <os_mutex_recursive_create+0xc>)
   d84f8:	681b      	ldr	r3, [r3, #0]
   d84fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d84fc:	9301      	str	r3, [sp, #4]
   d84fe:	bd08      	pop	{r3, pc}
   d8500:	00030248 	.word	0x00030248

000d8504 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d8504:	b508      	push	{r3, lr}
   d8506:	4b02      	ldr	r3, [pc, #8]	; (d8510 <os_mutex_recursive_destroy+0xc>)
   d8508:	681b      	ldr	r3, [r3, #0]
   d850a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d850c:	9301      	str	r3, [sp, #4]
   d850e:	bd08      	pop	{r3, pc}
   d8510:	00030248 	.word	0x00030248

000d8514 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d8514:	b508      	push	{r3, lr}
   d8516:	4b02      	ldr	r3, [pc, #8]	; (d8520 <os_timer_set_id+0xc>)
   d8518:	681b      	ldr	r3, [r3, #0]
   d851a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d851c:	9301      	str	r3, [sp, #4]
   d851e:	bd08      	pop	{r3, pc}
   d8520:	00030248 	.word	0x00030248

000d8524 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8524:	b508      	push	{r3, lr}
   d8526:	4b02      	ldr	r3, [pc, #8]	; (d8530 <inet_inet_ntop+0xc>)
   d8528:	681b      	ldr	r3, [r3, #0]
   d852a:	695b      	ldr	r3, [r3, #20]
   d852c:	9301      	str	r3, [sp, #4]
   d852e:	bd08      	pop	{r3, pc}
   d8530:	00030264 	.word	0x00030264

000d8534 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d8534:	b508      	push	{r3, lr}
   d8536:	4b02      	ldr	r3, [pc, #8]	; (d8540 <inet_htonl+0xc>)
   d8538:	681b      	ldr	r3, [r3, #0]
   d853a:	6a1b      	ldr	r3, [r3, #32]
   d853c:	9301      	str	r3, [sp, #4]
   d853e:	bd08      	pop	{r3, pc}
   d8540:	00030264 	.word	0x00030264

000d8544 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d8544:	b508      	push	{r3, lr}
   d8546:	4b02      	ldr	r3, [pc, #8]	; (d8550 <inet_htons+0xc>)
   d8548:	681b      	ldr	r3, [r3, #0]
   d854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d854c:	9301      	str	r3, [sp, #4]
   d854e:	bd08      	pop	{r3, pc}
   d8550:	00030264 	.word	0x00030264

000d8554 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d8554:	b508      	push	{r3, lr}
   d8556:	4b02      	ldr	r3, [pc, #8]	; (d8560 <HAL_USART_Init+0xc>)
   d8558:	681b      	ldr	r3, [r3, #0]
   d855a:	681b      	ldr	r3, [r3, #0]
   d855c:	9301      	str	r3, [sp, #4]
   d855e:	bd08      	pop	{r3, pc}
   d8560:	0003023c 	.word	0x0003023c

000d8564 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d8564:	b508      	push	{r3, lr}
   d8566:	4b02      	ldr	r3, [pc, #8]	; (d8570 <HAL_USART_Write_Data+0xc>)
   d8568:	681b      	ldr	r3, [r3, #0]
   d856a:	68db      	ldr	r3, [r3, #12]
   d856c:	9301      	str	r3, [sp, #4]
   d856e:	bd08      	pop	{r3, pc}
   d8570:	0003023c 	.word	0x0003023c

000d8574 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d8574:	b508      	push	{r3, lr}
   d8576:	4b02      	ldr	r3, [pc, #8]	; (d8580 <HAL_USART_Available_Data+0xc>)
   d8578:	681b      	ldr	r3, [r3, #0]
   d857a:	691b      	ldr	r3, [r3, #16]
   d857c:	9301      	str	r3, [sp, #4]
   d857e:	bd08      	pop	{r3, pc}
   d8580:	0003023c 	.word	0x0003023c

000d8584 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d8584:	b508      	push	{r3, lr}
   d8586:	4b02      	ldr	r3, [pc, #8]	; (d8590 <HAL_USART_Read_Data+0xc>)
   d8588:	681b      	ldr	r3, [r3, #0]
   d858a:	695b      	ldr	r3, [r3, #20]
   d858c:	9301      	str	r3, [sp, #4]
   d858e:	bd08      	pop	{r3, pc}
   d8590:	0003023c 	.word	0x0003023c

000d8594 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d8594:	b508      	push	{r3, lr}
   d8596:	4b02      	ldr	r3, [pc, #8]	; (d85a0 <HAL_USART_Peek_Data+0xc>)
   d8598:	681b      	ldr	r3, [r3, #0]
   d859a:	699b      	ldr	r3, [r3, #24]
   d859c:	9301      	str	r3, [sp, #4]
   d859e:	bd08      	pop	{r3, pc}
   d85a0:	0003023c 	.word	0x0003023c

000d85a4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d85a4:	b508      	push	{r3, lr}
   d85a6:	4b02      	ldr	r3, [pc, #8]	; (d85b0 <HAL_USART_Flush_Data+0xc>)
   d85a8:	681b      	ldr	r3, [r3, #0]
   d85aa:	69db      	ldr	r3, [r3, #28]
   d85ac:	9301      	str	r3, [sp, #4]
   d85ae:	bd08      	pop	{r3, pc}
   d85b0:	0003023c 	.word	0x0003023c

000d85b4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d85b4:	b508      	push	{r3, lr}
   d85b6:	4b02      	ldr	r3, [pc, #8]	; (d85c0 <HAL_USART_Is_Enabled+0xc>)
   d85b8:	681b      	ldr	r3, [r3, #0]
   d85ba:	6a1b      	ldr	r3, [r3, #32]
   d85bc:	9301      	str	r3, [sp, #4]
   d85be:	bd08      	pop	{r3, pc}
   d85c0:	0003023c 	.word	0x0003023c

000d85c4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d85c4:	b508      	push	{r3, lr}
   d85c6:	4b02      	ldr	r3, [pc, #8]	; (d85d0 <HAL_USART_Available_Data_For_Write+0xc>)
   d85c8:	681b      	ldr	r3, [r3, #0]
   d85ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d85cc:	9301      	str	r3, [sp, #4]
   d85ce:	bd08      	pop	{r3, pc}
   d85d0:	0003023c 	.word	0x0003023c

000d85d4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d85d4:	b508      	push	{r3, lr}
   d85d6:	4b02      	ldr	r3, [pc, #8]	; (d85e0 <HAL_I2C_Begin_Transmission+0xc>)
   d85d8:	681b      	ldr	r3, [r3, #0]
   d85da:	699b      	ldr	r3, [r3, #24]
   d85dc:	9301      	str	r3, [sp, #4]
   d85de:	bd08      	pop	{r3, pc}
   d85e0:	00030228 	.word	0x00030228

000d85e4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d85e4:	b508      	push	{r3, lr}
   d85e6:	4b02      	ldr	r3, [pc, #8]	; (d85f0 <HAL_I2C_End_Transmission+0xc>)
   d85e8:	681b      	ldr	r3, [r3, #0]
   d85ea:	69db      	ldr	r3, [r3, #28]
   d85ec:	9301      	str	r3, [sp, #4]
   d85ee:	bd08      	pop	{r3, pc}
   d85f0:	00030228 	.word	0x00030228

000d85f4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d85f4:	b508      	push	{r3, lr}
   d85f6:	4b02      	ldr	r3, [pc, #8]	; (d8600 <HAL_I2C_Write_Data+0xc>)
   d85f8:	681b      	ldr	r3, [r3, #0]
   d85fa:	6a1b      	ldr	r3, [r3, #32]
   d85fc:	9301      	str	r3, [sp, #4]
   d85fe:	bd08      	pop	{r3, pc}
   d8600:	00030228 	.word	0x00030228

000d8604 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d8604:	b508      	push	{r3, lr}
   d8606:	4b02      	ldr	r3, [pc, #8]	; (d8610 <HAL_I2C_Available_Data+0xc>)
   d8608:	681b      	ldr	r3, [r3, #0]
   d860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d860c:	9301      	str	r3, [sp, #4]
   d860e:	bd08      	pop	{r3, pc}
   d8610:	00030228 	.word	0x00030228

000d8614 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d8614:	b508      	push	{r3, lr}
   d8616:	4b02      	ldr	r3, [pc, #8]	; (d8620 <HAL_I2C_Read_Data+0xc>)
   d8618:	681b      	ldr	r3, [r3, #0]
   d861a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d861c:	9301      	str	r3, [sp, #4]
   d861e:	bd08      	pop	{r3, pc}
   d8620:	00030228 	.word	0x00030228

000d8624 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d8624:	b508      	push	{r3, lr}
   d8626:	4b02      	ldr	r3, [pc, #8]	; (d8630 <HAL_I2C_Peek_Data+0xc>)
   d8628:	681b      	ldr	r3, [r3, #0]
   d862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d862c:	9301      	str	r3, [sp, #4]
   d862e:	bd08      	pop	{r3, pc}
   d8630:	00030228 	.word	0x00030228

000d8634 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d8634:	b508      	push	{r3, lr}
   d8636:	4b02      	ldr	r3, [pc, #8]	; (d8640 <HAL_I2C_Flush_Data+0xc>)
   d8638:	681b      	ldr	r3, [r3, #0]
   d863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d863c:	9301      	str	r3, [sp, #4]
   d863e:	bd08      	pop	{r3, pc}
   d8640:	00030228 	.word	0x00030228

000d8644 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d8644:	b508      	push	{r3, lr}
   d8646:	4b02      	ldr	r3, [pc, #8]	; (d8650 <HAL_I2C_Is_Enabled+0xc>)
   d8648:	681b      	ldr	r3, [r3, #0]
   d864a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d864c:	9301      	str	r3, [sp, #4]
   d864e:	bd08      	pop	{r3, pc}
   d8650:	00030228 	.word	0x00030228

000d8654 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d8654:	b508      	push	{r3, lr}
   d8656:	4b02      	ldr	r3, [pc, #8]	; (d8660 <HAL_I2C_Init+0xc>)
   d8658:	681b      	ldr	r3, [r3, #0]
   d865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d865c:	9301      	str	r3, [sp, #4]
   d865e:	bd08      	pop	{r3, pc}
   d8660:	00030228 	.word	0x00030228

000d8664 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d8664:	b508      	push	{r3, lr}
   d8666:	4b02      	ldr	r3, [pc, #8]	; (d8670 <HAL_I2C_Acquire+0xc>)
   d8668:	681b      	ldr	r3, [r3, #0]
   d866a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d866c:	9301      	str	r3, [sp, #4]
   d866e:	bd08      	pop	{r3, pc}
   d8670:	00030228 	.word	0x00030228

000d8674 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d8674:	b508      	push	{r3, lr}
   d8676:	4b02      	ldr	r3, [pc, #8]	; (d8680 <HAL_I2C_Release+0xc>)
   d8678:	681b      	ldr	r3, [r3, #0]
   d867a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d867c:	9301      	str	r3, [sp, #4]
   d867e:	bd08      	pop	{r3, pc}
   d8680:	00030228 	.word	0x00030228

000d8684 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d8684:	b508      	push	{r3, lr}
   d8686:	4b02      	ldr	r3, [pc, #8]	; (d8690 <HAL_I2C_Request_Data_Ex+0xc>)
   d8688:	681b      	ldr	r3, [r3, #0]
   d868a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d868c:	9301      	str	r3, [sp, #4]
   d868e:	bd08      	pop	{r3, pc}
   d8690:	00030228 	.word	0x00030228

000d8694 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d8694:	b508      	push	{r3, lr}
   d8696:	4b02      	ldr	r3, [pc, #8]	; (d86a0 <sock_setsockopt+0xc>)
   d8698:	681b      	ldr	r3, [r3, #0]
   d869a:	699b      	ldr	r3, [r3, #24]
   d869c:	9301      	str	r3, [sp, #4]
   d869e:	bd08      	pop	{r3, pc}
   d86a0:	00030238 	.word	0x00030238

000d86a4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d86a4:	b508      	push	{r3, lr}
   d86a6:	4b02      	ldr	r3, [pc, #8]	; (d86b0 <sock_close+0xc>)
   d86a8:	681b      	ldr	r3, [r3, #0]
   d86aa:	69db      	ldr	r3, [r3, #28]
   d86ac:	9301      	str	r3, [sp, #4]
   d86ae:	bd08      	pop	{r3, pc}
   d86b0:	00030238 	.word	0x00030238

000d86b4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d86b4:	b508      	push	{r3, lr}
   d86b6:	4b02      	ldr	r3, [pc, #8]	; (d86c0 <sock_connect+0xc>)
   d86b8:	681b      	ldr	r3, [r3, #0]
   d86ba:	6a1b      	ldr	r3, [r3, #32]
   d86bc:	9301      	str	r3, [sp, #4]
   d86be:	bd08      	pop	{r3, pc}
   d86c0:	00030238 	.word	0x00030238

000d86c4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d86c4:	b508      	push	{r3, lr}
   d86c6:	4b02      	ldr	r3, [pc, #8]	; (d86d0 <sock_recv+0xc>)
   d86c8:	681b      	ldr	r3, [r3, #0]
   d86ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d86cc:	9301      	str	r3, [sp, #4]
   d86ce:	bd08      	pop	{r3, pc}
   d86d0:	00030238 	.word	0x00030238

000d86d4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d86d4:	b508      	push	{r3, lr}
   d86d6:	4b02      	ldr	r3, [pc, #8]	; (d86e0 <sock_send+0xc>)
   d86d8:	681b      	ldr	r3, [r3, #0]
   d86da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d86dc:	9301      	str	r3, [sp, #4]
   d86de:	bd08      	pop	{r3, pc}
   d86e0:	00030238 	.word	0x00030238

000d86e4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d86e4:	b508      	push	{r3, lr}
   d86e6:	4b02      	ldr	r3, [pc, #8]	; (d86f0 <sock_socket+0xc>)
   d86e8:	681b      	ldr	r3, [r3, #0]
   d86ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d86ec:	9301      	str	r3, [sp, #4]
   d86ee:	bd08      	pop	{r3, pc}
   d86f0:	00030238 	.word	0x00030238

000d86f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d86f4:	b508      	push	{r3, lr}
   d86f6:	4b02      	ldr	r3, [pc, #8]	; (d8700 <HAL_USB_USART_Init+0xc>)
   d86f8:	681b      	ldr	r3, [r3, #0]
   d86fa:	681b      	ldr	r3, [r3, #0]
   d86fc:	9301      	str	r3, [sp, #4]
   d86fe:	bd08      	pop	{r3, pc}
   d8700:	0003024c 	.word	0x0003024c

000d8704 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8704:	b508      	push	{r3, lr}
   d8706:	4b02      	ldr	r3, [pc, #8]	; (d8710 <HAL_USB_USART_Begin+0xc>)
   d8708:	681b      	ldr	r3, [r3, #0]
   d870a:	685b      	ldr	r3, [r3, #4]
   d870c:	9301      	str	r3, [sp, #4]
   d870e:	bd08      	pop	{r3, pc}
   d8710:	0003024c 	.word	0x0003024c

000d8714 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8714:	b508      	push	{r3, lr}
   d8716:	4b02      	ldr	r3, [pc, #8]	; (d8720 <HAL_USB_USART_Available_Data+0xc>)
   d8718:	681b      	ldr	r3, [r3, #0]
   d871a:	691b      	ldr	r3, [r3, #16]
   d871c:	9301      	str	r3, [sp, #4]
   d871e:	bd08      	pop	{r3, pc}
   d8720:	0003024c 	.word	0x0003024c

000d8724 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8724:	b508      	push	{r3, lr}
   d8726:	4b02      	ldr	r3, [pc, #8]	; (d8730 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8728:	681b      	ldr	r3, [r3, #0]
   d872a:	695b      	ldr	r3, [r3, #20]
   d872c:	9301      	str	r3, [sp, #4]
   d872e:	bd08      	pop	{r3, pc}
   d8730:	0003024c 	.word	0x0003024c

000d8734 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8734:	b508      	push	{r3, lr}
   d8736:	4b02      	ldr	r3, [pc, #8]	; (d8740 <HAL_USB_USART_Receive_Data+0xc>)
   d8738:	681b      	ldr	r3, [r3, #0]
   d873a:	699b      	ldr	r3, [r3, #24]
   d873c:	9301      	str	r3, [sp, #4]
   d873e:	bd08      	pop	{r3, pc}
   d8740:	0003024c 	.word	0x0003024c

000d8744 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8744:	b508      	push	{r3, lr}
   d8746:	4b02      	ldr	r3, [pc, #8]	; (d8750 <HAL_USB_USART_Send_Data+0xc>)
   d8748:	681b      	ldr	r3, [r3, #0]
   d874a:	69db      	ldr	r3, [r3, #28]
   d874c:	9301      	str	r3, [sp, #4]
   d874e:	bd08      	pop	{r3, pc}
   d8750:	0003024c 	.word	0x0003024c

000d8754 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8754:	b508      	push	{r3, lr}
   d8756:	4b02      	ldr	r3, [pc, #8]	; (d8760 <HAL_USB_USART_Flush_Data+0xc>)
   d8758:	681b      	ldr	r3, [r3, #0]
   d875a:	6a1b      	ldr	r3, [r3, #32]
   d875c:	9301      	str	r3, [sp, #4]
   d875e:	bd08      	pop	{r3, pc}
   d8760:	0003024c 	.word	0x0003024c

000d8764 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8764:	b508      	push	{r3, lr}
   d8766:	4b02      	ldr	r3, [pc, #8]	; (d8770 <log_message+0xc>)
   d8768:	681b      	ldr	r3, [r3, #0]
   d876a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d876c:	9301      	str	r3, [sp, #4]
   d876e:	bd08      	pop	{r3, pc}
   d8770:	00030260 	.word	0x00030260

000d8774 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8774:	b508      	push	{r3, lr}
   d8776:	4b02      	ldr	r3, [pc, #8]	; (d8780 <system_mode+0xc>)
   d8778:	681b      	ldr	r3, [r3, #0]
   d877a:	681b      	ldr	r3, [r3, #0]
   d877c:	9301      	str	r3, [sp, #4]
   d877e:	bd08      	pop	{r3, pc}
   d8780:	00030220 	.word	0x00030220

000d8784 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8784:	b508      	push	{r3, lr}
   d8786:	4b02      	ldr	r3, [pc, #8]	; (d8790 <set_system_mode+0xc>)
   d8788:	681b      	ldr	r3, [r3, #0]
   d878a:	685b      	ldr	r3, [r3, #4]
   d878c:	9301      	str	r3, [sp, #4]
   d878e:	bd08      	pop	{r3, pc}
   d8790:	00030220 	.word	0x00030220

000d8794 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8794:	b508      	push	{r3, lr}
   d8796:	4b02      	ldr	r3, [pc, #8]	; (d87a0 <system_delay_ms+0xc>)
   d8798:	681b      	ldr	r3, [r3, #0]
   d879a:	695b      	ldr	r3, [r3, #20]
   d879c:	9301      	str	r3, [sp, #4]
   d879e:	bd08      	pop	{r3, pc}
   d87a0:	00030220 	.word	0x00030220

000d87a4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d87a4:	b508      	push	{r3, lr}
   d87a6:	4b02      	ldr	r3, [pc, #8]	; (d87b0 <system_thread_set_state+0xc>)
   d87a8:	681b      	ldr	r3, [r3, #0]
   d87aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d87ac:	9301      	str	r3, [sp, #4]
   d87ae:	bd08      	pop	{r3, pc}
   d87b0:	00030220 	.word	0x00030220

000d87b4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d87b4:	b508      	push	{r3, lr}
   d87b6:	4b02      	ldr	r3, [pc, #8]	; (d87c0 <system_thread_get_state+0xc>)
   d87b8:	681b      	ldr	r3, [r3, #0]
   d87ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d87bc:	9301      	str	r3, [sp, #4]
   d87be:	bd08      	pop	{r3, pc}
   d87c0:	00030220 	.word	0x00030220

000d87c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d87c4:	b508      	push	{r3, lr}
   d87c6:	4b03      	ldr	r3, [pc, #12]	; (d87d4 <system_ctrl_set_app_request_handler+0x10>)
   d87c8:	681b      	ldr	r3, [r3, #0]
   d87ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d87ce:	9301      	str	r3, [sp, #4]
   d87d0:	bd08      	pop	{r3, pc}
   d87d2:	0000      	.short	0x0000
   d87d4:	00030220 	.word	0x00030220

000d87d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d87d8:	b508      	push	{r3, lr}
   d87da:	4b03      	ldr	r3, [pc, #12]	; (d87e8 <system_ctrl_set_result+0x10>)
   d87dc:	681b      	ldr	r3, [r3, #0]
   d87de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d87e2:	9301      	str	r3, [sp, #4]
   d87e4:	bd08      	pop	{r3, pc}
   d87e6:	0000      	.short	0x0000
   d87e8:	00030220 	.word	0x00030220

000d87ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d87ec:	b508      	push	{r3, lr}
   d87ee:	4b02      	ldr	r3, [pc, #8]	; (d87f8 <network_connect+0xc>)
   d87f0:	681b      	ldr	r3, [r3, #0]
   d87f2:	685b      	ldr	r3, [r3, #4]
   d87f4:	9301      	str	r3, [sp, #4]
   d87f6:	bd08      	pop	{r3, pc}
   d87f8:	00030240 	.word	0x00030240

000d87fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d87fc:	b508      	push	{r3, lr}
   d87fe:	4b02      	ldr	r3, [pc, #8]	; (d8808 <network_connecting+0xc>)
   d8800:	681b      	ldr	r3, [r3, #0]
   d8802:	689b      	ldr	r3, [r3, #8]
   d8804:	9301      	str	r3, [sp, #4]
   d8806:	bd08      	pop	{r3, pc}
   d8808:	00030240 	.word	0x00030240

000d880c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d880c:	b508      	push	{r3, lr}
   d880e:	4b02      	ldr	r3, [pc, #8]	; (d8818 <network_disconnect+0xc>)
   d8810:	681b      	ldr	r3, [r3, #0]
   d8812:	68db      	ldr	r3, [r3, #12]
   d8814:	9301      	str	r3, [sp, #4]
   d8816:	bd08      	pop	{r3, pc}
   d8818:	00030240 	.word	0x00030240

000d881c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d881c:	b508      	push	{r3, lr}
   d881e:	4b02      	ldr	r3, [pc, #8]	; (d8828 <network_ready+0xc>)
   d8820:	681b      	ldr	r3, [r3, #0]
   d8822:	691b      	ldr	r3, [r3, #16]
   d8824:	9301      	str	r3, [sp, #4]
   d8826:	bd08      	pop	{r3, pc}
   d8828:	00030240 	.word	0x00030240

000d882c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d882c:	b508      	push	{r3, lr}
   d882e:	4b02      	ldr	r3, [pc, #8]	; (d8838 <network_on+0xc>)
   d8830:	681b      	ldr	r3, [r3, #0]
   d8832:	695b      	ldr	r3, [r3, #20]
   d8834:	9301      	str	r3, [sp, #4]
   d8836:	bd08      	pop	{r3, pc}
   d8838:	00030240 	.word	0x00030240

000d883c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d883c:	b508      	push	{r3, lr}
   d883e:	4b02      	ldr	r3, [pc, #8]	; (d8848 <network_off+0xc>)
   d8840:	681b      	ldr	r3, [r3, #0]
   d8842:	699b      	ldr	r3, [r3, #24]
   d8844:	9301      	str	r3, [sp, #4]
   d8846:	bd08      	pop	{r3, pc}
   d8848:	00030240 	.word	0x00030240

000d884c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d884c:	b508      	push	{r3, lr}
   d884e:	4b02      	ldr	r3, [pc, #8]	; (d8858 <network_listen+0xc>)
   d8850:	681b      	ldr	r3, [r3, #0]
   d8852:	69db      	ldr	r3, [r3, #28]
   d8854:	9301      	str	r3, [sp, #4]
   d8856:	bd08      	pop	{r3, pc}
   d8858:	00030240 	.word	0x00030240

000d885c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d885c:	b508      	push	{r3, lr}
   d885e:	4b02      	ldr	r3, [pc, #8]	; (d8868 <network_listening+0xc>)
   d8860:	681b      	ldr	r3, [r3, #0]
   d8862:	6a1b      	ldr	r3, [r3, #32]
   d8864:	9301      	str	r3, [sp, #4]
   d8866:	bd08      	pop	{r3, pc}
   d8868:	00030240 	.word	0x00030240

000d886c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d886c:	b508      	push	{r3, lr}
   d886e:	4b02      	ldr	r3, [pc, #8]	; (d8878 <network_set_listen_timeout+0xc>)
   d8870:	681b      	ldr	r3, [r3, #0]
   d8872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8874:	9301      	str	r3, [sp, #4]
   d8876:	bd08      	pop	{r3, pc}
   d8878:	00030240 	.word	0x00030240

000d887c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d887c:	b508      	push	{r3, lr}
   d887e:	4b02      	ldr	r3, [pc, #8]	; (d8888 <network_get_listen_timeout+0xc>)
   d8880:	681b      	ldr	r3, [r3, #0]
   d8882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8884:	9301      	str	r3, [sp, #4]
   d8886:	bd08      	pop	{r3, pc}
   d8888:	00030240 	.word	0x00030240

000d888c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d888c:	b508      	push	{r3, lr}
   d888e:	4b02      	ldr	r3, [pc, #8]	; (d8898 <spark_process+0xc>)
   d8890:	681b      	ldr	r3, [r3, #0]
   d8892:	689b      	ldr	r3, [r3, #8]
   d8894:	9301      	str	r3, [sp, #4]
   d8896:	bd08      	pop	{r3, pc}
   d8898:	00030244 	.word	0x00030244

000d889c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d889c:	b508      	push	{r3, lr}
   d889e:	4b02      	ldr	r3, [pc, #8]	; (d88a8 <spark_cloud_flag_connected+0xc>)
   d88a0:	681b      	ldr	r3, [r3, #0]
   d88a2:	695b      	ldr	r3, [r3, #20]
   d88a4:	9301      	str	r3, [sp, #4]
   d88a6:	bd08      	pop	{r3, pc}
   d88a8:	00030244 	.word	0x00030244

000d88ac <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d88ac:	b508      	push	{r3, lr}
   d88ae:	4b02      	ldr	r3, [pc, #8]	; (d88b8 <spark_deviceID+0xc>)
   d88b0:	681b      	ldr	r3, [r3, #0]
   d88b2:	69db      	ldr	r3, [r3, #28]
   d88b4:	9301      	str	r3, [sp, #4]
   d88b6:	bd08      	pop	{r3, pc}
   d88b8:	00030244 	.word	0x00030244

000d88bc <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d88bc:	b508      	push	{r3, lr}
   d88be:	4b02      	ldr	r3, [pc, #8]	; (d88c8 <spark_sync_time+0xc>)
   d88c0:	681b      	ldr	r3, [r3, #0]
   d88c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d88c4:	9301      	str	r3, [sp, #4]
   d88c6:	bd08      	pop	{r3, pc}
   d88c8:	00030244 	.word	0x00030244

000d88cc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d88cc:	b508      	push	{r3, lr}
   d88ce:	4b02      	ldr	r3, [pc, #8]	; (d88d8 <spark_sync_time_pending+0xc>)
   d88d0:	681b      	ldr	r3, [r3, #0]
   d88d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d88d4:	9301      	str	r3, [sp, #4]
   d88d6:	bd08      	pop	{r3, pc}
   d88d8:	00030244 	.word	0x00030244

000d88dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d88dc:	b508      	push	{r3, lr}
   d88de:	4b02      	ldr	r3, [pc, #8]	; (d88e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d88e0:	681b      	ldr	r3, [r3, #0]
   d88e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d88e4:	9301      	str	r3, [sp, #4]
   d88e6:	bd08      	pop	{r3, pc}
   d88e8:	00030244 	.word	0x00030244

000d88ec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d88ec:	b508      	push	{r3, lr}
   d88ee:	4b02      	ldr	r3, [pc, #8]	; (d88f8 <malloc+0xc>)
   d88f0:	681b      	ldr	r3, [r3, #0]
   d88f2:	681b      	ldr	r3, [r3, #0]
   d88f4:	9301      	str	r3, [sp, #4]
   d88f6:	bd08      	pop	{r3, pc}
   d88f8:	0003021c 	.word	0x0003021c

000d88fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d88fc:	b508      	push	{r3, lr}
   d88fe:	4b02      	ldr	r3, [pc, #8]	; (d8908 <free+0xc>)
   d8900:	681b      	ldr	r3, [r3, #0]
   d8902:	685b      	ldr	r3, [r3, #4]
   d8904:	9301      	str	r3, [sp, #4]
   d8906:	bd08      	pop	{r3, pc}
   d8908:	0003021c 	.word	0x0003021c

000d890c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d890c:	b508      	push	{r3, lr}
   d890e:	4b02      	ldr	r3, [pc, #8]	; (d8918 <realloc+0xc>)
   d8910:	681b      	ldr	r3, [r3, #0]
   d8912:	689b      	ldr	r3, [r3, #8]
   d8914:	9301      	str	r3, [sp, #4]
   d8916:	bd08      	pop	{r3, pc}
   d8918:	0003021c 	.word	0x0003021c

000d891c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d891c:	b508      	push	{r3, lr}
   d891e:	4b02      	ldr	r3, [pc, #8]	; (d8928 <sprintf+0xc>)
   d8920:	681b      	ldr	r3, [r3, #0]
   d8922:	68db      	ldr	r3, [r3, #12]
   d8924:	9301      	str	r3, [sp, #4]
   d8926:	bd08      	pop	{r3, pc}
   d8928:	0003021c 	.word	0x0003021c

000d892c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d892c:	b508      	push	{r3, lr}
   d892e:	4b02      	ldr	r3, [pc, #8]	; (d8938 <vsnprintf+0xc>)
   d8930:	681b      	ldr	r3, [r3, #0]
   d8932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8934:	9301      	str	r3, [sp, #4]
   d8936:	bd08      	pop	{r3, pc}
   d8938:	0003021c 	.word	0x0003021c

000d893c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d893c:	b508      	push	{r3, lr}
   d893e:	4b02      	ldr	r3, [pc, #8]	; (d8948 <__errno+0xc>)
   d8940:	681b      	ldr	r3, [r3, #0]
   d8942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8944:	9301      	str	r3, [sp, #4]
   d8946:	bd08      	pop	{r3, pc}
   d8948:	0003021c 	.word	0x0003021c

000d894c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d894c:	2200      	movs	r2, #0
   d894e:	4611      	mov	r1, r2
   d8950:	6840      	ldr	r0, [r0, #4]
   d8952:	f7ff bf83 	b.w	d885c <network_listening>

000d8956 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8956:	2200      	movs	r2, #0
   d8958:	4611      	mov	r1, r2
   d895a:	6840      	ldr	r0, [r0, #4]
   d895c:	f7ff bf8e 	b.w	d887c <network_get_listen_timeout>

000d8960 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8960:	2200      	movs	r2, #0
   d8962:	6840      	ldr	r0, [r0, #4]
   d8964:	f7ff bf82 	b.w	d886c <network_set_listen_timeout>

000d8968 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8968:	2200      	movs	r2, #0
   d896a:	f081 0101 	eor.w	r1, r1, #1
   d896e:	6840      	ldr	r0, [r0, #4]
   d8970:	f7ff bf6c 	b.w	d884c <network_listen>

000d8974 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8974:	2300      	movs	r3, #0
   d8976:	461a      	mov	r2, r3
   d8978:	4619      	mov	r1, r3
   d897a:	6840      	ldr	r0, [r0, #4]
   d897c:	f7ff bf5e 	b.w	d883c <network_off>

000d8980 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8980:	2300      	movs	r3, #0
   d8982:	461a      	mov	r2, r3
   d8984:	4619      	mov	r1, r3
   d8986:	6840      	ldr	r0, [r0, #4]
   d8988:	f7ff bf50 	b.w	d882c <network_on>

000d898c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d898c:	2200      	movs	r2, #0
   d898e:	4611      	mov	r1, r2
   d8990:	6840      	ldr	r0, [r0, #4]
   d8992:	f7ff bf43 	b.w	d881c <network_ready>

000d8996 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8996:	2200      	movs	r2, #0
   d8998:	4611      	mov	r1, r2
   d899a:	6840      	ldr	r0, [r0, #4]
   d899c:	f7ff bf2e 	b.w	d87fc <network_connecting>

000d89a0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d89a0:	2200      	movs	r2, #0
   d89a2:	2102      	movs	r1, #2
   d89a4:	6840      	ldr	r0, [r0, #4]
   d89a6:	f7ff bf31 	b.w	d880c <network_disconnect>

000d89aa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d89aa:	2300      	movs	r3, #0
   d89ac:	461a      	mov	r2, r3
   d89ae:	6840      	ldr	r0, [r0, #4]
   d89b0:	f7ff bf1c 	b.w	d87ec <network_connect>

000d89b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d89b4:	4b02      	ldr	r3, [pc, #8]	; (d89c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d89b6:	2203      	movs	r2, #3
   d89b8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d89ba:	4a02      	ldr	r2, [pc, #8]	; (d89c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d89bc:	601a      	str	r2, [r3, #0]
   d89be:	4770      	bx	lr
   d89c0:	2003e0e8 	.word	0x2003e0e8
   d89c4:	000db2a4 	.word	0x000db2a4

000d89c8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d89c8:	2100      	movs	r1, #0
   d89ca:	f7ff bcf3 	b.w	d83b4 <HAL_SPI_Acquire>

000d89ce <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d89ce:	2100      	movs	r1, #0
   d89d0:	f7ff bcf8 	b.w	d83c4 <HAL_SPI_Release>

000d89d4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d89d4:	b510      	push	{r4, lr}
   d89d6:	4604      	mov	r4, r0
{
    _spi = spi;
   d89d8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d89da:	4608      	mov	r0, r1
   d89dc:	f7ff fcba 	bl	d8354 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d89e0:	2300      	movs	r3, #0
   d89e2:	6063      	str	r3, [r4, #4]
}
   d89e4:	4620      	mov	r0, r4
   d89e6:	bd10      	pop	{r4, pc}

000d89e8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d89e8:	b510      	push	{r4, lr}
   d89ea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d89ec:	7800      	ldrb	r0, [r0, #0]
   d89ee:	f7ff ffeb 	bl	d89c8 <_ZN8SPIClass4lockEv.isra.0>
   d89f2:	b948      	cbnz	r0, d8a08 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d89f4:	7820      	ldrb	r0, [r4, #0]
   d89f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d89fa:	f7ff fc83 	bl	d8304 <HAL_SPI_Begin>
        unlock();
   d89fe:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d8a04:	f7ff bfe3 	b.w	d89ce <_ZN8SPIClass6unlockEv.isra.1>
   d8a08:	bd10      	pop	{r4, pc}

000d8a0a <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d8a0a:	b538      	push	{r3, r4, r5, lr}
   d8a0c:	4604      	mov	r4, r0
    if (!lock())
   d8a0e:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d8a10:	460d      	mov	r5, r1
    if (!lock())
   d8a12:	f7ff ffd9 	bl	d89c8 <_ZN8SPIClass4lockEv.isra.0>
   d8a16:	b940      	cbnz	r0, d8a2a <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d8a18:	7820      	ldrb	r0, [r4, #0]
   d8a1a:	4629      	mov	r1, r5
   d8a1c:	f7ff fc7a 	bl	d8314 <HAL_SPI_Set_Bit_Order>
        unlock();
   d8a20:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d8a26:	f7ff bfd2 	b.w	d89ce <_ZN8SPIClass6unlockEv.isra.1>
   d8a2a:	bd38      	pop	{r3, r4, r5, pc}

000d8a2c <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d8a2c:	b538      	push	{r3, r4, r5, lr}
   d8a2e:	4604      	mov	r4, r0
    if (!lock())
   d8a30:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d8a32:	460d      	mov	r5, r1
    if (!lock())
   d8a34:	f7ff ffc8 	bl	d89c8 <_ZN8SPIClass4lockEv.isra.0>
   d8a38:	b940      	cbnz	r0, d8a4c <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d8a3a:	7820      	ldrb	r0, [r4, #0]
   d8a3c:	4629      	mov	r1, r5
   d8a3e:	f7ff fc71 	bl	d8324 <HAL_SPI_Set_Data_Mode>
        unlock();
   d8a42:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d8a48:	f7ff bfc1 	b.w	d89ce <_ZN8SPIClass6unlockEv.isra.1>
   d8a4c:	bd38      	pop	{r3, r4, r5, pc}

000d8a4e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d8a4e:	7800      	ldrb	r0, [r0, #0]
   d8a50:	f7ff bfbd 	b.w	d89ce <_ZN8SPIClass6unlockEv.isra.1>

000d8a54 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8a54:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d8a56:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8a58:	6018      	str	r0, [r3, #0]
   d8a5a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d8a5c:	6818      	ldr	r0, [r3, #0]
   d8a5e:	4288      	cmp	r0, r1
   d8a60:	b2e5      	uxtb	r5, r4
   d8a62:	d906      	bls.n	d8a72 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8a64:	3401      	adds	r4, #1
   d8a66:	2c08      	cmp	r4, #8
   d8a68:	d002      	beq.n	d8a70 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d8a6a:	0840      	lsrs	r0, r0, #1
   d8a6c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d8a6e:	e7f5      	b.n	d8a5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8a70:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d8a72:	4b02      	ldr	r3, [pc, #8]	; (d8a7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8a74:	5d5b      	ldrb	r3, [r3, r5]
   d8a76:	7013      	strb	r3, [r2, #0]
   d8a78:	bd30      	pop	{r4, r5, pc}
   d8a7a:	bf00      	nop
   d8a7c:	000db2d0 	.word	0x000db2d0

000d8a80 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8a84:	4607      	mov	r7, r0
   d8a86:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d8a88:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8a8a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d8a8c:	f7ff ff9c 	bl	d89c8 <_ZN8SPIClass4lockEv.isra.0>
   d8a90:	2800      	cmp	r0, #0
   d8a92:	db62      	blt.n	d8b5a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d8a94:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d8a96:	2214      	movs	r2, #20
   d8a98:	2100      	movs	r1, #0
   d8a9a:	a809      	add	r0, sp, #36	; 0x24
   d8a9c:	f002 f9f6 	bl	dae8c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8aa0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d8aa2:	4620      	mov	r0, r4
   d8aa4:	2200      	movs	r2, #0
   d8aa6:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d8aa8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d8aac:	f7ff fc62 	bl	d8374 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d8ab0:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d8ab4:	b154      	cbz	r4, d8acc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d8ab6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8aba:	b935      	cbnz	r5, d8aca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d8abc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8ac0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d8ac4:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d8ac8:	e003      	b.n	d8ad2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d8aca:	2400      	movs	r4, #0
   d8acc:	46a1      	mov	r9, r4
   d8ace:	46a0      	mov	r8, r4
   d8ad0:	2501      	movs	r5, #1
   d8ad2:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8ad4:	b105      	cbz	r5, d8ad8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d8ad6:	b9bb      	cbnz	r3, d8b08 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d8ad8:	429d      	cmp	r5, r3
   d8ada:	d10b      	bne.n	d8af4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d8adc:	68b2      	ldr	r2, [r6, #8]
   d8ade:	4542      	cmp	r2, r8
   d8ae0:	d108      	bne.n	d8af4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d8ae2:	f88d 9020 	strb.w	r9, [sp, #32]
   d8ae6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8aea:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d8aee:	89b2      	ldrh	r2, [r6, #12]
   d8af0:	4291      	cmp	r1, r2
   d8af2:	d009      	beq.n	d8b08 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d8af4:	b153      	cbz	r3, d8b0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d8af6:	2400      	movs	r4, #0
   d8af8:	7838      	ldrb	r0, [r7, #0]
   d8afa:	9401      	str	r4, [sp, #4]
   d8afc:	9400      	str	r4, [sp, #0]
   d8afe:	4623      	mov	r3, r4
   d8b00:	4622      	mov	r2, r4
   d8b02:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d8b04:	f7ff fc4e 	bl	d83a4 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d8b08:	2000      	movs	r0, #0
   d8b0a:	e026      	b.n	d8b5a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d8b0c:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d8b10:	68b1      	ldr	r1, [r6, #8]
   d8b12:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8b14:	ab04      	add	r3, sp, #16
   d8b16:	f10d 020f 	add.w	r2, sp, #15
   d8b1a:	f7ff ff9b 	bl	d8a54 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d8b1e:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8b20:	b105      	cbz	r5, d8b24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d8b22:	b9b1      	cbnz	r1, d8b52 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d8b24:	42a9      	cmp	r1, r5
   d8b26:	d008      	beq.n	d8b3a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d8b28:	2400      	movs	r4, #0
   d8b2a:	7838      	ldrb	r0, [r7, #0]
   d8b2c:	9401      	str	r4, [sp, #4]
   d8b2e:	7b74      	ldrb	r4, [r6, #13]
   d8b30:	7b33      	ldrb	r3, [r6, #12]
   d8b32:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8b36:	9400      	str	r4, [sp, #0]
   d8b38:	e7e4      	b.n	d8b04 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d8b3a:	68b3      	ldr	r3, [r6, #8]
   d8b3c:	4543      	cmp	r3, r8
   d8b3e:	d3f3      	bcc.n	d8b28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d8b40:	f88d 9020 	strb.w	r9, [sp, #32]
   d8b44:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8b48:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8b4c:	89b3      	ldrh	r3, [r6, #12]
   d8b4e:	429a      	cmp	r2, r3
   d8b50:	d1ea      	bne.n	d8b28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d8b52:	9b04      	ldr	r3, [sp, #16]
   d8b54:	4543      	cmp	r3, r8
   d8b56:	d1e7      	bne.n	d8b28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d8b58:	e7d6      	b.n	d8b08 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d8b5a:	b00f      	add	sp, #60	; 0x3c
   d8b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8b60 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d8b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8b64:	b088      	sub	sp, #32
    unsigned clock = 0;
   d8b66:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d8b68:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d8b6a:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d8b6c:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d8b6e:	460e      	mov	r6, r1
   d8b70:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d8b72:	f7ff ff29 	bl	d89c8 <_ZN8SPIClass4lockEv.isra.0>
   d8b76:	4605      	mov	r5, r0
   d8b78:	bb00      	cbnz	r0, d8bbc <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d8b7a:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d8b7e:	4601      	mov	r1, r0
   d8b80:	2214      	movs	r2, #20
   d8b82:	a803      	add	r0, sp, #12
   d8b84:	f002 f982 	bl	dae8c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8b88:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d8b8a:	462a      	mov	r2, r5
   d8b8c:	a903      	add	r1, sp, #12
   d8b8e:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d8b90:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d8b94:	f7ff fbee 	bl	d8374 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d8b98:	ab02      	add	r3, sp, #8
   d8b9a:	f10d 0207 	add.w	r2, sp, #7
   d8b9e:	fb07 f106 	mul.w	r1, r7, r6
   d8ba2:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d8ba4:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d8ba8:	f7ff ff54 	bl	d8a54 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d8bac:	7820      	ldrb	r0, [r4, #0]
   d8bae:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d8bb2:	f7ff fbbf 	bl	d8334 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d8bb6:	7820      	ldrb	r0, [r4, #0]
   d8bb8:	f7ff ff09 	bl	d89ce <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d8bbc:	9802      	ldr	r0, [sp, #8]
   d8bbe:	b008      	add	sp, #32
   d8bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8bc4 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d8bc4:	b538      	push	{r3, r4, r5, lr}
   d8bc6:	4604      	mov	r4, r0
    if (!lock())
   d8bc8:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d8bca:	460d      	mov	r5, r1
    if (!lock())
   d8bcc:	f7ff fefc 	bl	d89c8 <_ZN8SPIClass4lockEv.isra.0>
   d8bd0:	b9c8      	cbnz	r0, d8c06 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d8bd2:	6861      	ldr	r1, [r4, #4]
   d8bd4:	b171      	cbz	r1, d8bf4 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d8bd6:	4b0c      	ldr	r3, [pc, #48]	; (d8c08 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d8bd8:	5cc2      	ldrb	r2, [r0, r3]
   d8bda:	42aa      	cmp	r2, r5
   d8bdc:	d002      	beq.n	d8be4 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d8bde:	3001      	adds	r0, #1
   d8be0:	2808      	cmp	r0, #8
   d8be2:	d1f9      	bne.n	d8bd8 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d8be4:	3001      	adds	r0, #1
   d8be6:	b2c0      	uxtb	r0, r0
   d8be8:	40c1      	lsrs	r1, r0
   d8bea:	2201      	movs	r2, #1
   d8bec:	4620      	mov	r0, r4
   d8bee:	f7ff ffb7 	bl	d8b60 <_ZN8SPIClass13setClockSpeedEjj>
   d8bf2:	e003      	b.n	d8bfc <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d8bf4:	4629      	mov	r1, r5
   d8bf6:	7820      	ldrb	r0, [r4, #0]
   d8bf8:	f7ff fb9c 	bl	d8334 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d8bfc:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d8c02:	f7ff bee4 	b.w	d89ce <_ZN8SPIClass6unlockEv.isra.1>
   d8c06:	bd38      	pop	{r3, r4, r5, pc}
   d8c08:	000db2d0 	.word	0x000db2d0

000d8c0c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d8c0c:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d8c0e:	7800      	ldrb	r0, [r0, #0]
   d8c10:	f7ff fb98 	bl	d8344 <HAL_SPI_Send_Receive_Data>
}
   d8c14:	b2c0      	uxtb	r0, r0
   d8c16:	bd08      	pop	{r3, pc}

000d8c18 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d8c18:	b530      	push	{r4, r5, lr}
   d8c1a:	b087      	sub	sp, #28
   d8c1c:	4604      	mov	r4, r0
   d8c1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d8c20:	7800      	ldrb	r0, [r0, #0]
   d8c22:	9500      	str	r5, [sp, #0]
   d8c24:	f7ff fbae 	bl	d8384 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d8c28:	b93d      	cbnz	r5, d8c3a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d8c2a:	a902      	add	r1, sp, #8
   d8c2c:	7820      	ldrb	r0, [r4, #0]
   d8c2e:	f7ff fbb1 	bl	d8394 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d8c32:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d8c36:	07db      	lsls	r3, r3, #31
   d8c38:	d4f7      	bmi.n	d8c2a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d8c3a:	b007      	add	sp, #28
   d8c3c:	bd30      	pop	{r4, r5, pc}

000d8c3e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d8c3e:	7800      	ldrb	r0, [r0, #0]
   d8c40:	f7ff bb90 	b.w	d8364 <HAL_SPI_Is_Enabled>

000d8c44 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8c44:	b510      	push	{r4, lr}
   d8c46:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d8c48:	6800      	ldr	r0, [r0, #0]
   d8c4a:	b118      	cbz	r0, d8c54 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d8c4c:	f7ff fe56 	bl	d88fc <free>
            wakeupSource_ = nullptr;
   d8c50:	2300      	movs	r3, #0
   d8c52:	6023      	str	r3, [r4, #0]
   d8c54:	bd10      	pop	{r4, pc}

000d8c56 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8c56:	b510      	push	{r4, lr}
   d8c58:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d8c5a:	f7ff fff3 	bl	d8c44 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8c5e:	4620      	mov	r0, r4
   d8c60:	bd10      	pop	{r4, pc}
	...

000d8c64 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8c64:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8c66:	4c09      	ldr	r4, [pc, #36]	; (d8c8c <_GLOBAL__sub_I_System+0x28>)
   d8c68:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8c6e:	6020      	str	r0, [r4, #0]
   d8c70:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8c72:	71a0      	strb	r0, [r4, #6]
   d8c74:	8120      	strh	r0, [r4, #8]
   d8c76:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8c78:	f7ff fd84 	bl	d8784 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8c7c:	4620      	mov	r0, r4
   d8c7e:	4a04      	ldr	r2, [pc, #16]	; (d8c90 <_GLOBAL__sub_I_System+0x2c>)
   d8c80:	4904      	ldr	r1, [pc, #16]	; (d8c94 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8c86:	f001 bb55 	b.w	da334 <__aeabi_atexit>
   d8c8a:	bf00      	nop
   d8c8c:	2003e0f0 	.word	0x2003e0f0
   d8c90:	2003da28 	.word	0x2003da28
   d8c94:	000d8c57 	.word	0x000d8c57

000d8c98 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8c98:	b510      	push	{r4, lr}
   d8c9a:	4604      	mov	r4, r0
{
	free(buffer);
   d8c9c:	6800      	ldr	r0, [r0, #0]
   d8c9e:	f7ff fe2d 	bl	d88fc <free>
}
   d8ca2:	4620      	mov	r0, r4
   d8ca4:	bd10      	pop	{r4, pc}

000d8ca6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8ca6:	b510      	push	{r4, lr}
   d8ca8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8caa:	6800      	ldr	r0, [r0, #0]
   d8cac:	b108      	cbz	r0, d8cb2 <_ZN6String10invalidateEv+0xc>
   d8cae:	f7ff fe25 	bl	d88fc <free>
	buffer = NULL;
   d8cb2:	2300      	movs	r3, #0
   d8cb4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8cb6:	60a3      	str	r3, [r4, #8]
   d8cb8:	6063      	str	r3, [r4, #4]
   d8cba:	bd10      	pop	{r4, pc}

000d8cbc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8cbc:	b538      	push	{r3, r4, r5, lr}
   d8cbe:	4604      	mov	r4, r0
   d8cc0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8cc2:	6800      	ldr	r0, [r0, #0]
   d8cc4:	3101      	adds	r1, #1
   d8cc6:	f7ff fe21 	bl	d890c <realloc>
	if (newbuffer) {
   d8cca:	b110      	cbz	r0, d8cd2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8ccc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d8cd0:	2001      	movs	r0, #1
	}
	return 0;
}
   d8cd2:	bd38      	pop	{r3, r4, r5, pc}

000d8cd4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8cd4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8cd6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8cd8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8cda:	b113      	cbz	r3, d8ce2 <_ZN6String7reserveEj+0xe>
   d8cdc:	6843      	ldr	r3, [r0, #4]
   d8cde:	428b      	cmp	r3, r1
   d8ce0:	d207      	bcs.n	d8cf2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8ce2:	4620      	mov	r0, r4
   d8ce4:	f7ff ffea 	bl	d8cbc <_ZN6String12changeBufferEj>
   d8ce8:	b120      	cbz	r0, d8cf4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8cea:	68a3      	ldr	r3, [r4, #8]
   d8cec:	b90b      	cbnz	r3, d8cf2 <_ZN6String7reserveEj+0x1e>
   d8cee:	6822      	ldr	r2, [r4, #0]
   d8cf0:	7013      	strb	r3, [r2, #0]
   d8cf2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8cf4:	bd10      	pop	{r4, pc}

000d8cf6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8cf6:	b570      	push	{r4, r5, r6, lr}
   d8cf8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8cfa:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8cfc:	4604      	mov	r4, r0
   d8cfe:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8d00:	f7ff ffe8 	bl	d8cd4 <_ZN6String7reserveEj>
   d8d04:	b918      	cbnz	r0, d8d0e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8d06:	4620      	mov	r0, r4
   d8d08:	f7ff ffcd 	bl	d8ca6 <_ZN6String10invalidateEv>
		return *this;
   d8d0c:	e009      	b.n	d8d22 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8d0e:	462a      	mov	r2, r5
   d8d10:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8d12:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8d14:	6820      	ldr	r0, [r4, #0]
   d8d16:	f002 f8ae 	bl	dae76 <memcpy>
	buffer[len] = 0;
   d8d1a:	6822      	ldr	r2, [r4, #0]
   d8d1c:	68a3      	ldr	r3, [r4, #8]
   d8d1e:	2100      	movs	r1, #0
   d8d20:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8d22:	4620      	mov	r0, r4
   d8d24:	bd70      	pop	{r4, r5, r6, pc}

000d8d26 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8d26:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8d28:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8d2a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8d2c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8d2e:	6043      	str	r3, [r0, #4]
	len = 0;
   d8d30:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8d32:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d8d34:	460d      	mov	r5, r1
   d8d36:	b139      	cbz	r1, d8d48 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d8d38:	4608      	mov	r0, r1
   d8d3a:	f002 f8ed 	bl	daf18 <strlen>
   d8d3e:	4629      	mov	r1, r5
   d8d40:	4602      	mov	r2, r0
   d8d42:	4620      	mov	r0, r4
   d8d44:	f7ff ffd7 	bl	d8cf6 <_ZN6String4copyEPKcj>
}
   d8d48:	4620      	mov	r0, r4
   d8d4a:	bd38      	pop	{r3, r4, r5, pc}

000d8d4c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8d4c:	b538      	push	{r3, r4, r5, lr}
   d8d4e:	4605      	mov	r5, r0
	if (buffer) {
   d8d50:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8d52:	460c      	mov	r4, r1
	if (buffer) {
   d8d54:	b160      	cbz	r0, d8d70 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d8d56:	686a      	ldr	r2, [r5, #4]
   d8d58:	688b      	ldr	r3, [r1, #8]
   d8d5a:	429a      	cmp	r2, r3
   d8d5c:	d306      	bcc.n	d8d6c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d8d5e:	6809      	ldr	r1, [r1, #0]
   d8d60:	f002 f8d2 	bl	daf08 <strcpy>
			len = rhs.len;
   d8d64:	68a3      	ldr	r3, [r4, #8]
   d8d66:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d8d68:	2300      	movs	r3, #0
   d8d6a:	e00a      	b.n	d8d82 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d8d6c:	f7ff fdc6 	bl	d88fc <free>
		}
	}
	buffer = rhs.buffer;
   d8d70:	6823      	ldr	r3, [r4, #0]
   d8d72:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d8d74:	6863      	ldr	r3, [r4, #4]
   d8d76:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8d78:	68a3      	ldr	r3, [r4, #8]
   d8d7a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8d7c:	2300      	movs	r3, #0
   d8d7e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d8d80:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d8d82:	60a3      	str	r3, [r4, #8]
   d8d84:	bd38      	pop	{r3, r4, r5, pc}

000d8d86 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8d86:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d8d88:	b510      	push	{r4, lr}
   d8d8a:	460b      	mov	r3, r1
   d8d8c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8d8e:	d007      	beq.n	d8da0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8d90:	6809      	ldr	r1, [r1, #0]
   d8d92:	b119      	cbz	r1, d8d9c <_ZN6StringaSERKS_+0x16>
   d8d94:	689a      	ldr	r2, [r3, #8]
   d8d96:	f7ff ffae 	bl	d8cf6 <_ZN6String4copyEPKcj>
   d8d9a:	e001      	b.n	d8da0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d8d9c:	f7ff ff83 	bl	d8ca6 <_ZN6String10invalidateEv>

	return *this;
}
   d8da0:	4620      	mov	r0, r4
   d8da2:	bd10      	pop	{r4, pc}

000d8da4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d8da4:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d8da6:	b510      	push	{r4, lr}
   d8da8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d8daa:	d001      	beq.n	d8db0 <_ZN6StringaSEOS_+0xc>
   d8dac:	f7ff ffce 	bl	d8d4c <_ZN6String4moveERS_>
	return *this;
}
   d8db0:	4620      	mov	r0, r4
   d8db2:	bd10      	pop	{r4, pc}

000d8db4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8db4:	b538      	push	{r3, r4, r5, lr}
   d8db6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8db8:	460c      	mov	r4, r1
   d8dba:	b141      	cbz	r1, d8dce <_ZN6StringaSEPKc+0x1a>
   d8dbc:	4608      	mov	r0, r1
   d8dbe:	f002 f8ab 	bl	daf18 <strlen>
   d8dc2:	4621      	mov	r1, r4
   d8dc4:	4602      	mov	r2, r0
   d8dc6:	4628      	mov	r0, r5
   d8dc8:	f7ff ff95 	bl	d8cf6 <_ZN6String4copyEPKcj>
   d8dcc:	e001      	b.n	d8dd2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d8dce:	f7ff ff6a 	bl	d8ca6 <_ZN6String10invalidateEv>

	return *this;
}
   d8dd2:	4628      	mov	r0, r5
   d8dd4:	bd38      	pop	{r3, r4, r5, pc}

000d8dd6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d8dd6:	b570      	push	{r4, r5, r6, lr}
   d8dd8:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d8dda:	460e      	mov	r6, r1
   d8ddc:	b909      	cbnz	r1, d8de2 <_ZN6String6concatEPKcj+0xc>
   d8dde:	2000      	movs	r0, #0
   d8de0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d8de2:	b16a      	cbz	r2, d8e00 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d8de4:	6883      	ldr	r3, [r0, #8]
   d8de6:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d8de8:	4629      	mov	r1, r5
   d8dea:	f7ff ff73 	bl	d8cd4 <_ZN6String7reserveEj>
   d8dee:	2800      	cmp	r0, #0
   d8df0:	d0f5      	beq.n	d8dde <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d8df2:	6820      	ldr	r0, [r4, #0]
   d8df4:	68a3      	ldr	r3, [r4, #8]
   d8df6:	4631      	mov	r1, r6
   d8df8:	4418      	add	r0, r3
   d8dfa:	f002 f885 	bl	daf08 <strcpy>
	len = newlen;
   d8dfe:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d8e00:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d8e02:	bd70      	pop	{r4, r5, r6, pc}

000d8e04 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d8e04:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d8e06:	688a      	ldr	r2, [r1, #8]
   d8e08:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d8e0a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d8e0c:	f7ff ffe3 	bl	d8dd6 <_ZN6String6concatEPKcj>
   d8e10:	b910      	cbnz	r0, d8e18 <_ZplRK15StringSumHelperRK6String+0x14>
   d8e12:	4620      	mov	r0, r4
   d8e14:	f7ff ff47 	bl	d8ca6 <_ZN6String10invalidateEv>
	return a;
}
   d8e18:	4620      	mov	r0, r4
   d8e1a:	bd10      	pop	{r4, pc}

000d8e1c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8e1c:	b510      	push	{r4, lr}
   d8e1e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8e20:	6800      	ldr	r0, [r0, #0]
   d8e22:	b108      	cbz	r0, d8e28 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8e24:	f7ff fb6e 	bl	d8504 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d8e28:	4620      	mov	r0, r4
   d8e2a:	bd10      	pop	{r4, pc}

000d8e2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8e2c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8e2e:	4c06      	ldr	r4, [pc, #24]	; (d8e48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8e30:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8e32:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8e34:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8e36:	f7ff fb5d 	bl	d84f4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8e3a:	4620      	mov	r0, r4
   d8e3c:	4a03      	ldr	r2, [pc, #12]	; (d8e4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8e3e:	4904      	ldr	r1, [pc, #16]	; (d8e50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8e44:	f001 ba76 	b.w	da334 <__aeabi_atexit>
   d8e48:	2003e0fc 	.word	0x2003e0fc
   d8e4c:	2003da28 	.word	0x2003da28
   d8e50:	000d8e1d 	.word	0x000d8e1d

000d8e54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8e56:	4606      	mov	r6, r0
   d8e58:	460d      	mov	r5, r1
   d8e5a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8e5c:	2400      	movs	r4, #0
  while (size--) {
   d8e5e:	42bd      	cmp	r5, r7
   d8e60:	d00c      	beq.n	d8e7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8e62:	6833      	ldr	r3, [r6, #0]
   d8e64:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8e68:	689b      	ldr	r3, [r3, #8]
   d8e6a:	4630      	mov	r0, r6
   d8e6c:	4798      	blx	r3
     if (chunk>=0)
   d8e6e:	2800      	cmp	r0, #0
   d8e70:	db01      	blt.n	d8e76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8e72:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d8e74:	e7f3      	b.n	d8e5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8e76:	2c00      	cmp	r4, #0
   d8e78:	bf08      	it	eq
   d8e7a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8e7c:	4620      	mov	r0, r4
   d8e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8e80 <_ZN5Print5printEPKc>:
   d8e80:	b508      	push	{r3, lr}
   d8e82:	f7fe fa03 	bl	d728c <_ZN5Print5writeEPKc>
   d8e86:	bd08      	pop	{r3, pc}

000d8e88 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8e88:	6803      	ldr	r3, [r0, #0]
   d8e8a:	689b      	ldr	r3, [r3, #8]
   d8e8c:	4718      	bx	r3

000d8e8e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8e8e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8e90:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8e92:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8e94:	f7ff fff8 	bl	d8e88 <_ZN5Print5printEc>
  n += print('\n');
   d8e98:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d8e9a:	4604      	mov	r4, r0
  n += print('\n');
   d8e9c:	4628      	mov	r0, r5
   d8e9e:	f7ff fff3 	bl	d8e88 <_ZN5Print5printEc>
  return n;
}
   d8ea2:	4420      	add	r0, r4
   d8ea4:	bd38      	pop	{r3, r4, r5, pc}

000d8ea6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8ea6:	b538      	push	{r3, r4, r5, lr}
   d8ea8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8eaa:	f7fe f9ef 	bl	d728c <_ZN5Print5writeEPKc>
   d8eae:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d8eb0:	4628      	mov	r0, r5
   d8eb2:	f7ff ffec 	bl	d8e8e <_ZN5Print7printlnEv>
  return n;
}
   d8eb6:	4420      	add	r0, r4
   d8eb8:	bd38      	pop	{r3, r4, r5, pc}

000d8eba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8eba:	b530      	push	{r4, r5, lr}
   d8ebc:	b08b      	sub	sp, #44	; 0x2c
   d8ebe:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8ec0:	2100      	movs	r1, #0
   d8ec2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8ec6:	2a01      	cmp	r2, #1
   d8ec8:	bf98      	it	ls
   d8eca:	220a      	movls	r2, #10
   d8ecc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d8ed0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d8ed4:	fb05 3312 	mls	r3, r5, r2, r3
   d8ed8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8edc:	2b09      	cmp	r3, #9
   d8ede:	bf94      	ite	ls
   d8ee0:	3330      	addls	r3, #48	; 0x30
   d8ee2:	3337      	addhi	r3, #55	; 0x37
   d8ee4:	b2db      	uxtb	r3, r3
   d8ee6:	4621      	mov	r1, r4
   d8ee8:	f804 3901 	strb.w	r3, [r4], #-1
   d8eec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8eee:	2d00      	cmp	r5, #0
   d8ef0:	d1ee      	bne.n	d8ed0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d8ef2:	f7fe f9cb 	bl	d728c <_ZN5Print5writeEPKc>
}
   d8ef6:	b00b      	add	sp, #44	; 0x2c
   d8ef8:	bd30      	pop	{r4, r5, pc}

000d8efa <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8efa:	b40c      	push	{r2, r3}
   d8efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8f00:	b087      	sub	sp, #28
   d8f02:	af00      	add	r7, sp, #0
   d8f04:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d8f08:	4605      	mov	r5, r0
   d8f0a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d8f0e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8f10:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d8f12:	4623      	mov	r3, r4
   d8f14:	464a      	mov	r2, r9
   d8f16:	2114      	movs	r1, #20
   d8f18:	1d38      	adds	r0, r7, #4
   d8f1a:	f7ff fd07 	bl	d892c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d8f1e:	2813      	cmp	r0, #19
   d8f20:	d805      	bhi.n	d8f2e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8f22:	1d39      	adds	r1, r7, #4
   d8f24:	4628      	mov	r0, r5
   d8f26:	f7fe f9b1 	bl	d728c <_ZN5Print5writeEPKc>
   d8f2a:	4604      	mov	r4, r0
   d8f2c:	e013      	b.n	d8f56 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8f2e:	f100 0308 	add.w	r3, r0, #8
   d8f32:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d8f36:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8f38:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d8f3c:	1c41      	adds	r1, r0, #1
   d8f3e:	4623      	mov	r3, r4
   d8f40:	464a      	mov	r2, r9
   d8f42:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d8f44:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d8f46:	f7ff fcf1 	bl	d892c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8f4a:	4669      	mov	r1, sp
   d8f4c:	4628      	mov	r0, r5
   d8f4e:	f7fe f99d 	bl	d728c <_ZN5Print5writeEPKc>
   d8f52:	4604      	mov	r4, r0
   d8f54:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8f56:	b11e      	cbz	r6, d8f60 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8f58:	4628      	mov	r0, r5
   d8f5a:	f7ff ff98 	bl	d8e8e <_ZN5Print7printlnEv>
   d8f5e:	4404      	add	r4, r0
    return n;
}
   d8f60:	4620      	mov	r0, r4
   d8f62:	371c      	adds	r7, #28
   d8f64:	46bd      	mov	sp, r7
   d8f66:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8f6a:	b002      	add	sp, #8
   d8f6c:	4770      	bx	lr
	...

000d8f70 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8f70:	4b01      	ldr	r3, [pc, #4]	; (d8f78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8f72:	4a02      	ldr	r2, [pc, #8]	; (d8f7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8f74:	601a      	str	r2, [r3, #0]
   d8f76:	4770      	bx	lr
   d8f78:	2003e100 	.word	0x2003e100
   d8f7c:	000db34b 	.word	0x000db34b

000d8f80 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8f80:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8f82:	2000      	movs	r0, #0
   d8f84:	f7ff fca2 	bl	d88cc <spark_sync_time_pending>
   d8f88:	b128      	cbz	r0, d8f96 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8f8a:	f7ff fc87 	bl	d889c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8f8e:	f080 0001 	eor.w	r0, r0, #1
   d8f92:	b2c0      	uxtb	r0, r0
   d8f94:	bd08      	pop	{r3, pc}
   d8f96:	2001      	movs	r0, #1
    }
   d8f98:	bd08      	pop	{r3, pc}

000d8f9a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8f9a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8f9c:	2000      	movs	r0, #0
   d8f9e:	f7ff fa59 	bl	d8454 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8fa2:	4604      	mov	r4, r0
   d8fa4:	b968      	cbnz	r0, d8fc2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8fa6:	f7ff fbe5 	bl	d8774 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8faa:	2801      	cmp	r0, #1
   d8fac:	d10b      	bne.n	d8fc6 <_ZN9TimeClass7isValidEv+0x2c>
   d8fae:	4620      	mov	r0, r4
   d8fb0:	f7ff fc00 	bl	d87b4 <system_thread_get_state>
   d8fb4:	b938      	cbnz	r0, d8fc6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8fb6:	f7ff ffe3 	bl	d8f80 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8fba:	b930      	cbnz	r0, d8fca <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8fbc:	f7ff fc66 	bl	d888c <spark_process>
   d8fc0:	e7f9      	b.n	d8fb6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8fc2:	2001      	movs	r0, #1
   d8fc4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d8fc6:	2000      	movs	r0, #0
   d8fc8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d8fca:	f7ff ffd9 	bl	d8f80 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d8fce:	2000      	movs	r0, #0
   d8fd0:	f7ff fa40 	bl	d8454 <HAL_RTC_Time_Is_Valid>
   d8fd4:	3000      	adds	r0, #0
   d8fd6:	bf18      	it	ne
   d8fd8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8fda:	bd10      	pop	{r4, pc}

000d8fdc <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d8fdc:	b508      	push	{r3, lr}
    (void)isValid();
   d8fde:	f7ff ffdc 	bl	d8f9a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8fe6:	f7ff ba15 	b.w	d8414 <HAL_RTC_Get_UnixTime>
	...

000d8fec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8fec:	4b02      	ldr	r3, [pc, #8]	; (d8ff8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8fee:	681a      	ldr	r2, [r3, #0]
   d8ff0:	4b02      	ldr	r3, [pc, #8]	; (d8ffc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8ff2:	601a      	str	r2, [r3, #0]
   d8ff4:	4770      	bx	lr
   d8ff6:	bf00      	nop
   d8ff8:	2003d9c0 	.word	0x2003d9c0
   d8ffc:	2003e104 	.word	0x2003e104

000d9000 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d9000:	2100      	movs	r1, #0
   d9002:	f7ff bbc7 	b.w	d8794 <system_delay_ms>

000d9006 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9006:	b510      	push	{r4, lr}
   d9008:	4604      	mov	r4, r0
   d900a:	f7fc f8ab 	bl	d5164 <_ZNSt14_Function_baseD1Ev>
   d900e:	4620      	mov	r0, r4
   d9010:	bd10      	pop	{r4, pc}
	...

000d9014 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9014:	4803      	ldr	r0, [pc, #12]	; (d9024 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9016:	4a04      	ldr	r2, [pc, #16]	; (d9028 <_GLOBAL__sub_I_RGB+0x14>)
   d9018:	4904      	ldr	r1, [pc, #16]	; (d902c <_GLOBAL__sub_I_RGB+0x18>)
   d901a:	2300      	movs	r3, #0
   d901c:	6083      	str	r3, [r0, #8]
   d901e:	f001 b989 	b.w	da334 <__aeabi_atexit>
   d9022:	bf00      	nop
   d9024:	2003e108 	.word	0x2003e108
   d9028:	2003da28 	.word	0x2003da28
   d902c:	000d9007 	.word	0x000d9007

000d9030 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d9030:	7d00      	ldrb	r0, [r0, #20]
   d9032:	4770      	bx	lr

000d9034 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d9034:	7d03      	ldrb	r3, [r0, #20]
   d9036:	b11b      	cbz	r3, d9040 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d9038:	6983      	ldr	r3, [r0, #24]
   d903a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d903e:	d102      	bne.n	d9046 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d9040:	ed9f 0a05 	vldr	s0, [pc, #20]	; d9058 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d9044:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d9046:	ee07 3a90 	vmov	s15, r3
   d904a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d905c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d904e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9052:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d9056:	4770      	bx	lr
   d9058:	00000000 	.word	0x00000000
   d905c:	42c80000 	.word	0x42c80000

000d9060 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d9060:	7d03      	ldrb	r3, [r0, #20]
   d9062:	b11b      	cbz	r3, d906c <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d9064:	6a03      	ldr	r3, [r0, #32]
   d9066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d906a:	d102      	bne.n	d9072 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d906c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d9084 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d9070:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d9072:	ee07 3a90 	vmov	s15, r3
   d9076:	ed9f 7a04 	vldr	s14, [pc, #16]	; d9088 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d907a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d907e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d9082:	4770      	bx	lr
   d9084:	00000000 	.word	0x00000000
   d9088:	42c80000 	.word	0x42c80000

000d908c <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d908c:	7d03      	ldrb	r3, [r0, #20]
   d908e:	b17b      	cbz	r3, d90b0 <_ZNK14CellularSignal10getQualityEv+0x24>
   d9090:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d9092:	2b00      	cmp	r3, #0
   d9094:	db0c      	blt.n	d90b0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d9096:	ee07 3a90 	vmov	s15, r3
   d909a:	eddf 6a07 	vldr	s13, [pc, #28]	; d90b8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d909e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d90bc <_ZNK14CellularSignal10getQualityEv+0x30>
   d90a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d90a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d90aa:	ee27 0a80 	vmul.f32	s0, s15, s0
   d90ae:	4770      	bx	lr
    }

    return -1.0f;
   d90b0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d90b4:	4770      	bx	lr
   d90b6:	bf00      	nop
   d90b8:	477fff00 	.word	0x477fff00
   d90bc:	42c80000 	.word	0x42c80000

000d90c0 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d90c0:	7d03      	ldrb	r3, [r0, #20]
   d90c2:	b17b      	cbz	r3, d90e4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d90c4:	69c3      	ldr	r3, [r0, #28]
   d90c6:	2b00      	cmp	r3, #0
   d90c8:	db0c      	blt.n	d90e4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d90ca:	ee07 3a90 	vmov	s15, r3
   d90ce:	eddf 6a07 	vldr	s13, [pc, #28]	; d90ec <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d90d2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d90f0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d90d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d90da:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d90de:	ee27 0a80 	vmul.f32	s0, s15, s0
   d90e2:	4770      	bx	lr
    }

    return -1.0f;
   d90e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d90e8:	4770      	bx	lr
   d90ea:	bf00      	nop
   d90ec:	477fff00 	.word	0x477fff00
   d90f0:	42c80000 	.word	0x42c80000

000d90f4 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d90f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d90f8:	4607      	mov	r7, r0
   d90fa:	460c      	mov	r4, r1
{
    if (base == 0) {
   d90fc:	4615      	mov	r5, r2
   d90fe:	b92a      	cbnz	r2, d910c <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d9100:	6803      	ldr	r3, [r0, #0]
   d9102:	b2c9      	uxtb	r1, r1
   d9104:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d9106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d910a:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d910c:	2900      	cmp	r1, #0
   d910e:	da07      	bge.n	d9120 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d9110:	2a0a      	cmp	r2, #10
   d9112:	d105      	bne.n	d9120 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d9114:	212d      	movs	r1, #45	; 0x2d
   d9116:	f7ff feb7 	bl	d8e88 <_ZN5Print5printEc>
            val = -n;
   d911a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d911c:	4606      	mov	r6, r0
            val = -n;
   d911e:	e001      	b.n	d9124 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d9120:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d9122:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9124:	b2ea      	uxtb	r2, r5
   d9126:	4638      	mov	r0, r7
   d9128:	f7ff fec7 	bl	d8eba <_ZN5Print11printNumberEmh>
    }
}
   d912c:	4430      	add	r0, r6
   d912e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9132 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d9132:	b570      	push	{r4, r5, r6, lr}
   d9134:	460d      	mov	r5, r1
   d9136:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d9138:	220a      	movs	r2, #10
   d913a:	6881      	ldr	r1, [r0, #8]
   d913c:	4628      	mov	r0, r5
   d913e:	f7ff ffd9 	bl	d90f4 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d9142:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d9144:	4604      	mov	r4, r0
    n += p.print(',');
   d9146:	4628      	mov	r0, r5
   d9148:	f7ff fe9e 	bl	d8e88 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d914c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d914e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d9150:	68f1      	ldr	r1, [r6, #12]
   d9152:	4628      	mov	r0, r5
   d9154:	f7ff ffce 	bl	d90f4 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d9158:	4420      	add	r0, r4
   d915a:	bd70      	pop	{r4, r5, r6, pc}

000d915c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d915c:	f1a0 0004 	sub.w	r0, r0, #4
   d9160:	f7ff bfe7 	b.w	d9132 <_ZNK14CellularSignal7printToER5Print>

000d9164 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d9164:	6800      	ldr	r0, [r0, #0]
   d9166:	f000 bba2 	b.w	d98ae <_ZN7TwoWire4lockEv>

000d916a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d916a:	b510      	push	{r4, lr}
   d916c:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d916e:	6001      	str	r1, [r0, #0]
   d9170:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d9172:	b10a      	cbz	r2, d9178 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d9174:	f7ff fff6 	bl	d9164 <_ZN9FuelGauge4lockEv>
    }
}
   d9178:	4620      	mov	r0, r4
   d917a:	bd10      	pop	{r4, pc}

000d917c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d917c:	b538      	push	{r3, r4, r5, lr}
   d917e:	4604      	mov	r4, r0
   d9180:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d9182:	f001 f8b1 	bl	da2e8 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d9186:	462a      	mov	r2, r5
   d9188:	4601      	mov	r1, r0
   d918a:	4620      	mov	r0, r4
   d918c:	f7ff ffed 	bl	d916a <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d9190:	4620      	mov	r0, r4
   d9192:	bd38      	pop	{r3, r4, r5, pc}

000d9194 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d9194:	6800      	ldr	r0, [r0, #0]
   d9196:	f000 bb93 	b.w	d98c0 <_ZN7TwoWire6unlockEv>

000d919a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d919a:	b510      	push	{r4, lr}
{
    if (lock_) {
   d919c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d919e:	4604      	mov	r4, r0
{
    if (lock_) {
   d91a0:	b10b      	cbz	r3, d91a6 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d91a2:	f7ff fff7 	bl	d9194 <_ZN9FuelGauge6unlockEv>
    }
}
   d91a6:	4620      	mov	r0, r4
   d91a8:	bd10      	pop	{r4, pc}

000d91aa <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d91aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d91ac:	4604      	mov	r4, r0
   d91ae:	4616      	mov	r6, r2
   d91b0:	461d      	mov	r5, r3
   d91b2:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d91b4:	f7ff ffd6 	bl	d9164 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d91b8:	6820      	ldr	r0, [r4, #0]
   d91ba:	2136      	movs	r1, #54	; 0x36
   d91bc:	f000 fb6c 	bl	d9898 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d91c0:	6820      	ldr	r0, [r4, #0]
   d91c2:	6803      	ldr	r3, [r0, #0]
   d91c4:	4639      	mov	r1, r7
   d91c6:	689b      	ldr	r3, [r3, #8]
   d91c8:	4798      	blx	r3
    i2c_.endTransmission(true);
   d91ca:	2101      	movs	r1, #1
   d91cc:	6820      	ldr	r0, [r4, #0]
   d91ce:	f000 fb66 	bl	d989e <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d91d2:	2202      	movs	r2, #2
   d91d4:	2136      	movs	r1, #54	; 0x36
   d91d6:	2301      	movs	r3, #1
   d91d8:	6820      	ldr	r0, [r4, #0]
   d91da:	f000 fb47 	bl	d986c <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d91de:	6820      	ldr	r0, [r4, #0]
   d91e0:	6803      	ldr	r3, [r0, #0]
   d91e2:	695b      	ldr	r3, [r3, #20]
   d91e4:	4798      	blx	r3
   d91e6:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d91e8:	6820      	ldr	r0, [r4, #0]
   d91ea:	6803      	ldr	r3, [r0, #0]
   d91ec:	695b      	ldr	r3, [r3, #20]
   d91ee:	4798      	blx	r3
   d91f0:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d91f2:	4620      	mov	r0, r4
}
   d91f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d91f8:	f7ff bfcc 	b.w	d9194 <_ZN9FuelGauge6unlockEv>

000d91fc <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d91fc:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d91fe:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d9200:	2200      	movs	r2, #0
	byte LSB = 0;
   d9202:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d9206:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d920a:	2104      	movs	r1, #4
   d920c:	f10d 0206 	add.w	r2, sp, #6
   d9210:	f7ff ffcb 	bl	d91aa <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d9214:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9218:	f001 fb48 	bl	da8ac <__aeabi_i2d>
   d921c:	2200      	movs	r2, #0
   d921e:	4b09      	ldr	r3, [pc, #36]	; (d9244 <_ZN9FuelGauge6getSoCEv+0x48>)
   d9220:	f001 fbaa 	bl	da978 <__aeabi_dmul>
   d9224:	f001 fdba 	bl	dad9c <__aeabi_d2f>
   d9228:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d922c:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d9230:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d9234:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d9238:	ee37 0a80 	vadd.f32	s0, s15, s0
   d923c:	b003      	add	sp, #12
   d923e:	f85d fb04 	ldr.w	pc, [sp], #4
   d9242:	bf00      	nop
   d9244:	3f700000 	.word	0x3f700000

000d9248 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d9248:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d924a:	4b0c      	ldr	r3, [pc, #48]	; (d927c <serialEventRun+0x34>)
   d924c:	b133      	cbz	r3, d925c <serialEventRun+0x14>
   d924e:	f000 f977 	bl	d9540 <_Z16_fetch_usbserialv>
   d9252:	6803      	ldr	r3, [r0, #0]
   d9254:	691b      	ldr	r3, [r3, #16]
   d9256:	4798      	blx	r3
   d9258:	2800      	cmp	r0, #0
   d925a:	dc09      	bgt.n	d9270 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d925c:	4b08      	ldr	r3, [pc, #32]	; (d9280 <serialEventRun+0x38>)
   d925e:	b163      	cbz	r3, d927a <serialEventRun+0x32>
   d9260:	f000 fa84 	bl	d976c <_Z22__fetch_global_Serial1v>
   d9264:	6803      	ldr	r3, [r0, #0]
   d9266:	691b      	ldr	r3, [r3, #16]
   d9268:	4798      	blx	r3
   d926a:	2800      	cmp	r0, #0
   d926c:	dc03      	bgt.n	d9276 <serialEventRun+0x2e>
   d926e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d9270:	f3af 8000 	nop.w
   d9274:	e7f2      	b.n	d925c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d9276:	f3af 8000 	nop.w
   d927a:	bd08      	pop	{r3, pc}
	...

000d9284 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d9284:	b508      	push	{r3, lr}
	serialEventRun();
   d9286:	f7ff ffdf 	bl	d9248 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d928a:	f7ff f8bb 	bl	d8404 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d928e:	4b01      	ldr	r3, [pc, #4]	; (d9294 <_post_loop+0x10>)
   d9290:	6018      	str	r0, [r3, #0]
   d9292:	bd08      	pop	{r3, pc}
   d9294:	2003e4f4 	.word	0x2003e4f4

000d9298 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9298:	4802      	ldr	r0, [pc, #8]	; (d92a4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d929a:	4a03      	ldr	r2, [pc, #12]	; (d92a8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d929c:	4903      	ldr	r1, [pc, #12]	; (d92ac <_Z33system_initialize_user_backup_ramv+0x14>)
   d929e:	1a12      	subs	r2, r2, r0
   d92a0:	f001 bde9 	b.w	dae76 <memcpy>
   d92a4:	2003f400 	.word	0x2003f400
   d92a8:	2003f404 	.word	0x2003f404
   d92ac:	000db6e0 	.word	0x000db6e0

000d92b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d92b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d92b2:	2300      	movs	r3, #0
   d92b4:	9300      	str	r3, [sp, #0]
   d92b6:	461a      	mov	r2, r3
   d92b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d92bc:	f7ff fa8c 	bl	d87d8 <system_ctrl_set_result>
}
   d92c0:	b003      	add	sp, #12
   d92c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d92c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d92c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d92ca:	8843      	ldrh	r3, [r0, #2]
   d92cc:	2b0a      	cmp	r3, #10
   d92ce:	d008      	beq.n	d92e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d92d0:	2b50      	cmp	r3, #80	; 0x50
   d92d2:	d109      	bne.n	d92e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d92d4:	4b09      	ldr	r3, [pc, #36]	; (d92fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d92d6:	681b      	ldr	r3, [r3, #0]
   d92d8:	b13b      	cbz	r3, d92ea <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d92da:	b003      	add	sp, #12
   d92dc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d92e0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d92e2:	f7ff ffe5 	bl	d92b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d92e6:	e006      	b.n	d92f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d92e8:	2300      	movs	r3, #0
   d92ea:	9300      	str	r3, [sp, #0]
   d92ec:	461a      	mov	r2, r3
   d92ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d92f2:	f7ff fa71 	bl	d87d8 <system_ctrl_set_result>
        break;
    }
}
   d92f6:	b003      	add	sp, #12
   d92f8:	f85d fb04 	ldr.w	pc, [sp], #4
   d92fc:	2003e118 	.word	0x2003e118

000d9300 <module_user_init_hook>:

void module_user_init_hook()
{
   d9300:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9302:	4c10      	ldr	r4, [pc, #64]	; (d9344 <module_user_init_hook+0x44>)
   d9304:	4d10      	ldr	r5, [pc, #64]	; (d9348 <module_user_init_hook+0x48>)
   d9306:	6823      	ldr	r3, [r4, #0]
   d9308:	42ab      	cmp	r3, r5
   d930a:	4b10      	ldr	r3, [pc, #64]	; (d934c <module_user_init_hook+0x4c>)
   d930c:	bf0c      	ite	eq
   d930e:	2201      	moveq	r2, #1
   d9310:	2200      	movne	r2, #0
   d9312:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9314:	d002      	beq.n	d931c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d9316:	f7ff ffbf 	bl	d9298 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d931a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d931c:	f7ff f862 	bl	d83e4 <HAL_RNG_GetRandomNumber>
   d9320:	4604      	mov	r4, r0
    srand(seed);
   d9322:	f001 fdbb 	bl	dae9c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9326:	4b0a      	ldr	r3, [pc, #40]	; (d9350 <module_user_init_hook+0x50>)
   d9328:	b113      	cbz	r3, d9330 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d932a:	4620      	mov	r0, r4
   d932c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9330:	2100      	movs	r1, #0
   d9332:	4807      	ldr	r0, [pc, #28]	; (d9350 <module_user_init_hook+0x50>)
   d9334:	f7ff fad2 	bl	d88dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9338:	2100      	movs	r1, #0
   d933a:	4806      	ldr	r0, [pc, #24]	; (d9354 <module_user_init_hook+0x54>)
}
   d933c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9340:	f7ff ba40 	b.w	d87c4 <system_ctrl_set_app_request_handler>
   d9344:	2003f400 	.word	0x2003f400
   d9348:	9a271c1e 	.word	0x9a271c1e
   d934c:	2003e11c 	.word	0x2003e11c
   d9350:	00000000 	.word	0x00000000
   d9354:	000d92c9 	.word	0x000d92c9

000d9358 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9358:	4770      	bx	lr

000d935a <_ZN9IPAddressD0Ev>:
   d935a:	b510      	push	{r4, lr}
   d935c:	2118      	movs	r1, #24
   d935e:	4604      	mov	r4, r0
   d9360:	f000 fff6 	bl	da350 <_ZdlPvj>
   d9364:	4620      	mov	r0, r4
   d9366:	bd10      	pop	{r4, pc}

000d9368 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9368:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d936a:	7d03      	ldrb	r3, [r0, #20]
   d936c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d936e:	b08d      	sub	sp, #52	; 0x34
   d9370:	460e      	mov	r6, r1
   d9372:	f100 0704 	add.w	r7, r0, #4
   d9376:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d937a:	d002      	beq.n	d9382 <_ZNK9IPAddress7printToER5Print+0x1a>
   d937c:	f100 0508 	add.w	r5, r0, #8
   d9380:	e018      	b.n	d93b4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9382:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9384:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9386:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d938a:	232f      	movs	r3, #47	; 0x2f
   d938c:	462a      	mov	r2, r5
   d938e:	200a      	movs	r0, #10
   d9390:	f7ff f8c8 	bl	d8524 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9394:	4628      	mov	r0, r5
   d9396:	f001 fdbf 	bl	daf18 <strlen>
   d939a:	6833      	ldr	r3, [r6, #0]
   d939c:	4602      	mov	r2, r0
   d939e:	68db      	ldr	r3, [r3, #12]
   d93a0:	4629      	mov	r1, r5
   d93a2:	4630      	mov	r0, r6
   d93a4:	4798      	blx	r3
   d93a6:	e00f      	b.n	d93c8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d93a8:	b124      	cbz	r4, d93b4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d93aa:	212e      	movs	r1, #46	; 0x2e
   d93ac:	4630      	mov	r0, r6
   d93ae:	f7ff fd6b 	bl	d8e88 <_ZN5Print5printEc>
   d93b2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d93b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d93b8:	220a      	movs	r2, #10
   d93ba:	4630      	mov	r0, r6
   d93bc:	f7ff fd7d 	bl	d8eba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d93c0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d93c2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d93c4:	d1f0      	bne.n	d93a8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d93c6:	4620      	mov	r0, r4
    }
    return n;
}
   d93c8:	b00d      	add	sp, #52	; 0x34
   d93ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d93cc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d93cc:	b510      	push	{r4, lr}
   d93ce:	4b05      	ldr	r3, [pc, #20]	; (d93e4 <_ZN9IPAddressC1Ev+0x18>)
   d93d0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d93d2:	2211      	movs	r2, #17
   d93d4:	f840 3b04 	str.w	r3, [r0], #4
   d93d8:	2100      	movs	r1, #0
   d93da:	f001 fd57 	bl	dae8c <memset>
{
    clear();
}
   d93de:	4620      	mov	r0, r4
   d93e0:	bd10      	pop	{r4, pc}
   d93e2:	bf00      	nop
   d93e4:	000db41c 	.word	0x000db41c

000d93e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d93e8:	4603      	mov	r3, r0
   d93ea:	4a07      	ldr	r2, [pc, #28]	; (d9408 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d93ec:	b510      	push	{r4, lr}
   d93ee:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d93f2:	f101 0210 	add.w	r2, r1, #16
   d93f6:	f851 4b04 	ldr.w	r4, [r1], #4
   d93fa:	f843 4b04 	str.w	r4, [r3], #4
   d93fe:	4291      	cmp	r1, r2
   d9400:	d1f9      	bne.n	d93f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9402:	780a      	ldrb	r2, [r1, #0]
   d9404:	701a      	strb	r2, [r3, #0]
}
   d9406:	bd10      	pop	{r4, pc}
   d9408:	000db41c 	.word	0x000db41c

000d940c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d940c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d940e:	2b04      	cmp	r3, #4
   d9410:	d101      	bne.n	d9416 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d9412:	6840      	ldr	r0, [r0, #4]
   d9414:	e008      	b.n	d9428 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d9416:	2b06      	cmp	r3, #6
   d9418:	d10a      	bne.n	d9430 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d941a:	6843      	ldr	r3, [r0, #4]
   d941c:	b953      	cbnz	r3, d9434 <_ZNK9IPAddresscvbEv+0x28>
   d941e:	6883      	ldr	r3, [r0, #8]
   d9420:	b943      	cbnz	r3, d9434 <_ZNK9IPAddresscvbEv+0x28>
   d9422:	68c3      	ldr	r3, [r0, #12]
   d9424:	b933      	cbnz	r3, d9434 <_ZNK9IPAddresscvbEv+0x28>
   d9426:	6900      	ldr	r0, [r0, #16]
   d9428:	3000      	adds	r0, #0
   d942a:	bf18      	it	ne
   d942c:	2001      	movne	r0, #1
   d942e:	4770      	bx	lr
    } else {
        return false;
   d9430:	2000      	movs	r0, #0
   d9432:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9434:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d9436:	4770      	bx	lr

000d9438 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9438:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d943a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d943e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9442:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9446:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d944a:	2304      	movs	r3, #4
   d944c:	6041      	str	r1, [r0, #4]
   d944e:	7503      	strb	r3, [r0, #20]
   d9450:	bd10      	pop	{r4, pc}

000d9452 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d9452:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9454:	780d      	ldrb	r5, [r1, #0]
   d9456:	788b      	ldrb	r3, [r1, #2]
   d9458:	784a      	ldrb	r2, [r1, #1]
   d945a:	78c9      	ldrb	r1, [r1, #3]
   d945c:	9100      	str	r1, [sp, #0]
   d945e:	4629      	mov	r1, r5
   d9460:	f7ff ffea 	bl	d9438 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9464:	b003      	add	sp, #12
   d9466:	bd30      	pop	{r4, r5, pc}

000d9468 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d9468:	b510      	push	{r4, lr}
   d946a:	4b03      	ldr	r3, [pc, #12]	; (d9478 <_ZN9IPAddressC1EPKh+0x10>)
   d946c:	6003      	str	r3, [r0, #0]
   d946e:	4604      	mov	r4, r0
{
    *this = address;
   d9470:	f7ff ffef 	bl	d9452 <_ZN9IPAddressaSEPKh>
}
   d9474:	4620      	mov	r0, r4
   d9476:	bd10      	pop	{r4, pc}
   d9478:	000db41c 	.word	0x000db41c

000d947c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d947c:	7441      	strb	r1, [r0, #17]
   d947e:	4770      	bx	lr

000d9480 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9480:	4770      	bx	lr

000d9482 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9482:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9484:	2100      	movs	r1, #0
   d9486:	7c00      	ldrb	r0, [r0, #16]
   d9488:	f7ff f954 	bl	d8734 <HAL_USB_USART_Receive_Data>
}
   d948c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9490:	bf28      	it	cs
   d9492:	f04f 30ff 	movcs.w	r0, #4294967295
   d9496:	bd08      	pop	{r3, pc}

000d9498 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9498:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d949a:	2101      	movs	r1, #1
   d949c:	7c00      	ldrb	r0, [r0, #16]
   d949e:	f7ff f949 	bl	d8734 <HAL_USB_USART_Receive_Data>
}
   d94a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d94a6:	bf28      	it	cs
   d94a8:	f04f 30ff 	movcs.w	r0, #4294967295
   d94ac:	bd08      	pop	{r3, pc}

000d94ae <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d94ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d94b0:	7c00      	ldrb	r0, [r0, #16]
   d94b2:	f7ff f937 	bl	d8724 <HAL_USB_USART_Available_Data_For_Write>
}
   d94b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d94ba:	bd08      	pop	{r3, pc}

000d94bc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d94bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d94be:	7c00      	ldrb	r0, [r0, #16]
   d94c0:	f7ff f928 	bl	d8714 <HAL_USB_USART_Available_Data>
}
   d94c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d94c8:	bd08      	pop	{r3, pc}

000d94ca <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d94ca:	7c00      	ldrb	r0, [r0, #16]
   d94cc:	f7ff b942 	b.w	d8754 <HAL_USB_USART_Flush_Data>

000d94d0 <_ZN9USBSerialD0Ev>:
   d94d0:	b510      	push	{r4, lr}
   d94d2:	2114      	movs	r1, #20
   d94d4:	4604      	mov	r4, r0
   d94d6:	f000 ff3b 	bl	da350 <_ZdlPvj>
   d94da:	4620      	mov	r0, r4
   d94dc:	bd10      	pop	{r4, pc}

000d94de <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d94de:	b538      	push	{r3, r4, r5, lr}
   d94e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d94e2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d94e4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d94e6:	f7ff f91d 	bl	d8724 <HAL_USB_USART_Available_Data_For_Write>
   d94ea:	2800      	cmp	r0, #0
   d94ec:	dc01      	bgt.n	d94f2 <_ZN9USBSerial5writeEh+0x14>
   d94ee:	7c60      	ldrb	r0, [r4, #17]
   d94f0:	b128      	cbz	r0, d94fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d94f2:	4629      	mov	r1, r5
   d94f4:	7c20      	ldrb	r0, [r4, #16]
   d94f6:	f7ff f925 	bl	d8744 <HAL_USB_USART_Send_Data>
   d94fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d94fe:	bd38      	pop	{r3, r4, r5, pc}

000d9500 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9500:	b510      	push	{r4, lr}
   d9502:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9504:	2300      	movs	r3, #0
   d9506:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d950c:	60a3      	str	r3, [r4, #8]
   d950e:	4b05      	ldr	r3, [pc, #20]	; (d9524 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9510:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9512:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9514:	4608      	mov	r0, r1
{
  _serial = serial;
   d9516:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9518:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d951a:	4611      	mov	r1, r2
   d951c:	f7ff f8ea 	bl	d86f4 <HAL_USB_USART_Init>
}
   d9520:	4620      	mov	r0, r4
   d9522:	bd10      	pop	{r4, pc}
   d9524:	000db430 	.word	0x000db430

000d9528 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9528:	2200      	movs	r2, #0
   d952a:	7c00      	ldrb	r0, [r0, #16]
   d952c:	f7ff b8ea 	b.w	d8704 <HAL_USB_USART_Begin>

000d9530 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9530:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9532:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9534:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9536:	2100      	movs	r1, #0
   d9538:	f001 fca8 	bl	dae8c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d953c:	4620      	mov	r0, r4
   d953e:	bd10      	pop	{r4, pc}

000d9540 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9540:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9542:	4d0e      	ldr	r5, [pc, #56]	; (d957c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9544:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9546:	a801      	add	r0, sp, #4
   d9548:	f7ff fff2 	bl	d9530 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d954c:	6829      	ldr	r1, [r5, #0]
   d954e:	f011 0401 	ands.w	r4, r1, #1
   d9552:	d110      	bne.n	d9576 <_Z16_fetch_usbserialv+0x36>
   d9554:	4628      	mov	r0, r5
   d9556:	f7fa fda6 	bl	d40a6 <__cxa_guard_acquire>
   d955a:	b160      	cbz	r0, d9576 <_Z16_fetch_usbserialv+0x36>
   d955c:	aa01      	add	r2, sp, #4
   d955e:	4621      	mov	r1, r4
   d9560:	4807      	ldr	r0, [pc, #28]	; (d9580 <_Z16_fetch_usbserialv+0x40>)
   d9562:	f7ff ffcd 	bl	d9500 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9566:	4628      	mov	r0, r5
   d9568:	f7fa fda2 	bl	d40b0 <__cxa_guard_release>
   d956c:	4a05      	ldr	r2, [pc, #20]	; (d9584 <_Z16_fetch_usbserialv+0x44>)
   d956e:	4906      	ldr	r1, [pc, #24]	; (d9588 <_Z16_fetch_usbserialv+0x48>)
   d9570:	4803      	ldr	r0, [pc, #12]	; (d9580 <_Z16_fetch_usbserialv+0x40>)
   d9572:	f000 fedf 	bl	da334 <__aeabi_atexit>
	return _usbserial;
}
   d9576:	4802      	ldr	r0, [pc, #8]	; (d9580 <_Z16_fetch_usbserialv+0x40>)
   d9578:	b007      	add	sp, #28
   d957a:	bd30      	pop	{r4, r5, pc}
   d957c:	2003e120 	.word	0x2003e120
   d9580:	2003e124 	.word	0x2003e124
   d9584:	2003da28 	.word	0x2003da28
   d9588:	000d9481 	.word	0x000d9481

000d958c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d958c:	4700      	bx	r0
	...

000d9590 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9590:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9592:	b085      	sub	sp, #20
   d9594:	461c      	mov	r4, r3
   d9596:	460e      	mov	r6, r1
   d9598:	4617      	mov	r7, r2
   d959a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d959c:	f7fe fe9a 	bl	d82d4 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d95a0:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d95a2:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d95a4:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d95a8:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d95aa:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d95ae:	bfa5      	ittet	ge
   d95b0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d95b4:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d95b8:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d95ba:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d95bc:	9300      	str	r3, [sp, #0]
   d95be:	4632      	mov	r2, r6
   d95c0:	463b      	mov	r3, r7
   d95c2:	4906      	ldr	r1, [pc, #24]	; (d95dc <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d95c4:	bfa8      	it	ge
   d95c6:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d95ca:	4628      	mov	r0, r5
   d95cc:	f7fe fe7a 	bl	d82c4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d95d0:	fab0 f080 	clz	r0, r0
   d95d4:	0940      	lsrs	r0, r0, #5
   d95d6:	b005      	add	sp, #20
   d95d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d95da:	bf00      	nop
   d95dc:	000d958d 	.word	0x000d958d

000d95e0 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d95e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d95e2:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d95e4:	f7fe fe76 	bl	d82d4 <HAL_Interrupts_Detach>
   d95e8:	4607      	mov	r7, r0
   d95ea:	b968      	cbnz	r0, d9608 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
   d95ec:	4d08      	ldr	r5, [pc, #32]	; (d9610 <_Z15detachInterruptt+0x30>)
   d95ee:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
   d95f2:	b15c      	cbz	r4, d960c <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d95f4:	4620      	mov	r0, r4
   d95f6:	f7fb fdb5 	bl	d5164 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d95fa:	2110      	movs	r1, #16
   d95fc:	4620      	mov	r0, r4
   d95fe:	f000 fea7 	bl	da350 <_ZdlPvj>
        handlers[pin] = nullptr;
   d9602:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   d9606:	e001      	b.n	d960c <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
   d9608:	2000      	movs	r0, #0
   d960a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
   d960c:	2001      	movs	r0, #1
}
   d960e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9610:	2003e138 	.word	0x2003e138

000d9614 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d9614:	f7fe be6e 	b.w	d82f4 <HAL_Interrupts_Disable_All>

000d9618 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d9618:	f7fe be64 	b.w	d82e4 <HAL_Interrupts_Enable_All>

000d961c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d961c:	2200      	movs	r2, #0
   d961e:	4611      	mov	r1, r2
   d9620:	6840      	ldr	r0, [r0, #4]
   d9622:	f7ff b8fb 	b.w	d881c <network_ready>

000d9626 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9626:	2200      	movs	r2, #0
   d9628:	4611      	mov	r1, r2
   d962a:	6840      	ldr	r0, [r0, #4]
   d962c:	f7ff b916 	b.w	d885c <network_listening>

000d9630 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9630:	2200      	movs	r2, #0
   d9632:	4611      	mov	r1, r2
   d9634:	6840      	ldr	r0, [r0, #4]
   d9636:	f7ff b921 	b.w	d887c <network_get_listen_timeout>

000d963a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d963a:	2200      	movs	r2, #0
   d963c:	6840      	ldr	r0, [r0, #4]
   d963e:	f7ff b915 	b.w	d886c <network_set_listen_timeout>

000d9642 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9642:	2200      	movs	r2, #0
   d9644:	f081 0101 	eor.w	r1, r1, #1
   d9648:	6840      	ldr	r0, [r0, #4]
   d964a:	f7ff b8ff 	b.w	d884c <network_listen>

000d964e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d964e:	2300      	movs	r3, #0
   d9650:	461a      	mov	r2, r3
   d9652:	4619      	mov	r1, r3
   d9654:	6840      	ldr	r0, [r0, #4]
   d9656:	f7ff b8f1 	b.w	d883c <network_off>

000d965a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d965a:	2300      	movs	r3, #0
   d965c:	461a      	mov	r2, r3
   d965e:	4619      	mov	r1, r3
   d9660:	6840      	ldr	r0, [r0, #4]
   d9662:	f7ff b8e3 	b.w	d882c <network_on>

000d9666 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9666:	2200      	movs	r2, #0
   d9668:	4611      	mov	r1, r2
   d966a:	6840      	ldr	r0, [r0, #4]
   d966c:	f7ff b8c6 	b.w	d87fc <network_connecting>

000d9670 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9670:	2200      	movs	r2, #0
   d9672:	2102      	movs	r1, #2
   d9674:	6840      	ldr	r0, [r0, #4]
   d9676:	f7ff b8c9 	b.w	d880c <network_disconnect>

000d967a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d967a:	2300      	movs	r3, #0
   d967c:	461a      	mov	r2, r3
   d967e:	6840      	ldr	r0, [r0, #4]
   d9680:	f7ff b8b4 	b.w	d87ec <network_connect>

000d9684 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9684:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d9686:	4c08      	ldr	r4, [pc, #32]	; (d96a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d9688:	2528      	movs	r5, #40	; 0x28
   d968a:	462a      	mov	r2, r5
   d968c:	2100      	movs	r1, #0
   d968e:	4620      	mov	r0, r4
   d9690:	f001 fbfc 	bl	dae8c <memset>
        cid = -1;
   d9694:	f04f 33ff 	mov.w	r3, #4294967295
   d9698:	6063      	str	r3, [r4, #4]
   d969a:	4b04      	ldr	r3, [pc, #16]	; (d96ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d969c:	8025      	strh	r5, [r4, #0]
   d969e:	2204      	movs	r2, #4
   d96a0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d96a2:	4a03      	ldr	r2, [pc, #12]	; (d96b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d96a4:	601a      	str	r2, [r3, #0]
   d96a6:	bd38      	pop	{r3, r4, r5, pc}
   d96a8:	2003e1d0 	.word	0x2003e1d0
   d96ac:	2003e1c8 	.word	0x2003e1c8
   d96b0:	000db460 	.word	0x000db460

000d96b4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d96b4:	4770      	bx	lr

000d96b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d96b6:	7441      	strb	r1, [r0, #17]
   d96b8:	4770      	bx	lr

000d96ba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d96ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d96bc:	7c00      	ldrb	r0, [r0, #16]
   d96be:	f7fe ff81 	bl	d85c4 <HAL_USART_Available_Data_For_Write>
}
   d96c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d96c6:	bd08      	pop	{r3, pc}

000d96c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d96c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d96ca:	7c00      	ldrb	r0, [r0, #16]
   d96cc:	f7fe ff52 	bl	d8574 <HAL_USART_Available_Data>
}
   d96d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d96d4:	bd08      	pop	{r3, pc}

000d96d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d96d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d96d8:	7c00      	ldrb	r0, [r0, #16]
   d96da:	f7fe ff5b 	bl	d8594 <HAL_USART_Peek_Data>
}
   d96de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d96e2:	bf28      	it	cs
   d96e4:	f04f 30ff 	movcs.w	r0, #4294967295
   d96e8:	bd08      	pop	{r3, pc}

000d96ea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d96ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d96ec:	7c00      	ldrb	r0, [r0, #16]
   d96ee:	f7fe ff49 	bl	d8584 <HAL_USART_Read_Data>
}
   d96f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d96f6:	bf28      	it	cs
   d96f8:	f04f 30ff 	movcs.w	r0, #4294967295
   d96fc:	bd08      	pop	{r3, pc}

000d96fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d96fe:	7c00      	ldrb	r0, [r0, #16]
   d9700:	f7fe bf50 	b.w	d85a4 <HAL_USART_Flush_Data>

000d9704 <_ZN11USARTSerialD0Ev>:
   d9704:	b510      	push	{r4, lr}
   d9706:	2114      	movs	r1, #20
   d9708:	4604      	mov	r4, r0
   d970a:	f000 fe21 	bl	da350 <_ZdlPvj>
   d970e:	4620      	mov	r0, r4
   d9710:	bd10      	pop	{r4, pc}

000d9712 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9712:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9714:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9716:	4604      	mov	r4, r0
   d9718:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d971a:	b925      	cbnz	r5, d9726 <_ZN11USARTSerial5writeEh+0x14>
   d971c:	7c00      	ldrb	r0, [r0, #16]
   d971e:	f7fe ff51 	bl	d85c4 <HAL_USART_Available_Data_For_Write>
   d9722:	2800      	cmp	r0, #0
   d9724:	dd05      	ble.n	d9732 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9726:	4631      	mov	r1, r6
   d9728:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d972a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d972e:	f7fe bf19 	b.w	d8564 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9732:	4628      	mov	r0, r5
   d9734:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9738 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9738:	b510      	push	{r4, lr}
   d973a:	4604      	mov	r4, r0
   d973c:	4608      	mov	r0, r1
   d973e:	4611      	mov	r1, r2
   d9740:	2200      	movs	r2, #0
   d9742:	6062      	str	r2, [r4, #4]
   d9744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9748:	60a2      	str	r2, [r4, #8]
   d974a:	4a05      	ldr	r2, [pc, #20]	; (d9760 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d974c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d974e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9750:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9752:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9754:	461a      	mov	r2, r3
   d9756:	f7fe fefd 	bl	d8554 <HAL_USART_Init>
}
   d975a:	4620      	mov	r0, r4
   d975c:	bd10      	pop	{r4, pc}
   d975e:	bf00      	nop
   d9760:	000db494 	.word	0x000db494

000d9764 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9764:	7c00      	ldrb	r0, [r0, #16]
   d9766:	f7fe bf25 	b.w	d85b4 <HAL_USART_Is_Enabled>
	...

000d976c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d976c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d976e:	4d0c      	ldr	r5, [pc, #48]	; (d97a0 <_Z22__fetch_global_Serial1v+0x34>)
   d9770:	6829      	ldr	r1, [r5, #0]
   d9772:	f011 0401 	ands.w	r4, r1, #1
   d9776:	d111      	bne.n	d979c <_Z22__fetch_global_Serial1v+0x30>
   d9778:	4628      	mov	r0, r5
   d977a:	f7fa fc94 	bl	d40a6 <__cxa_guard_acquire>
   d977e:	b168      	cbz	r0, d979c <_Z22__fetch_global_Serial1v+0x30>
   d9780:	4a08      	ldr	r2, [pc, #32]	; (d97a4 <_Z22__fetch_global_Serial1v+0x38>)
   d9782:	4b09      	ldr	r3, [pc, #36]	; (d97a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d9784:	4809      	ldr	r0, [pc, #36]	; (d97ac <_Z22__fetch_global_Serial1v+0x40>)
   d9786:	4621      	mov	r1, r4
   d9788:	f7ff ffd6 	bl	d9738 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d978c:	4628      	mov	r0, r5
   d978e:	f7fa fc8f 	bl	d40b0 <__cxa_guard_release>
   d9792:	4a07      	ldr	r2, [pc, #28]	; (d97b0 <_Z22__fetch_global_Serial1v+0x44>)
   d9794:	4907      	ldr	r1, [pc, #28]	; (d97b4 <_Z22__fetch_global_Serial1v+0x48>)
   d9796:	4805      	ldr	r0, [pc, #20]	; (d97ac <_Z22__fetch_global_Serial1v+0x40>)
   d9798:	f000 fdcc 	bl	da334 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d979c:	4803      	ldr	r0, [pc, #12]	; (d97ac <_Z22__fetch_global_Serial1v+0x40>)
   d979e:	bd38      	pop	{r3, r4, r5, pc}
   d97a0:	2003e290 	.word	0x2003e290
   d97a4:	2003e294 	.word	0x2003e294
   d97a8:	2003e20c 	.word	0x2003e20c
   d97ac:	2003e1f8 	.word	0x2003e1f8
   d97b0:	2003da28 	.word	0x2003da28
   d97b4:	000d96b5 	.word	0x000d96b5

000d97b8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d97b8:	4770      	bx	lr

000d97ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d97ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d97bc:	4606      	mov	r6, r0
   d97be:	4615      	mov	r5, r2
   d97c0:	460c      	mov	r4, r1
   d97c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d97c4:	42bc      	cmp	r4, r7
   d97c6:	d006      	beq.n	d97d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d97c8:	6833      	ldr	r3, [r6, #0]
   d97ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d97ce:	689b      	ldr	r3, [r3, #8]
   d97d0:	4630      	mov	r0, r6
   d97d2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d97d4:	e7f6      	b.n	d97c4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d97d6:	4628      	mov	r0, r5
   d97d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d97da <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d97da:	2200      	movs	r2, #0
   d97dc:	7c00      	ldrb	r0, [r0, #16]
   d97de:	f7fe bf09 	b.w	d85f4 <HAL_I2C_Write_Data>

000d97e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d97e2:	2100      	movs	r1, #0
   d97e4:	7c00      	ldrb	r0, [r0, #16]
   d97e6:	f7fe bf0d 	b.w	d8604 <HAL_I2C_Available_Data>

000d97ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d97ea:	2100      	movs	r1, #0
   d97ec:	7c00      	ldrb	r0, [r0, #16]
   d97ee:	f7fe bf11 	b.w	d8614 <HAL_I2C_Read_Data>

000d97f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d97f2:	2100      	movs	r1, #0
   d97f4:	7c00      	ldrb	r0, [r0, #16]
   d97f6:	f7fe bf15 	b.w	d8624 <HAL_I2C_Peek_Data>

000d97fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d97fa:	2100      	movs	r1, #0
   d97fc:	7c00      	ldrb	r0, [r0, #16]
   d97fe:	f7fe bf19 	b.w	d8634 <HAL_I2C_Flush_Data>

000d9802 <_ZN7TwoWireD0Ev>:
   d9802:	b510      	push	{r4, lr}
   d9804:	2114      	movs	r1, #20
   d9806:	4604      	mov	r4, r0
   d9808:	f000 fda2 	bl	da350 <_ZdlPvj>
   d980c:	4620      	mov	r0, r4
   d980e:	bd10      	pop	{r4, pc}

000d9810 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d9810:	b510      	push	{r4, lr}
   d9812:	4604      	mov	r4, r0
   d9814:	2300      	movs	r3, #0
   d9816:	6063      	str	r3, [r4, #4]
   d9818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d981c:	60a3      	str	r3, [r4, #8]
   d981e:	4b04      	ldr	r3, [pc, #16]	; (d9830 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d9820:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d9822:	4608      	mov	r0, r1
   d9824:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d9826:	4611      	mov	r1, r2
   d9828:	f7fe ff14 	bl	d8654 <HAL_I2C_Init>
}
   d982c:	4620      	mov	r0, r4
   d982e:	bd10      	pop	{r4, pc}
   d9830:	000db4c4 	.word	0x000db4c4

000d9834 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9834:	b570      	push	{r4, r5, r6, lr}
   d9836:	460c      	mov	r4, r1
   d9838:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d983a:	2514      	movs	r5, #20
   d983c:	4606      	mov	r6, r0
   d983e:	462a      	mov	r2, r5
   d9840:	2100      	movs	r1, #0
   d9842:	a801      	add	r0, sp, #4
   d9844:	f001 fb22 	bl	dae8c <memset>
   d9848:	7823      	ldrb	r3, [r4, #0]
   d984a:	f88d 3008 	strb.w	r3, [sp, #8]
   d984e:	6863      	ldr	r3, [r4, #4]
   d9850:	9303      	str	r3, [sp, #12]
   d9852:	68e3      	ldr	r3, [r4, #12]
   d9854:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d9856:	2200      	movs	r2, #0
   d9858:	7a23      	ldrb	r3, [r4, #8]
   d985a:	7c30      	ldrb	r0, [r6, #16]
   d985c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d9860:	a901      	add	r1, sp, #4
   d9862:	9305      	str	r3, [sp, #20]
   d9864:	f7fe ff0e 	bl	d8684 <HAL_I2C_Request_Data_Ex>
}
   d9868:	b006      	add	sp, #24
   d986a:	bd70      	pop	{r4, r5, r6, pc}

000d986c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d986c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d986e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9870:	f88d 1000 	strb.w	r1, [sp]
   d9874:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9878:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d987a:	bf18      	it	ne
   d987c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d987e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d9880:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9882:	f88d 3008 	strb.w	r3, [sp, #8]
   d9886:	f7ff ffd5 	bl	d9834 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d988a:	b005      	add	sp, #20
   d988c:	f85d fb04 	ldr.w	pc, [sp], #4

000d9890 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d9890:	2200      	movs	r2, #0
   d9892:	7c00      	ldrb	r0, [r0, #16]
   d9894:	f7fe be9e 	b.w	d85d4 <HAL_I2C_Begin_Transmission>

000d9898 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d9898:	b2c9      	uxtb	r1, r1
   d989a:	f7ff bff9 	b.w	d9890 <_ZN7TwoWire17beginTransmissionEh>

000d989e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d989e:	2200      	movs	r2, #0
   d98a0:	7c00      	ldrb	r0, [r0, #16]
   d98a2:	f7fe be9f 	b.w	d85e4 <HAL_I2C_End_Transmission>

000d98a6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d98a6:	2100      	movs	r1, #0
   d98a8:	7c00      	ldrb	r0, [r0, #16]
   d98aa:	f7fe becb 	b.w	d8644 <HAL_I2C_Is_Enabled>

000d98ae <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d98ae:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d98b0:	2100      	movs	r1, #0
   d98b2:	7c00      	ldrb	r0, [r0, #16]
   d98b4:	f7fe fed6 	bl	d8664 <HAL_I2C_Acquire>
}
   d98b8:	fab0 f080 	clz	r0, r0
   d98bc:	0940      	lsrs	r0, r0, #5
   d98be:	bd08      	pop	{r3, pc}

000d98c0 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d98c0:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d98c2:	2100      	movs	r1, #0
   d98c4:	7c00      	ldrb	r0, [r0, #16]
   d98c6:	f7fe fed5 	bl	d8674 <HAL_I2C_Release>
}
   d98ca:	fab0 f080 	clz	r0, r0
   d98ce:	0940      	lsrs	r0, r0, #5
   d98d0:	bd08      	pop	{r3, pc}

000d98d2 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d98d2:	2200      	movs	r2, #0
   d98d4:	4611      	mov	r1, r2
   d98d6:	6840      	ldr	r0, [r0, #4]
   d98d8:	f7fe bfc0 	b.w	d885c <network_listening>

000d98dc <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d98dc:	2200      	movs	r2, #0
   d98de:	4611      	mov	r1, r2
   d98e0:	6840      	ldr	r0, [r0, #4]
   d98e2:	f7fe bfcb 	b.w	d887c <network_get_listen_timeout>

000d98e6 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d98e6:	2200      	movs	r2, #0
   d98e8:	6840      	ldr	r0, [r0, #4]
   d98ea:	f7fe bfbf 	b.w	d886c <network_set_listen_timeout>

000d98ee <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d98ee:	2200      	movs	r2, #0
   d98f0:	f081 0101 	eor.w	r1, r1, #1
   d98f4:	6840      	ldr	r0, [r0, #4]
   d98f6:	f7fe bfa9 	b.w	d884c <network_listen>

000d98fa <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d98fa:	2300      	movs	r3, #0
   d98fc:	461a      	mov	r2, r3
   d98fe:	2101      	movs	r1, #1
   d9900:	6840      	ldr	r0, [r0, #4]
   d9902:	f7fe bf9b 	b.w	d883c <network_off>

000d9906 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9906:	2300      	movs	r3, #0
   d9908:	461a      	mov	r2, r3
   d990a:	4619      	mov	r1, r3
   d990c:	6840      	ldr	r0, [r0, #4]
   d990e:	f7fe bf8d 	b.w	d882c <network_on>

000d9912 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9912:	2200      	movs	r2, #0
   d9914:	4611      	mov	r1, r2
   d9916:	6840      	ldr	r0, [r0, #4]
   d9918:	f7fe bf80 	b.w	d881c <network_ready>

000d991c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d991c:	2200      	movs	r2, #0
   d991e:	4611      	mov	r1, r2
   d9920:	6840      	ldr	r0, [r0, #4]
   d9922:	f7fe bf6b 	b.w	d87fc <network_connecting>

000d9926 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9926:	2200      	movs	r2, #0
   d9928:	2102      	movs	r1, #2
   d992a:	6840      	ldr	r0, [r0, #4]
   d992c:	f7fe bf6e 	b.w	d880c <network_disconnect>

000d9930 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9930:	2300      	movs	r3, #0
   d9932:	461a      	mov	r2, r3
   d9934:	6840      	ldr	r0, [r0, #4]
   d9936:	f7fe bf59 	b.w	d87ec <network_connect>

000d993a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d993a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d993c:	4605      	mov	r5, r0
   d993e:	b188      	cbz	r0, d9964 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9940:	6804      	ldr	r4, [r0, #0]
   d9942:	b14c      	cbz	r4, d9958 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d9944:	68a3      	ldr	r3, [r4, #8]
   d9946:	b11b      	cbz	r3, d9950 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9948:	2203      	movs	r2, #3
   d994a:	4621      	mov	r1, r4
   d994c:	4620      	mov	r0, r4
   d994e:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9950:	2110      	movs	r1, #16
   d9952:	4620      	mov	r0, r4
   d9954:	f000 fcfc 	bl	da350 <_ZdlPvj>
   d9958:	4628      	mov	r0, r5
   d995a:	2114      	movs	r1, #20
      }
   d995c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9960:	f000 bcf6 	b.w	da350 <_ZdlPvj>
   d9964:	bd38      	pop	{r3, r4, r5, pc}

000d9966 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d9966:	b110      	cbz	r0, d996e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d9968:	6803      	ldr	r3, [r0, #0]
   d996a:	685b      	ldr	r3, [r3, #4]
   d996c:	4718      	bx	r3
   d996e:	4770      	bx	lr

000d9970 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d9970:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d9972:	6803      	ldr	r3, [r0, #0]
   d9974:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d9976:	b1bb      	cbz	r3, d99a8 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d9978:	6858      	ldr	r0, [r3, #4]
   d997a:	f7fe fd73 	bl	d8464 <os_thread_is_current>
   d997e:	b978      	cbnz	r0, d99a0 <_ZN6ThreadD1Ev+0x30>
   d9980:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d9982:	7c5a      	ldrb	r2, [r3, #17]
   d9984:	b912      	cbnz	r2, d998c <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d9986:	6858      	ldr	r0, [r3, #4]
   d9988:	f7fe fd7c 	bl	d8484 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d998c:	6823      	ldr	r3, [r4, #0]
   d998e:	6858      	ldr	r0, [r3, #4]
   d9990:	f7fe fd80 	bl	d8494 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9994:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9996:	2300      	movs	r3, #0
   d9998:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d999a:	b128      	cbz	r0, d99a8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d999c:	f7ff ffcd 	bl	d993a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d99a0:	6820      	ldr	r0, [r4, #0]
   d99a2:	b108      	cbz	r0, d99a8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d99a4:	f7ff ffc9 	bl	d993a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d99a8:	4620      	mov	r0, r4
   d99aa:	bd10      	pop	{r4, pc}

000d99ac <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d99ac:	b538      	push	{r3, r4, r5, lr}
   d99ae:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d99b0:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d99b4:	b108      	cbz	r0, d99ba <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d99b6:	f7fa fb74 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d99ba:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d99be:	b108      	cbz	r0, d99c4 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d99c0:	f7fe fda0 	bl	d8504 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d99c4:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d99c8:	b135      	cbz	r5, d99d8 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d99ca:	4628      	mov	r0, r5
   d99cc:	f7ff ffd0 	bl	d9970 <_ZN6ThreadD1Ev>
   d99d0:	2104      	movs	r1, #4
   d99d2:	4628      	mov	r0, r5
   d99d4:	f000 fcbc 	bl	da350 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d99d8:	6820      	ldr	r0, [r4, #0]
   d99da:	b108      	cbz	r0, d99e0 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d99dc:	f7ff ffc3 	bl	d9966 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d99e0:	4620      	mov	r0, r4
   d99e2:	bd38      	pop	{r3, r4, r5, pc}

000d99e4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d99e4:	b510      	push	{r4, lr}
   d99e6:	4b04      	ldr	r3, [pc, #16]	; (d99f8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d99e8:	4604      	mov	r4, r0
   d99ea:	f840 3b08 	str.w	r3, [r0], #8
   d99ee:	f7ff ffdd 	bl	d99ac <_ZN5spark11MeshPublishD1Ev>
   d99f2:	4620      	mov	r0, r4
   d99f4:	bd10      	pop	{r4, pc}
   d99f6:	bf00      	nop
   d99f8:	000db4ec 	.word	0x000db4ec

000d99fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d99fc:	b538      	push	{r3, r4, r5, lr}
   d99fe:	4c0e      	ldr	r4, [pc, #56]	; (d9a38 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d9a00:	4b0e      	ldr	r3, [pc, #56]	; (d9a3c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d9a02:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d9a04:	2500      	movs	r5, #0
   d9a06:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d9a08:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d9a0c:	6063      	str	r3, [r4, #4]
   d9a0e:	60a5      	str	r5, [r4, #8]
   d9a10:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9a14:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d9a18:	f7fe fd6c 	bl	d84f4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d9a1c:	4b08      	ldr	r3, [pc, #32]	; (d9a40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d9a1e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9a22:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d9a26:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d9a28:	4620      	mov	r0, r4
   d9a2a:	4a06      	ldr	r2, [pc, #24]	; (d9a44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d9a2c:	4906      	ldr	r1, [pc, #24]	; (d9a48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d9a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d9a32:	f000 bc7f 	b.w	da334 <__aeabi_atexit>
   d9a36:	bf00      	nop
   d9a38:	2003e318 	.word	0x2003e318
   d9a3c:	000db5a0 	.word	0x000db5a0
   d9a40:	000db4ec 	.word	0x000db4ec
   d9a44:	2003da28 	.word	0x2003da28
   d9a48:	000d99e5 	.word	0x000d99e5

000d9a4c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d9a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9a4e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d9a50:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d9a52:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d9a56:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d9a58:	2201      	movs	r2, #1
   d9a5a:	f04f 33ff 	mov.w	r3, #4294967295
   d9a5e:	4621      	mov	r1, r4
   d9a60:	47a8      	blx	r5
}
   d9a62:	b003      	add	sp, #12
   d9a64:	bd30      	pop	{r4, r5, pc}

000d9a66 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d9a66:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d9a68:	6803      	ldr	r3, [r0, #0]
   d9a6a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d9a6c:	f04f 33ff 	mov.w	r3, #4294967295
   d9a70:	46a4      	mov	ip, r4
}
   d9a72:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d9a76:	4760      	bx	ip

000d9a78 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d9a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9a7a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d9a7c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d9a7e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d9a82:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d9a84:	4621      	mov	r1, r4
   d9a86:	4613      	mov	r3, r2
   d9a88:	2201      	movs	r2, #1
   d9a8a:	47a8      	blx	r5
}
   d9a8c:	b003      	add	sp, #12
   d9a8e:	bd30      	pop	{r4, r5, pc}

000d9a90 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d9a90:	4770      	bx	lr

000d9a92 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d9a92:	b538      	push	{r3, r4, r5, lr}
   d9a94:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d9a96:	681a      	ldr	r2, [r3, #0]
   d9a98:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d9a9a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d9a9c:	da05      	bge.n	d9aaa <_ZN9TCPClient9connectedEv+0x18>
   d9a9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9aa2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9aa6:	429a      	cmp	r2, r3
   d9aa8:	d001      	beq.n	d9aae <_ZN9TCPClient9connectedEv+0x1c>
   d9aaa:	2501      	movs	r5, #1
   d9aac:	e00b      	b.n	d9ac6 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d9aae:	6803      	ldr	r3, [r0, #0]
   d9ab0:	691b      	ldr	r3, [r3, #16]
   d9ab2:	4798      	blx	r3
   d9ab4:	2800      	cmp	r0, #0
   d9ab6:	bf14      	ite	ne
   d9ab8:	2501      	movne	r5, #1
   d9aba:	2500      	moveq	r5, #0
        if (!rv) {
   d9abc:	d103      	bne.n	d9ac6 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d9abe:	6823      	ldr	r3, [r4, #0]
   d9ac0:	4620      	mov	r0, r4
   d9ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9ac4:	4798      	blx	r3
        }
    }
    return rv;
}
   d9ac6:	4628      	mov	r0, r5
   d9ac8:	bd38      	pop	{r3, r4, r5, pc}

000d9aca <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d9aca:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d9acc:	6818      	ldr	r0, [r3, #0]
}
   d9ace:	43c0      	mvns	r0, r0
   d9ad0:	0fc0      	lsrs	r0, r0, #31
   d9ad2:	4770      	bx	lr

000d9ad4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d9ad4:	4770      	bx	lr

000d9ad6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d9ad6:	2000      	movs	r0, #0
   d9ad8:	4770      	bx	lr

000d9ada <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d9ada:	b510      	push	{r4, lr}
   d9adc:	2114      	movs	r1, #20
   d9ade:	4604      	mov	r4, r0
   d9ae0:	f000 fc36 	bl	da350 <_ZdlPvj>
   d9ae4:	4620      	mov	r0, r4
   d9ae6:	bd10      	pop	{r4, pc}

000d9ae8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d9ae8:	f7fa bad9 	b.w	d409e <_ZdlPv>

000d9aec <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d9aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d9aee:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d9af0:	2200      	movs	r2, #0
   d9af2:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d9af4:	9202      	str	r2, [sp, #8]
   d9af6:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d9af8:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d9afa:	4604      	mov	r4, r0
   d9afc:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d9afe:	d008      	beq.n	d9b12 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d9b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9b04:	fbb3 f1f2 	udiv	r1, r3, r2
   d9b08:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d9b0a:	fb02 3111 	mls	r1, r2, r1, r3
   d9b0e:	434a      	muls	r2, r1
   d9b10:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d9b12:	6960      	ldr	r0, [r4, #20]
   d9b14:	2308      	movs	r3, #8
   d9b16:	9300      	str	r3, [sp, #0]
   d9b18:	f241 0205 	movw	r2, #4101	; 0x1005
   d9b1c:	446b      	add	r3, sp
   d9b1e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d9b22:	6800      	ldr	r0, [r0, #0]
   d9b24:	f7fe fdb6 	bl	d8694 <sock_setsockopt>
    if (ret < 0) {
   d9b28:	2800      	cmp	r0, #0
   d9b2a:	db08      	blt.n	d9b3e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d9b2c:	6960      	ldr	r0, [r4, #20]
   d9b2e:	2300      	movs	r3, #0
   d9b30:	4632      	mov	r2, r6
   d9b32:	4629      	mov	r1, r5
   d9b34:	6800      	ldr	r0, [r0, #0]
   d9b36:	f7fe fdcd 	bl	d86d4 <sock_send>
    if (ret < 0) {
   d9b3a:	2800      	cmp	r0, #0
   d9b3c:	da04      	bge.n	d9b48 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d9b3e:	f7fe fefd 	bl	d893c <__errno>
   d9b42:	6803      	ldr	r3, [r0, #0]
   d9b44:	6063      	str	r3, [r4, #4]
   d9b46:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d9b48:	b004      	add	sp, #16
   d9b4a:	bd70      	pop	{r4, r5, r6, pc}

000d9b4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9b4c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d9b4e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9b50:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d9b52:	689b      	ldr	r3, [r3, #8]
   d9b54:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d9b56:	68a3      	ldr	r3, [r4, #8]
   d9b58:	3b01      	subs	r3, #1
   d9b5a:	60a3      	str	r3, [r4, #8]
   d9b5c:	b92b      	cbnz	r3, d9b6a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d9b5e:	6823      	ldr	r3, [r4, #0]
   d9b60:	4620      	mov	r0, r4
   d9b62:	68db      	ldr	r3, [r3, #12]
        }
    }
   d9b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d9b68:	4718      	bx	r3
   d9b6a:	bd10      	pop	{r4, pc}

000d9b6c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d9b6c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9b6e:	4604      	mov	r4, r0
   d9b70:	694d      	ldr	r5, [r1, #20]
   d9b72:	4b05      	ldr	r3, [pc, #20]	; (d9b88 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d9b74:	f844 3b04 	str.w	r3, [r4], #4
   d9b78:	358c      	adds	r5, #140	; 0x8c
   d9b7a:	4606      	mov	r6, r0
   d9b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9b80:	682b      	ldr	r3, [r5, #0]
   d9b82:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d9b84:	4630      	mov	r0, r6
   d9b86:	bd70      	pop	{r4, r5, r6, pc}
   d9b88:	000db41c 	.word	0x000db41c

000d9b8c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d9b8c:	b510      	push	{r4, lr}
   d9b8e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d9b90:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9b94:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9b98:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d9b9a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d9b9c:	d005      	beq.n	d9baa <_ZN9TCPClient4peekEv+0x1e>
   d9b9e:	6962      	ldr	r2, [r4, #20]
   d9ba0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d9ba4:	4413      	add	r3, r2
   d9ba6:	7918      	ldrb	r0, [r3, #4]
   d9ba8:	bd10      	pop	{r4, pc}
   d9baa:	6803      	ldr	r3, [r0, #0]
   d9bac:	691b      	ldr	r3, [r3, #16]
   d9bae:	4798      	blx	r3
   d9bb0:	2800      	cmp	r0, #0
   d9bb2:	d1f4      	bne.n	d9b9e <_ZN9TCPClient4peekEv+0x12>
   d9bb4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d9bb8:	bd10      	pop	{r4, pc}

000d9bba <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d9bba:	b510      	push	{r4, lr}
   d9bbc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d9bbe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9bc2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9bc6:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d9bc8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d9bca:	d008      	beq.n	d9bde <_ZN9TCPClient4readEv+0x24>
   d9bcc:	6962      	ldr	r2, [r4, #20]
   d9bce:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d9bd2:	1c59      	adds	r1, r3, #1
   d9bd4:	4413      	add	r3, r2
   d9bd6:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d9bda:	7918      	ldrb	r0, [r3, #4]
   d9bdc:	bd10      	pop	{r4, pc}
   d9bde:	6803      	ldr	r3, [r0, #0]
   d9be0:	691b      	ldr	r3, [r3, #16]
   d9be2:	4798      	blx	r3
   d9be4:	2800      	cmp	r0, #0
   d9be6:	d1f1      	bne.n	d9bcc <_ZN9TCPClient4readEv+0x12>
   d9be8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d9bec:	bd10      	pop	{r4, pc}

000d9bee <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d9bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9bf0:	6943      	ldr	r3, [r0, #20]
   d9bf2:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d9bf4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9bf8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9bfc:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d9bfe:	4605      	mov	r5, r0
   d9c00:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d9c02:	d106      	bne.n	d9c12 <_ZN9TCPClient4readEPhj+0x24>
   d9c04:	6803      	ldr	r3, [r0, #0]
   d9c06:	691b      	ldr	r3, [r3, #16]
   d9c08:	4798      	blx	r3
   d9c0a:	b910      	cbnz	r0, d9c12 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d9c0c:	f04f 34ff 	mov.w	r4, #4294967295
   d9c10:	e014      	b.n	d9c3c <_ZN9TCPClient4readEPhj+0x4e>
   d9c12:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d9c14:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d9c18:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d9c1c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d9c1e:	42bc      	cmp	r4, r7
   d9c20:	bf28      	it	cs
   d9c22:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d9c24:	4419      	add	r1, r3
   d9c26:	4622      	mov	r2, r4
   d9c28:	3104      	adds	r1, #4
   d9c2a:	4630      	mov	r0, r6
   d9c2c:	f001 f923 	bl	dae76 <memcpy>
   d9c30:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d9c32:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d9c36:	4423      	add	r3, r4
   d9c38:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d9c3c:	4620      	mov	r0, r4
   d9c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9c40 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9c44:	4698      	mov	r8, r3
    stop();
   d9c46:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9c48:	b093      	sub	sp, #76	; 0x4c
    stop();
   d9c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9c4c:	460d      	mov	r5, r1
   d9c4e:	4606      	mov	r6, r0
   d9c50:	4617      	mov	r7, r2
    stop();
   d9c52:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d9c54:	ab12      	add	r3, sp, #72	; 0x48
   d9c56:	2400      	movs	r4, #0
   d9c58:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d9c5c:	4622      	mov	r2, r4
   d9c5e:	4621      	mov	r1, r4
   d9c60:	4628      	mov	r0, r5
   d9c62:	f7fe faff 	bl	d8264 <netdb_getaddrinfo>
   d9c66:	4681      	mov	r9, r0
   d9c68:	2800      	cmp	r0, #0
   d9c6a:	d13d      	bne.n	d9ce8 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d9c6c:	9b00      	ldr	r3, [sp, #0]
   d9c6e:	2b00      	cmp	r3, #0
   d9c70:	d056      	beq.n	d9d20 <_ZN9TCPClient7connectEPKctm+0xe0>
   d9c72:	695b      	ldr	r3, [r3, #20]
   d9c74:	2b00      	cmp	r3, #0
   d9c76:	d053      	beq.n	d9d20 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d9c78:	a806      	add	r0, sp, #24
   d9c7a:	f7ff fba7 	bl	d93cc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d9c7e:	9b00      	ldr	r3, [sp, #0]
   d9c80:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d9c82:	7863      	ldrb	r3, [r4, #1]
   d9c84:	2b02      	cmp	r3, #2
   d9c86:	d101      	bne.n	d9c8c <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d9c88:	1d21      	adds	r1, r4, #4
   d9c8a:	e013      	b.n	d9cb4 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d9c8c:	2b0a      	cmp	r3, #10
   d9c8e:	d114      	bne.n	d9cba <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d9c90:	2211      	movs	r2, #17
   d9c92:	4649      	mov	r1, r9
   d9c94:	a801      	add	r0, sp, #4
   d9c96:	f001 f8f9 	bl	dae8c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d9c9a:	68a3      	ldr	r3, [r4, #8]
   d9c9c:	bb33      	cbnz	r3, d9cec <_ZN9TCPClient7connectEPKctm+0xac>
   d9c9e:	68e3      	ldr	r3, [r4, #12]
   d9ca0:	bb23      	cbnz	r3, d9cec <_ZN9TCPClient7connectEPKctm+0xac>
   d9ca2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d9ca6:	6925      	ldr	r5, [r4, #16]
   d9ca8:	f7fe fc44 	bl	d8534 <inet_htonl>
   d9cac:	4285      	cmp	r5, r0
   d9cae:	d11d      	bne.n	d9cec <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d9cb0:	f104 0114 	add.w	r1, r4, #20
   d9cb4:	a806      	add	r0, sp, #24
   d9cb6:	f7ff fbcc 	bl	d9452 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d9cba:	a806      	add	r0, sp, #24
   d9cbc:	f7ff fba6 	bl	d940c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d9cc0:	2800      	cmp	r0, #0
   d9cc2:	d02d      	beq.n	d9d20 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d9cc4:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9cc6:	ad07      	add	r5, sp, #28
   d9cc8:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d9ccc:	4b18      	ldr	r3, [pc, #96]	; (d9d30 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d9cce:	930c      	str	r3, [sp, #48]	; 0x30
   d9cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9cd2:	ac0d      	add	r4, sp, #52	; 0x34
   d9cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9cd6:	682b      	ldr	r3, [r5, #0]
   d9cd8:	7023      	strb	r3, [r4, #0]
   d9cda:	463a      	mov	r2, r7
   d9cdc:	4643      	mov	r3, r8
   d9cde:	a90c      	add	r1, sp, #48	; 0x30
   d9ce0:	4630      	mov	r0, r6
   d9ce2:	47c8      	blx	r9
   d9ce4:	4681      	mov	r9, r0
   d9ce6:	e01b      	b.n	d9d20 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d9ce8:	46a1      	mov	r9, r4
   d9cea:	e019      	b.n	d9d20 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9cec:	f104 0308 	add.w	r3, r4, #8
   d9cf0:	ad01      	add	r5, sp, #4
   d9cf2:	3418      	adds	r4, #24
   d9cf4:	6818      	ldr	r0, [r3, #0]
   d9cf6:	6859      	ldr	r1, [r3, #4]
   d9cf8:	462a      	mov	r2, r5
   d9cfa:	c203      	stmia	r2!, {r0, r1}
   d9cfc:	3308      	adds	r3, #8
   d9cfe:	42a3      	cmp	r3, r4
   d9d00:	4615      	mov	r5, r2
   d9d02:	d1f7      	bne.n	d9cf4 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d9d04:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d9d06:	a901      	add	r1, sp, #4
   d9d08:	a80c      	add	r0, sp, #48	; 0x30
   d9d0a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d9d0c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d9d10:	f7ff fb6a 	bl	d93e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9d16:	ac07      	add	r4, sp, #28
   d9d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9d1a:	682b      	ldr	r3, [r5, #0]
   d9d1c:	7023      	strb	r3, [r4, #0]
   d9d1e:	e7cc      	b.n	d9cba <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d9d20:	9800      	ldr	r0, [sp, #0]
   d9d22:	f7fe fa97 	bl	d8254 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d9d26:	4648      	mov	r0, r9
   d9d28:	b013      	add	sp, #76	; 0x4c
   d9d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9d2e:	bf00      	nop
   d9d30:	000db41c 	.word	0x000db41c

000d9d34 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d9d34:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d9d36:	2300      	movs	r3, #0
   d9d38:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d9d3c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d9d3e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d9d42:	4770      	bx	lr

000d9d44 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9d48:	461e      	mov	r6, r3
    stop();
   d9d4a:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9d4c:	460c      	mov	r4, r1
   d9d4e:	b08a      	sub	sp, #40	; 0x28
    stop();
   d9d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9d52:	4605      	mov	r5, r0
   d9d54:	4617      	mov	r7, r2
    stop();
   d9d56:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d9d58:	7d23      	ldrb	r3, [r4, #20]
   d9d5a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d9d5e:	2b04      	cmp	r3, #4
   d9d60:	bf0c      	ite	eq
   d9d62:	2002      	moveq	r0, #2
   d9d64:	200a      	movne	r0, #10
   d9d66:	2206      	movs	r2, #6
   d9d68:	2101      	movs	r1, #1
   d9d6a:	f7fe fcbb 	bl	d86e4 <sock_socket>
   d9d6e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d9d72:	696b      	ldr	r3, [r5, #20]
   d9d74:	681b      	ldr	r3, [r3, #0]
   d9d76:	2b00      	cmp	r3, #0
   d9d78:	db18      	blt.n	d9dac <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d9d7a:	4628      	mov	r0, r5
   d9d7c:	f7ff ffda 	bl	d9d34 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d9d80:	b1d6      	cbz	r6, d9db8 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d9d82:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d9d84:	a903      	add	r1, sp, #12
   d9d86:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d9d88:	9303      	str	r3, [sp, #12]
   d9d8a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d9d8e:	f7fe fb21 	bl	d83d4 <if_index_to_name>
   d9d92:	b958      	cbnz	r0, d9dac <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d9d94:	6968      	ldr	r0, [r5, #20]
   d9d96:	2306      	movs	r3, #6
   d9d98:	9300      	str	r3, [sp, #0]
   d9d9a:	f241 020b 	movw	r2, #4107	; 0x100b
   d9d9e:	ab03      	add	r3, sp, #12
   d9da0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d9da4:	6800      	ldr	r0, [r0, #0]
   d9da6:	f7fe fc75 	bl	d8694 <sock_setsockopt>
   d9daa:	b128      	cbz	r0, d9db8 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d9dac:	682b      	ldr	r3, [r5, #0]
   d9dae:	4628      	mov	r0, r5
   d9db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d9db2:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d9db4:	4798      	blx	r3
   d9db6:	e03b      	b.n	d9e30 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d9db8:	261c      	movs	r6, #28
   d9dba:	4632      	mov	r2, r6
   d9dbc:	2100      	movs	r1, #0
   d9dbe:	a803      	add	r0, sp, #12
   d9dc0:	f001 f864 	bl	dae8c <memset>
    if (ip.version() == 4) {
   d9dc4:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d9dc6:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d9dca:	2b04      	cmp	r3, #4
   d9dcc:	d10c      	bne.n	d9de8 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d9dce:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d9dd0:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d9dd2:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d9dd6:	f7fe fbb5 	bl	d8544 <inet_htons>
   d9dda:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d9dde:	6860      	ldr	r0, [r4, #4]
   d9de0:	f7fe fba8 	bl	d8534 <inet_htonl>
   d9de4:	9004      	str	r0, [sp, #16]
   d9de6:	e013      	b.n	d9e10 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d9de8:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d9dea:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d9dec:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d9df0:	f7fe fba8 	bl	d8544 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9df4:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d9df6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9dfa:	1d23      	adds	r3, r4, #4
   d9dfc:	f104 0714 	add.w	r7, r4, #20
   d9e00:	6818      	ldr	r0, [r3, #0]
   d9e02:	6859      	ldr	r1, [r3, #4]
   d9e04:	4632      	mov	r2, r6
   d9e06:	c203      	stmia	r2!, {r0, r1}
   d9e08:	3308      	adds	r3, #8
   d9e0a:	42bb      	cmp	r3, r7
   d9e0c:	4616      	mov	r6, r2
   d9e0e:	d1f7      	bne.n	d9e00 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d9e10:	696b      	ldr	r3, [r5, #20]
   d9e12:	221c      	movs	r2, #28
   d9e14:	a903      	add	r1, sp, #12
   d9e16:	6818      	ldr	r0, [r3, #0]
   d9e18:	f7fe fc4c 	bl	d86b4 <sock_connect>
   d9e1c:	2800      	cmp	r0, #0
   d9e1e:	d1c5      	bne.n	d9dac <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d9e20:	3404      	adds	r4, #4
   d9e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9e24:	696d      	ldr	r5, [r5, #20]
   d9e26:	358c      	adds	r5, #140	; 0x8c
   d9e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9e2a:	6823      	ldr	r3, [r4, #0]
   d9e2c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d9e2e:	2401      	movs	r4, #1
}
   d9e30:	4620      	mov	r0, r4
   d9e32:	b00a      	add	sp, #40	; 0x28
   d9e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9e38 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d9e38:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d9e3a:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d9e3c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d9e3e:	6818      	ldr	r0, [r3, #0]
   d9e40:	2800      	cmp	r0, #0
   d9e42:	db01      	blt.n	d9e48 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d9e44:	f7fe fc2e 	bl	d86a4 <sock_close>
   d9e48:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d9e4a:	f04f 32ff 	mov.w	r2, #4294967295
   d9e4e:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9e50:	6960      	ldr	r0, [r4, #20]
   d9e52:	2211      	movs	r2, #17
   d9e54:	2100      	movs	r1, #0
   d9e56:	308c      	adds	r0, #140	; 0x8c
   d9e58:	f001 f818 	bl	dae8c <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d9e5c:	4620      	mov	r0, r4
}
   d9e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d9e62:	f7ff bf67 	b.w	d9d34 <_ZN9TCPClient12flush_bufferEv>
	...

000d9e68 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d9e68:	b530      	push	{r4, r5, lr}
   d9e6a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d9e6c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d9e70:	b08b      	sub	sp, #44	; 0x2c
   d9e72:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d9e74:	b11b      	cbz	r3, d9e7e <_ZN9TCPClient9availableEv+0x16>
   d9e76:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d9e7a:	429a      	cmp	r2, r3
   d9e7c:	d040      	beq.n	d9f00 <_ZN9TCPClient9availableEv+0x98>
   d9e7e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d9e80:	6818      	ldr	r0, [r3, #0]
   d9e82:	2800      	cmp	r0, #0
   d9e84:	db3f      	blt.n	d9f06 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d9e86:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d9e8a:	2d7f      	cmp	r5, #127	; 0x7f
   d9e8c:	d83b      	bhi.n	d9f06 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d9e8e:	1d19      	adds	r1, r3, #4
   d9e90:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d9e94:	2308      	movs	r3, #8
   d9e96:	4429      	add	r1, r5
   d9e98:	f7fe fc14 	bl	d86c4 <sock_recv>
            if (ret > 0) {
   d9e9c:	2800      	cmp	r0, #0
   d9e9e:	dd0c      	ble.n	d9eba <_ZN9TCPClient9availableEv+0x52>
   d9ea0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d9ea2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9ea6:	b90a      	cbnz	r2, d9eac <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d9ea8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d9eac:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d9eae:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d9eb2:	4418      	add	r0, r3
   d9eb4:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d9eb8:	e025      	b.n	d9f06 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d9eba:	f7fe fd3f 	bl	d893c <__errno>
   d9ebe:	6803      	ldr	r3, [r0, #0]
   d9ec0:	2b0b      	cmp	r3, #11
   d9ec2:	d020      	beq.n	d9f06 <_ZN9TCPClient9availableEv+0x9e>
   d9ec4:	f7fe fd3a 	bl	d893c <__errno>
   d9ec8:	6803      	ldr	r3, [r0, #0]
   d9eca:	2b0b      	cmp	r3, #11
   d9ecc:	d01b      	beq.n	d9f06 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d9ece:	2320      	movs	r3, #32
   d9ed0:	2500      	movs	r5, #0
   d9ed2:	9302      	str	r3, [sp, #8]
   d9ed4:	9503      	str	r5, [sp, #12]
   d9ed6:	f7fe fd31 	bl	d893c <__errno>
   d9eda:	6803      	ldr	r3, [r0, #0]
   d9edc:	9301      	str	r3, [sp, #4]
   d9ede:	4b0e      	ldr	r3, [pc, #56]	; (d9f18 <_ZN9TCPClient9availableEv+0xb0>)
   d9ee0:	9300      	str	r3, [sp, #0]
   d9ee2:	aa02      	add	r2, sp, #8
   d9ee4:	462b      	mov	r3, r5
   d9ee6:	490d      	ldr	r1, [pc, #52]	; (d9f1c <_ZN9TCPClient9availableEv+0xb4>)
   d9ee8:	2032      	movs	r0, #50	; 0x32
   d9eea:	f7fe fc3b 	bl	d8764 <log_message>
                    sock_close(d_->sock);
   d9eee:	6963      	ldr	r3, [r4, #20]
   d9ef0:	6818      	ldr	r0, [r3, #0]
   d9ef2:	f7fe fbd7 	bl	d86a4 <sock_close>
   d9ef6:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d9ef8:	f04f 32ff 	mov.w	r2, #4294967295
   d9efc:	601a      	str	r2, [r3, #0]
   d9efe:	e002      	b.n	d9f06 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d9f00:	f7ff ff18 	bl	d9d34 <_ZN9TCPClient12flush_bufferEv>
   d9f04:	e7bb      	b.n	d9e7e <_ZN9TCPClient9availableEv+0x16>
   d9f06:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d9f08:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d9f0c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d9f10:	1a18      	subs	r0, r3, r0
}
   d9f12:	b00b      	add	sp, #44	; 0x2c
   d9f14:	bd30      	pop	{r4, r5, pc}
   d9f16:	bf00      	nop
   d9f18:	000db587 	.word	0x000db587
   d9f1c:	000db580 	.word	0x000db580

000d9f20 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d9f20:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d9f22:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d9f24:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d9f26:	6001      	str	r1, [r0, #0]
   d9f28:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d9f2c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d9f30:	3088      	adds	r0, #136	; 0x88
   d9f32:	f7ff fa4b 	bl	d93cc <_ZN9IPAddressC1Ev>
}
   d9f36:	4620      	mov	r0, r4
   d9f38:	bd10      	pop	{r4, pc}
	...

000d9f3c <_ZN9TCPClientC1Ei>:
   d9f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d9f40:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9f42:	2300      	movs	r3, #0
   d9f44:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d9f46:	4a14      	ldr	r2, [pc, #80]	; (d9f98 <_ZN9TCPClientC1Ei+0x5c>)
   d9f48:	6043      	str	r3, [r0, #4]
   d9f4a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d9f4c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9f4e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d9f50:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9f52:	20a0      	movs	r0, #160	; 0xa0
   d9f54:	460e      	mov	r6, r1
   d9f56:	f7fa f89e 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9f5a:	4605      	mov	r5, r0
   d9f5c:	b110      	cbz	r0, d9f64 <_ZN9TCPClientC1Ei+0x28>
   d9f5e:	4631      	mov	r1, r6
   d9f60:	f7ff ffde 	bl	d9f20 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9f64:	2014      	movs	r0, #20
   d9f66:	f7fa f896 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d9f6a:	4603      	mov	r3, r0
   d9f6c:	b128      	cbz	r0, d9f7a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d9f6e:	2201      	movs	r2, #1
   d9f70:	6042      	str	r2, [r0, #4]
   d9f72:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d9f74:	4a09      	ldr	r2, [pc, #36]	; (d9f9c <_ZN9TCPClientC1Ei+0x60>)
   d9f76:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d9f78:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d9f7a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d9f7c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d9f7e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d9f80:	b128      	cbz	r0, d9f8e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d9f82:	6843      	ldr	r3, [r0, #4]
   d9f84:	3b01      	subs	r3, #1
   d9f86:	6043      	str	r3, [r0, #4]
   d9f88:	b90b      	cbnz	r3, d9f8e <_ZN9TCPClientC1Ei+0x52>
   d9f8a:	f7ff fddf 	bl	d9b4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d9f8e:	4620      	mov	r0, r4
   d9f90:	f7ff fed0 	bl	d9d34 <_ZN9TCPClient12flush_bufferEv>
}
   d9f94:	4620      	mov	r0, r4
   d9f96:	bd70      	pop	{r4, r5, r6, pc}
   d9f98:	000db53c 	.word	0x000db53c
   d9f9c:	000db520 	.word	0x000db520

000d9fa0 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d9fa0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d9fa2:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d9fa6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d9fa8:	f7ff ffc8 	bl	d9f3c <_ZN9TCPClientC1Ei>
}
   d9fac:	4620      	mov	r0, r4
   d9fae:	bd10      	pop	{r4, pc}

000d9fb0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d9fb0:	b510      	push	{r4, lr}
   d9fb2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d9fb4:	6800      	ldr	r0, [r0, #0]
   d9fb6:	2800      	cmp	r0, #0
   d9fb8:	db01      	blt.n	d9fbe <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d9fba:	f7fe fb73 	bl	d86a4 <sock_close>
    }
}
   d9fbe:	4620      	mov	r0, r4
   d9fc0:	bd10      	pop	{r4, pc}

000d9fc2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d9fc2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d9fc4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d9fc6:	4620      	mov	r0, r4
   d9fc8:	f7ff fff2 	bl	d9fb0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d9fcc:	b124      	cbz	r4, d9fd8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d9fce:	4620      	mov	r0, r4
   d9fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9fd4:	f7fa b863 	b.w	d409e <_ZdlPv>
   d9fd8:	bd10      	pop	{r4, pc}

000d9fda <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9fda:	2300      	movs	r3, #0
   d9fdc:	461a      	mov	r2, r3
   d9fde:	6840      	ldr	r0, [r0, #4]
   d9fe0:	f7fe bc04 	b.w	d87ec <network_connect>

000d9fe4 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9fe4:	2200      	movs	r2, #0
   d9fe6:	2102      	movs	r1, #2
   d9fe8:	6840      	ldr	r0, [r0, #4]
   d9fea:	f7fe bc0f 	b.w	d880c <network_disconnect>

000d9fee <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9fee:	2200      	movs	r2, #0
   d9ff0:	4611      	mov	r1, r2
   d9ff2:	6840      	ldr	r0, [r0, #4]
   d9ff4:	f7fe bc02 	b.w	d87fc <network_connecting>

000d9ff8 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9ff8:	2200      	movs	r2, #0
   d9ffa:	4611      	mov	r1, r2
   d9ffc:	6840      	ldr	r0, [r0, #4]
   d9ffe:	f7fe bc0d 	b.w	d881c <network_ready>

000da002 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da002:	2300      	movs	r3, #0
   da004:	461a      	mov	r2, r3
   da006:	4619      	mov	r1, r3
   da008:	6840      	ldr	r0, [r0, #4]
   da00a:	f7fe bc0f 	b.w	d882c <network_on>

000da00e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da00e:	2300      	movs	r3, #0
   da010:	461a      	mov	r2, r3
   da012:	4619      	mov	r1, r3
   da014:	6840      	ldr	r0, [r0, #4]
   da016:	f7fe bc11 	b.w	d883c <network_off>

000da01a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da01a:	2200      	movs	r2, #0
   da01c:	f081 0101 	eor.w	r1, r1, #1
   da020:	6840      	ldr	r0, [r0, #4]
   da022:	f7fe bc13 	b.w	d884c <network_listen>

000da026 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da026:	2200      	movs	r2, #0
   da028:	6840      	ldr	r0, [r0, #4]
   da02a:	f7fe bc1f 	b.w	d886c <network_set_listen_timeout>

000da02e <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da02e:	2200      	movs	r2, #0
   da030:	4611      	mov	r1, r2
   da032:	6840      	ldr	r0, [r0, #4]
   da034:	f7fe bc22 	b.w	d887c <network_get_listen_timeout>

000da038 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da038:	2200      	movs	r2, #0
   da03a:	4611      	mov	r1, r2
   da03c:	6840      	ldr	r0, [r0, #4]
   da03e:	f7fe bc0d 	b.w	d885c <network_listening>

000da042 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da042:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da046:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   da048:	b095      	sub	sp, #84	; 0x54
   da04a:	4616      	mov	r6, r2
   da04c:	460d      	mov	r5, r1
   da04e:	4607      	mov	r7, r0
    IPAddress addr;
   da050:	f7ff f9bc 	bl	d93cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   da054:	4621      	mov	r1, r4
   da056:	2220      	movs	r2, #32
   da058:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da05a:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da05c:	f000 ff16 	bl	dae8c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da060:	2340      	movs	r3, #64	; 0x40
   da062:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da064:	4621      	mov	r1, r4
   da066:	466b      	mov	r3, sp
   da068:	aa0c      	add	r2, sp, #48	; 0x30
   da06a:	4630      	mov	r0, r6
   da06c:	f7fe f8fa 	bl	d8264 <netdb_getaddrinfo>
    if (!r) {
   da070:	4604      	mov	r4, r0
   da072:	2800      	cmp	r0, #0
   da074:	d144      	bne.n	da100 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da076:	4602      	mov	r2, r0
   da078:	2101      	movs	r1, #1
   da07a:	6868      	ldr	r0, [r5, #4]
   da07c:	f7fe fbce 	bl	d881c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da080:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da082:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da084:	4622      	mov	r2, r4
   da086:	6868      	ldr	r0, [r5, #4]
   da088:	f7fe fbc8 	bl	d881c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da08c:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da08e:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   da090:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da092:	2e00      	cmp	r6, #0
   da094:	d034      	beq.n	da100 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   da096:	2900      	cmp	r1, #0
   da098:	d132      	bne.n	da100 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da09a:	6873      	ldr	r3, [r6, #4]
   da09c:	2b02      	cmp	r3, #2
   da09e:	d002      	beq.n	da0a6 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   da0a0:	2b0a      	cmp	r3, #10
   da0a2:	d009      	beq.n	da0b8 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   da0a4:	e02a      	b.n	da0fc <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   da0a6:	f1b8 0f00 	cmp.w	r8, #0
   da0aa:	d027      	beq.n	da0fc <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da0ac:	6971      	ldr	r1, [r6, #20]
   da0ae:	4638      	mov	r0, r7
   da0b0:	3104      	adds	r1, #4
   da0b2:	f7ff f9ce 	bl	d9452 <_ZN9IPAddressaSEPKh>
   da0b6:	e020      	b.n	da0fa <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   da0b8:	f1b9 0f00 	cmp.w	r9, #0
   da0bc:	d01e      	beq.n	da0fc <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da0be:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da0c0:	2211      	movs	r2, #17
   da0c2:	a801      	add	r0, sp, #4
   da0c4:	f000 fee2 	bl	dae8c <memset>
                    a.v = 6;
   da0c8:	2306      	movs	r3, #6
   da0ca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da0ce:	ad01      	add	r5, sp, #4
   da0d0:	f104 0308 	add.w	r3, r4, #8
   da0d4:	3418      	adds	r4, #24
   da0d6:	6818      	ldr	r0, [r3, #0]
   da0d8:	6859      	ldr	r1, [r3, #4]
   da0da:	462a      	mov	r2, r5
   da0dc:	c203      	stmia	r2!, {r0, r1}
   da0de:	3308      	adds	r3, #8
   da0e0:	42a3      	cmp	r3, r4
   da0e2:	4615      	mov	r5, r2
   da0e4:	d1f7      	bne.n	da0d6 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   da0e6:	a901      	add	r1, sp, #4
   da0e8:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da0ea:	ad07      	add	r5, sp, #28
   da0ec:	f7ff f97c 	bl	d93e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da0f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da0f2:	1d3c      	adds	r4, r7, #4
   da0f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da0f6:	682b      	ldr	r3, [r5, #0]
   da0f8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   da0fa:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da0fc:	69f6      	ldr	r6, [r6, #28]
   da0fe:	e7c8      	b.n	da092 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da100:	9800      	ldr	r0, [sp, #0]
   da102:	f7fe f8a7 	bl	d8254 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da106:	4638      	mov	r0, r7
   da108:	b015      	add	sp, #84	; 0x54
   da10a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da110 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da110:	4b02      	ldr	r3, [pc, #8]	; (da11c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da112:	4a03      	ldr	r2, [pc, #12]	; (da120 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da114:	601a      	str	r2, [r3, #0]
   da116:	2200      	movs	r2, #0
   da118:	605a      	str	r2, [r3, #4]
   da11a:	4770      	bx	lr
   da11c:	2003e4ec 	.word	0x2003e4ec
   da120:	000db5a0 	.word	0x000db5a0

000da124 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   da124:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da126:	4e18      	ldr	r6, [pc, #96]	; (da188 <pinAvailable+0x64>)
   da128:	6831      	ldr	r1, [r6, #0]
   da12a:	f011 0501 	ands.w	r5, r1, #1
   da12e:	4604      	mov	r4, r0
   da130:	d10a      	bne.n	da148 <pinAvailable+0x24>
   da132:	4630      	mov	r0, r6
   da134:	f7f9 ffb7 	bl	d40a6 <__cxa_guard_acquire>
   da138:	b130      	cbz	r0, da148 <pinAvailable+0x24>
   da13a:	4629      	mov	r1, r5
   da13c:	4813      	ldr	r0, [pc, #76]	; (da18c <pinAvailable+0x68>)
   da13e:	f7fe fc49 	bl	d89d4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   da142:	4630      	mov	r0, r6
   da144:	f7f9 ffb4 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   da148:	4810      	ldr	r0, [pc, #64]	; (da18c <pinAvailable+0x68>)
   da14a:	f7fe fd78 	bl	d8c3e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   da14e:	b128      	cbz	r0, da15c <pinAvailable+0x38>
   da150:	f1a4 030b 	sub.w	r3, r4, #11
   da154:	2b02      	cmp	r3, #2
   da156:	d801      	bhi.n	da15c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   da158:	2000      	movs	r0, #0
   da15a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   da15c:	f000 f89e 	bl	da29c <_Z19__fetch_global_Wirev>
   da160:	f7ff fba1 	bl	d98a6 <_ZN7TwoWire9isEnabledEv>
   da164:	b108      	cbz	r0, da16a <pinAvailable+0x46>
   da166:	2c01      	cmp	r4, #1
   da168:	d9f6      	bls.n	da158 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   da16a:	f7ff faff 	bl	d976c <_Z22__fetch_global_Serial1v>
   da16e:	f7ff faf9 	bl	d9764 <_ZN11USARTSerial9isEnabledEv>
   da172:	b118      	cbz	r0, da17c <pinAvailable+0x58>
   da174:	f1a4 0309 	sub.w	r3, r4, #9
   da178:	2b01      	cmp	r3, #1
   da17a:	d9ed      	bls.n	da158 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   da17c:	2c23      	cmp	r4, #35	; 0x23
   da17e:	bf8c      	ite	hi
   da180:	2000      	movhi	r0, #0
   da182:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   da184:	bd70      	pop	{r4, r5, r6, pc}
   da186:	bf00      	nop
   da188:	2003db1c 	.word	0x2003db1c
   da18c:	2003db20 	.word	0x2003db20

000da190 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da190:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   da192:	b538      	push	{r3, r4, r5, lr}
   da194:	4604      	mov	r4, r0
   da196:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da198:	d80a      	bhi.n	da1b0 <pinMode+0x20>
   da19a:	29ff      	cmp	r1, #255	; 0xff
   da19c:	d008      	beq.n	da1b0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da19e:	f7ff ffc1 	bl	da124 <pinAvailable>
   da1a2:	b128      	cbz	r0, da1b0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da1a4:	4629      	mov	r1, r5
   da1a6:	4620      	mov	r0, r4
}
   da1a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da1ac:	f7fe b86a 	b.w	d8284 <HAL_Pin_Mode>
   da1b0:	bd38      	pop	{r3, r4, r5, pc}

000da1b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da1b2:	b538      	push	{r3, r4, r5, lr}
   da1b4:	4604      	mov	r4, r0
   da1b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da1b8:	f7fe f86c 	bl	d8294 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da1bc:	28ff      	cmp	r0, #255	; 0xff
   da1be:	d010      	beq.n	da1e2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   da1c0:	2806      	cmp	r0, #6
   da1c2:	d804      	bhi.n	da1ce <digitalWrite+0x1c>
   da1c4:	234d      	movs	r3, #77	; 0x4d
   da1c6:	fa23 f000 	lsr.w	r0, r3, r0
   da1ca:	07c3      	lsls	r3, r0, #31
   da1cc:	d409      	bmi.n	da1e2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da1ce:	4620      	mov	r0, r4
   da1d0:	f7ff ffa8 	bl	da124 <pinAvailable>
   da1d4:	b128      	cbz	r0, da1e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da1d6:	4629      	mov	r1, r5
   da1d8:	4620      	mov	r0, r4
}
   da1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   da1de:	f7fe b861 	b.w	d82a4 <HAL_GPIO_Write>
   da1e2:	bd38      	pop	{r3, r4, r5, pc}

000da1e4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da1e4:	b510      	push	{r4, lr}
   da1e6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da1e8:	f7fe f854 	bl	d8294 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   da1ec:	3804      	subs	r0, #4
   da1ee:	b2c0      	uxtb	r0, r0
   da1f0:	2801      	cmp	r0, #1
   da1f2:	d908      	bls.n	da206 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da1f4:	4620      	mov	r0, r4
   da1f6:	f7ff ff95 	bl	da124 <pinAvailable>
   da1fa:	b120      	cbz	r0, da206 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da1fc:	4620      	mov	r0, r4
}
   da1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da202:	f7fe b857 	b.w	d82b4 <HAL_GPIO_Read>
}
   da206:	2000      	movs	r0, #0
   da208:	bd10      	pop	{r4, pc}
	...

000da20c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   da20c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   da20e:	4c07      	ldr	r4, [pc, #28]	; (da22c <_Z21__fetch_global_EEPROMv+0x20>)
   da210:	6823      	ldr	r3, [r4, #0]
   da212:	07db      	lsls	r3, r3, #31
   da214:	d408      	bmi.n	da228 <_Z21__fetch_global_EEPROMv+0x1c>
   da216:	4620      	mov	r0, r4
   da218:	f7f9 ff45 	bl	d40a6 <__cxa_guard_acquire>
   da21c:	b120      	cbz	r0, da228 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   da21e:	f7fe f901 	bl	d8424 <HAL_EEPROM_Init>
   da222:	4620      	mov	r0, r4
   da224:	f7f9 ff44 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   da228:	4801      	ldr	r0, [pc, #4]	; (da230 <_Z21__fetch_global_EEPROMv+0x24>)
   da22a:	bd10      	pop	{r4, pc}
   da22c:	2003e4f8 	.word	0x2003e4f8
   da230:	2003e4fc 	.word	0x2003e4fc

000da234 <_Z17acquireWireBufferv>:
   da234:	b570      	push	{r4, r5, r6, lr}
   da236:	4604      	mov	r4, r0
   da238:	2514      	movs	r5, #20
   da23a:	462a      	mov	r2, r5
   da23c:	4e09      	ldr	r6, [pc, #36]	; (da264 <_Z17acquireWireBufferv+0x30>)
   da23e:	2100      	movs	r1, #0
   da240:	f000 fe24 	bl	dae8c <memset>
   da244:	8025      	strh	r5, [r4, #0]
   da246:	2520      	movs	r5, #32
   da248:	4631      	mov	r1, r6
   da24a:	60a5      	str	r5, [r4, #8]
   da24c:	6125      	str	r5, [r4, #16]
   da24e:	4628      	mov	r0, r5
   da250:	f000 f880 	bl	da354 <_ZnajRKSt9nothrow_t>
   da254:	4631      	mov	r1, r6
   da256:	6060      	str	r0, [r4, #4]
   da258:	4628      	mov	r0, r5
   da25a:	f000 f87b 	bl	da354 <_ZnajRKSt9nothrow_t>
   da25e:	60e0      	str	r0, [r4, #12]
   da260:	4620      	mov	r0, r4
   da262:	bd70      	pop	{r4, r5, r6, pc}
   da264:	000db5cc 	.word	0x000db5cc

000da268 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   da268:	b570      	push	{r4, r5, r6, lr}
   da26a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da26c:	2514      	movs	r5, #20
   da26e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da270:	4e09      	ldr	r6, [pc, #36]	; (da298 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da272:	2100      	movs	r1, #0
   da274:	f000 fe0a 	bl	dae8c <memset>
   da278:	8025      	strh	r5, [r4, #0]
   da27a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da27c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da27e:	60a5      	str	r5, [r4, #8]
   da280:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da282:	4628      	mov	r0, r5
   da284:	f000 f866 	bl	da354 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da288:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da28a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da28c:	4628      	mov	r0, r5
   da28e:	f000 f861 	bl	da354 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da292:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   da294:	4620      	mov	r0, r4
   da296:	bd70      	pop	{r4, r5, r6, pc}
   da298:	000db5cc 	.word	0x000db5cc

000da29c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da29c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da29e:	4d0e      	ldr	r5, [pc, #56]	; (da2d8 <_Z19__fetch_global_Wirev+0x3c>)
   da2a0:	6829      	ldr	r1, [r5, #0]
   da2a2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da2a6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da2a8:	d113      	bne.n	da2d2 <_Z19__fetch_global_Wirev+0x36>
   da2aa:	4628      	mov	r0, r5
   da2ac:	f7f9 fefb 	bl	d40a6 <__cxa_guard_acquire>
   da2b0:	b178      	cbz	r0, da2d2 <_Z19__fetch_global_Wirev+0x36>
   da2b2:	a801      	add	r0, sp, #4
   da2b4:	f7ff ffbe 	bl	da234 <_Z17acquireWireBufferv>
   da2b8:	aa01      	add	r2, sp, #4
   da2ba:	4621      	mov	r1, r4
   da2bc:	4807      	ldr	r0, [pc, #28]	; (da2dc <_Z19__fetch_global_Wirev+0x40>)
   da2be:	f7ff faa7 	bl	d9810 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da2c2:	4628      	mov	r0, r5
   da2c4:	f7f9 fef4 	bl	d40b0 <__cxa_guard_release>
   da2c8:	4a05      	ldr	r2, [pc, #20]	; (da2e0 <_Z19__fetch_global_Wirev+0x44>)
   da2ca:	4906      	ldr	r1, [pc, #24]	; (da2e4 <_Z19__fetch_global_Wirev+0x48>)
   da2cc:	4803      	ldr	r0, [pc, #12]	; (da2dc <_Z19__fetch_global_Wirev+0x40>)
   da2ce:	f000 f831 	bl	da334 <__aeabi_atexit>
	return wire;
}
   da2d2:	4802      	ldr	r0, [pc, #8]	; (da2dc <_Z19__fetch_global_Wirev+0x40>)
   da2d4:	b007      	add	sp, #28
   da2d6:	bd30      	pop	{r4, r5, pc}
   da2d8:	2003e500 	.word	0x2003e500
   da2dc:	2003e518 	.word	0x2003e518
   da2e0:	2003da28 	.word	0x2003da28
   da2e4:	000d97b9 	.word	0x000d97b9

000da2e8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   da2e8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da2ea:	4c0e      	ldr	r4, [pc, #56]	; (da324 <_Z20__fetch_global_Wire1v+0x3c>)
   da2ec:	6823      	ldr	r3, [r4, #0]
   da2ee:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   da2f0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da2f2:	d413      	bmi.n	da31c <_Z20__fetch_global_Wire1v+0x34>
   da2f4:	4620      	mov	r0, r4
   da2f6:	f7f9 fed6 	bl	d40a6 <__cxa_guard_acquire>
   da2fa:	b178      	cbz	r0, da31c <_Z20__fetch_global_Wire1v+0x34>
   da2fc:	a801      	add	r0, sp, #4
   da2fe:	f7ff ffb3 	bl	da268 <_Z18acquireWire1Bufferv>
   da302:	aa01      	add	r2, sp, #4
   da304:	2101      	movs	r1, #1
   da306:	4808      	ldr	r0, [pc, #32]	; (da328 <_Z20__fetch_global_Wire1v+0x40>)
   da308:	f7ff fa82 	bl	d9810 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da30c:	4620      	mov	r0, r4
   da30e:	f7f9 fecf 	bl	d40b0 <__cxa_guard_release>
   da312:	4a06      	ldr	r2, [pc, #24]	; (da32c <_Z20__fetch_global_Wire1v+0x44>)
   da314:	4906      	ldr	r1, [pc, #24]	; (da330 <_Z20__fetch_global_Wire1v+0x48>)
   da316:	4804      	ldr	r0, [pc, #16]	; (da328 <_Z20__fetch_global_Wire1v+0x40>)
   da318:	f000 f80c 	bl	da334 <__aeabi_atexit>
	return wire;
}
   da31c:	4802      	ldr	r0, [pc, #8]	; (da328 <_Z20__fetch_global_Wire1v+0x40>)
   da31e:	b006      	add	sp, #24
   da320:	bd10      	pop	{r4, pc}
   da322:	bf00      	nop
   da324:	2003e52c 	.word	0x2003e52c
   da328:	2003e504 	.word	0x2003e504
   da32c:	2003da28 	.word	0x2003da28
   da330:	000d97b9 	.word	0x000d97b9

000da334 <__aeabi_atexit>:
   da334:	460b      	mov	r3, r1
   da336:	4601      	mov	r1, r0
   da338:	4618      	mov	r0, r3
   da33a:	f000 bd7f 	b.w	dae3c <__cxa_atexit>
	...

000da340 <_ZSt15get_new_handlerv>:
   da340:	4b02      	ldr	r3, [pc, #8]	; (da34c <_ZSt15get_new_handlerv+0xc>)
   da342:	6818      	ldr	r0, [r3, #0]
   da344:	f3bf 8f5f 	dmb	sy
   da348:	4770      	bx	lr
   da34a:	bf00      	nop
   da34c:	2003e530 	.word	0x2003e530

000da350 <_ZdlPvj>:
   da350:	f7f9 bea5 	b.w	d409e <_ZdlPv>

000da354 <_ZnajRKSt9nothrow_t>:
   da354:	f000 b800 	b.w	da358 <_ZnwjRKSt9nothrow_t>

000da358 <_ZnwjRKSt9nothrow_t>:
   da358:	b510      	push	{r4, lr}
   da35a:	2800      	cmp	r0, #0
   da35c:	bf14      	ite	ne
   da35e:	4604      	movne	r4, r0
   da360:	2401      	moveq	r4, #1
   da362:	4620      	mov	r0, r4
   da364:	f7fe fac2 	bl	d88ec <malloc>
   da368:	b920      	cbnz	r0, da374 <_ZnwjRKSt9nothrow_t+0x1c>
   da36a:	f7ff ffe9 	bl	da340 <_ZSt15get_new_handlerv>
   da36e:	b108      	cbz	r0, da374 <_ZnwjRKSt9nothrow_t+0x1c>
   da370:	4780      	blx	r0
   da372:	e7f6      	b.n	da362 <_ZnwjRKSt9nothrow_t+0xa>
   da374:	bd10      	pop	{r4, pc}
	...

000da378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da378:	4b18      	ldr	r3, [pc, #96]	; (da3dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da37a:	681a      	ldr	r2, [r3, #0]
   da37c:	07d1      	lsls	r1, r2, #31
   da37e:	bf5c      	itt	pl
   da380:	2201      	movpl	r2, #1
   da382:	601a      	strpl	r2, [r3, #0]
   da384:	4b16      	ldr	r3, [pc, #88]	; (da3e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da386:	681a      	ldr	r2, [r3, #0]
   da388:	07d2      	lsls	r2, r2, #31
   da38a:	bf5c      	itt	pl
   da38c:	2201      	movpl	r2, #1
   da38e:	601a      	strpl	r2, [r3, #0]
   da390:	4b14      	ldr	r3, [pc, #80]	; (da3e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da392:	681a      	ldr	r2, [r3, #0]
   da394:	07d0      	lsls	r0, r2, #31
   da396:	bf5c      	itt	pl
   da398:	2201      	movpl	r2, #1
   da39a:	601a      	strpl	r2, [r3, #0]
   da39c:	4b12      	ldr	r3, [pc, #72]	; (da3e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da39e:	681a      	ldr	r2, [r3, #0]
   da3a0:	07d1      	lsls	r1, r2, #31
   da3a2:	bf5c      	itt	pl
   da3a4:	2201      	movpl	r2, #1
   da3a6:	601a      	strpl	r2, [r3, #0]
   da3a8:	4b10      	ldr	r3, [pc, #64]	; (da3ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da3aa:	681a      	ldr	r2, [r3, #0]
   da3ac:	07d2      	lsls	r2, r2, #31
   da3ae:	bf5c      	itt	pl
   da3b0:	2201      	movpl	r2, #1
   da3b2:	601a      	strpl	r2, [r3, #0]
   da3b4:	4b0e      	ldr	r3, [pc, #56]	; (da3f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da3b6:	681a      	ldr	r2, [r3, #0]
   da3b8:	07d0      	lsls	r0, r2, #31
   da3ba:	bf5c      	itt	pl
   da3bc:	2201      	movpl	r2, #1
   da3be:	601a      	strpl	r2, [r3, #0]
   da3c0:	4b0c      	ldr	r3, [pc, #48]	; (da3f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da3c2:	681a      	ldr	r2, [r3, #0]
   da3c4:	07d1      	lsls	r1, r2, #31
   da3c6:	bf5c      	itt	pl
   da3c8:	2201      	movpl	r2, #1
   da3ca:	601a      	strpl	r2, [r3, #0]
   da3cc:	4b0a      	ldr	r3, [pc, #40]	; (da3f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da3ce:	681a      	ldr	r2, [r3, #0]
   da3d0:	07d2      	lsls	r2, r2, #31
   da3d2:	bf5c      	itt	pl
   da3d4:	2201      	movpl	r2, #1
   da3d6:	601a      	strpl	r2, [r3, #0]
   da3d8:	4770      	bx	lr
   da3da:	bf00      	nop
   da3dc:	2003e550 	.word	0x2003e550
   da3e0:	2003e54c 	.word	0x2003e54c
   da3e4:	2003e548 	.word	0x2003e548
   da3e8:	2003e544 	.word	0x2003e544
   da3ec:	2003e540 	.word	0x2003e540
   da3f0:	2003e53c 	.word	0x2003e53c
   da3f4:	2003e538 	.word	0x2003e538
   da3f8:	2003e534 	.word	0x2003e534

000da3fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da3fc:	4b24      	ldr	r3, [pc, #144]	; (da490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da3fe:	681a      	ldr	r2, [r3, #0]
   da400:	07d0      	lsls	r0, r2, #31
   da402:	bf5c      	itt	pl
   da404:	2201      	movpl	r2, #1
   da406:	601a      	strpl	r2, [r3, #0]
   da408:	4b22      	ldr	r3, [pc, #136]	; (da494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da40a:	681a      	ldr	r2, [r3, #0]
   da40c:	07d1      	lsls	r1, r2, #31
   da40e:	bf5c      	itt	pl
   da410:	2201      	movpl	r2, #1
   da412:	601a      	strpl	r2, [r3, #0]
   da414:	4b20      	ldr	r3, [pc, #128]	; (da498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da416:	681a      	ldr	r2, [r3, #0]
   da418:	07d2      	lsls	r2, r2, #31
   da41a:	bf5c      	itt	pl
   da41c:	2201      	movpl	r2, #1
   da41e:	601a      	strpl	r2, [r3, #0]
   da420:	4b1e      	ldr	r3, [pc, #120]	; (da49c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da422:	681a      	ldr	r2, [r3, #0]
   da424:	07d0      	lsls	r0, r2, #31
   da426:	bf5c      	itt	pl
   da428:	2201      	movpl	r2, #1
   da42a:	601a      	strpl	r2, [r3, #0]
   da42c:	4b1c      	ldr	r3, [pc, #112]	; (da4a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da42e:	681a      	ldr	r2, [r3, #0]
   da430:	07d1      	lsls	r1, r2, #31
   da432:	bf5c      	itt	pl
   da434:	2201      	movpl	r2, #1
   da436:	601a      	strpl	r2, [r3, #0]
   da438:	4b1a      	ldr	r3, [pc, #104]	; (da4a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da43a:	681a      	ldr	r2, [r3, #0]
   da43c:	07d2      	lsls	r2, r2, #31
   da43e:	bf5c      	itt	pl
   da440:	2201      	movpl	r2, #1
   da442:	601a      	strpl	r2, [r3, #0]
   da444:	4b18      	ldr	r3, [pc, #96]	; (da4a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da446:	681a      	ldr	r2, [r3, #0]
   da448:	07d0      	lsls	r0, r2, #31
   da44a:	bf5c      	itt	pl
   da44c:	2201      	movpl	r2, #1
   da44e:	601a      	strpl	r2, [r3, #0]
   da450:	4b16      	ldr	r3, [pc, #88]	; (da4ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da452:	681a      	ldr	r2, [r3, #0]
   da454:	07d1      	lsls	r1, r2, #31
   da456:	bf5c      	itt	pl
   da458:	2201      	movpl	r2, #1
   da45a:	601a      	strpl	r2, [r3, #0]
   da45c:	4b14      	ldr	r3, [pc, #80]	; (da4b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da45e:	681a      	ldr	r2, [r3, #0]
   da460:	07d2      	lsls	r2, r2, #31
   da462:	bf5c      	itt	pl
   da464:	2201      	movpl	r2, #1
   da466:	601a      	strpl	r2, [r3, #0]
   da468:	4b12      	ldr	r3, [pc, #72]	; (da4b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da46a:	681a      	ldr	r2, [r3, #0]
   da46c:	07d0      	lsls	r0, r2, #31
   da46e:	bf5c      	itt	pl
   da470:	2201      	movpl	r2, #1
   da472:	601a      	strpl	r2, [r3, #0]
   da474:	4b10      	ldr	r3, [pc, #64]	; (da4b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da476:	681a      	ldr	r2, [r3, #0]
   da478:	07d1      	lsls	r1, r2, #31
   da47a:	bf5c      	itt	pl
   da47c:	2201      	movpl	r2, #1
   da47e:	601a      	strpl	r2, [r3, #0]
   da480:	4b0e      	ldr	r3, [pc, #56]	; (da4bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da482:	681a      	ldr	r2, [r3, #0]
   da484:	07d2      	lsls	r2, r2, #31
   da486:	bf5c      	itt	pl
   da488:	2201      	movpl	r2, #1
   da48a:	601a      	strpl	r2, [r3, #0]
   da48c:	4770      	bx	lr
   da48e:	bf00      	nop
   da490:	2003e580 	.word	0x2003e580
   da494:	2003e57c 	.word	0x2003e57c
   da498:	2003e578 	.word	0x2003e578
   da49c:	2003e574 	.word	0x2003e574
   da4a0:	2003e570 	.word	0x2003e570
   da4a4:	2003e56c 	.word	0x2003e56c
   da4a8:	2003e568 	.word	0x2003e568
   da4ac:	2003e564 	.word	0x2003e564
   da4b0:	2003e560 	.word	0x2003e560
   da4b4:	2003e55c 	.word	0x2003e55c
   da4b8:	2003e558 	.word	0x2003e558
   da4bc:	2003e554 	.word	0x2003e554

000da4c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da4c0:	4b24      	ldr	r3, [pc, #144]	; (da554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da4c2:	681a      	ldr	r2, [r3, #0]
   da4c4:	07d0      	lsls	r0, r2, #31
   da4c6:	bf5c      	itt	pl
   da4c8:	2201      	movpl	r2, #1
   da4ca:	601a      	strpl	r2, [r3, #0]
   da4cc:	4b22      	ldr	r3, [pc, #136]	; (da558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da4ce:	681a      	ldr	r2, [r3, #0]
   da4d0:	07d1      	lsls	r1, r2, #31
   da4d2:	bf5c      	itt	pl
   da4d4:	2201      	movpl	r2, #1
   da4d6:	601a      	strpl	r2, [r3, #0]
   da4d8:	4b20      	ldr	r3, [pc, #128]	; (da55c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da4da:	681a      	ldr	r2, [r3, #0]
   da4dc:	07d2      	lsls	r2, r2, #31
   da4de:	bf5c      	itt	pl
   da4e0:	2201      	movpl	r2, #1
   da4e2:	601a      	strpl	r2, [r3, #0]
   da4e4:	4b1e      	ldr	r3, [pc, #120]	; (da560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da4e6:	681a      	ldr	r2, [r3, #0]
   da4e8:	07d0      	lsls	r0, r2, #31
   da4ea:	bf5c      	itt	pl
   da4ec:	2201      	movpl	r2, #1
   da4ee:	601a      	strpl	r2, [r3, #0]
   da4f0:	4b1c      	ldr	r3, [pc, #112]	; (da564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da4f2:	681a      	ldr	r2, [r3, #0]
   da4f4:	07d1      	lsls	r1, r2, #31
   da4f6:	bf5c      	itt	pl
   da4f8:	2201      	movpl	r2, #1
   da4fa:	601a      	strpl	r2, [r3, #0]
   da4fc:	4b1a      	ldr	r3, [pc, #104]	; (da568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da4fe:	681a      	ldr	r2, [r3, #0]
   da500:	07d2      	lsls	r2, r2, #31
   da502:	bf5c      	itt	pl
   da504:	2201      	movpl	r2, #1
   da506:	601a      	strpl	r2, [r3, #0]
   da508:	4b18      	ldr	r3, [pc, #96]	; (da56c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da50a:	681a      	ldr	r2, [r3, #0]
   da50c:	07d0      	lsls	r0, r2, #31
   da50e:	bf5c      	itt	pl
   da510:	2201      	movpl	r2, #1
   da512:	601a      	strpl	r2, [r3, #0]
   da514:	4b16      	ldr	r3, [pc, #88]	; (da570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da516:	681a      	ldr	r2, [r3, #0]
   da518:	07d1      	lsls	r1, r2, #31
   da51a:	bf5c      	itt	pl
   da51c:	2201      	movpl	r2, #1
   da51e:	601a      	strpl	r2, [r3, #0]
   da520:	4b14      	ldr	r3, [pc, #80]	; (da574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da522:	681a      	ldr	r2, [r3, #0]
   da524:	07d2      	lsls	r2, r2, #31
   da526:	bf5c      	itt	pl
   da528:	2201      	movpl	r2, #1
   da52a:	601a      	strpl	r2, [r3, #0]
   da52c:	4b12      	ldr	r3, [pc, #72]	; (da578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da52e:	681a      	ldr	r2, [r3, #0]
   da530:	07d0      	lsls	r0, r2, #31
   da532:	bf5c      	itt	pl
   da534:	2201      	movpl	r2, #1
   da536:	601a      	strpl	r2, [r3, #0]
   da538:	4b10      	ldr	r3, [pc, #64]	; (da57c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da53a:	681a      	ldr	r2, [r3, #0]
   da53c:	07d1      	lsls	r1, r2, #31
   da53e:	bf5c      	itt	pl
   da540:	2201      	movpl	r2, #1
   da542:	601a      	strpl	r2, [r3, #0]
   da544:	4b0e      	ldr	r3, [pc, #56]	; (da580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   da546:	681a      	ldr	r2, [r3, #0]
   da548:	07d2      	lsls	r2, r2, #31
   da54a:	bf5c      	itt	pl
   da54c:	2201      	movpl	r2, #1
   da54e:	601a      	strpl	r2, [r3, #0]
   da550:	4770      	bx	lr
   da552:	bf00      	nop
   da554:	2003e5b0 	.word	0x2003e5b0
   da558:	2003e5ac 	.word	0x2003e5ac
   da55c:	2003e5a8 	.word	0x2003e5a8
   da560:	2003e5a4 	.word	0x2003e5a4
   da564:	2003e5a0 	.word	0x2003e5a0
   da568:	2003e59c 	.word	0x2003e59c
   da56c:	2003e598 	.word	0x2003e598
   da570:	2003e594 	.word	0x2003e594
   da574:	2003e590 	.word	0x2003e590
   da578:	2003e58c 	.word	0x2003e58c
   da57c:	2003e588 	.word	0x2003e588
   da580:	2003e584 	.word	0x2003e584

000da584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da584:	4b18      	ldr	r3, [pc, #96]	; (da5e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da586:	681a      	ldr	r2, [r3, #0]
   da588:	07d1      	lsls	r1, r2, #31
   da58a:	bf5c      	itt	pl
   da58c:	2201      	movpl	r2, #1
   da58e:	601a      	strpl	r2, [r3, #0]
   da590:	4b16      	ldr	r3, [pc, #88]	; (da5ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da592:	681a      	ldr	r2, [r3, #0]
   da594:	07d2      	lsls	r2, r2, #31
   da596:	bf5c      	itt	pl
   da598:	2201      	movpl	r2, #1
   da59a:	601a      	strpl	r2, [r3, #0]
   da59c:	4b14      	ldr	r3, [pc, #80]	; (da5f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da59e:	681a      	ldr	r2, [r3, #0]
   da5a0:	07d0      	lsls	r0, r2, #31
   da5a2:	bf5c      	itt	pl
   da5a4:	2201      	movpl	r2, #1
   da5a6:	601a      	strpl	r2, [r3, #0]
   da5a8:	4b12      	ldr	r3, [pc, #72]	; (da5f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da5aa:	681a      	ldr	r2, [r3, #0]
   da5ac:	07d1      	lsls	r1, r2, #31
   da5ae:	bf5c      	itt	pl
   da5b0:	2201      	movpl	r2, #1
   da5b2:	601a      	strpl	r2, [r3, #0]
   da5b4:	4b10      	ldr	r3, [pc, #64]	; (da5f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da5b6:	681a      	ldr	r2, [r3, #0]
   da5b8:	07d2      	lsls	r2, r2, #31
   da5ba:	bf5c      	itt	pl
   da5bc:	2201      	movpl	r2, #1
   da5be:	601a      	strpl	r2, [r3, #0]
   da5c0:	4b0e      	ldr	r3, [pc, #56]	; (da5fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da5c2:	681a      	ldr	r2, [r3, #0]
   da5c4:	07d0      	lsls	r0, r2, #31
   da5c6:	bf5c      	itt	pl
   da5c8:	2201      	movpl	r2, #1
   da5ca:	601a      	strpl	r2, [r3, #0]
   da5cc:	4b0c      	ldr	r3, [pc, #48]	; (da600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da5ce:	681a      	ldr	r2, [r3, #0]
   da5d0:	07d1      	lsls	r1, r2, #31
   da5d2:	bf5c      	itt	pl
   da5d4:	2201      	movpl	r2, #1
   da5d6:	601a      	strpl	r2, [r3, #0]
   da5d8:	4b0a      	ldr	r3, [pc, #40]	; (da604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da5da:	681a      	ldr	r2, [r3, #0]
   da5dc:	07d2      	lsls	r2, r2, #31
   da5de:	bf5c      	itt	pl
   da5e0:	2201      	movpl	r2, #1
   da5e2:	601a      	strpl	r2, [r3, #0]
   da5e4:	4770      	bx	lr
   da5e6:	bf00      	nop
   da5e8:	2003e5d0 	.word	0x2003e5d0
   da5ec:	2003e5cc 	.word	0x2003e5cc
   da5f0:	2003e5c8 	.word	0x2003e5c8
   da5f4:	2003e5c4 	.word	0x2003e5c4
   da5f8:	2003e5c0 	.word	0x2003e5c0
   da5fc:	2003e5bc 	.word	0x2003e5bc
   da600:	2003e5b8 	.word	0x2003e5b8
   da604:	2003e5b4 	.word	0x2003e5b4

000da608 <__aeabi_drsub>:
   da608:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da60c:	e002      	b.n	da614 <__adddf3>
   da60e:	bf00      	nop

000da610 <__aeabi_dsub>:
   da610:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da614 <__adddf3>:
   da614:	b530      	push	{r4, r5, lr}
   da616:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da61a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da61e:	ea94 0f05 	teq	r4, r5
   da622:	bf08      	it	eq
   da624:	ea90 0f02 	teqeq	r0, r2
   da628:	bf1f      	itttt	ne
   da62a:	ea54 0c00 	orrsne.w	ip, r4, r0
   da62e:	ea55 0c02 	orrsne.w	ip, r5, r2
   da632:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da636:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da63a:	f000 80e2 	beq.w	da802 <__adddf3+0x1ee>
   da63e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da642:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da646:	bfb8      	it	lt
   da648:	426d      	neglt	r5, r5
   da64a:	dd0c      	ble.n	da666 <__adddf3+0x52>
   da64c:	442c      	add	r4, r5
   da64e:	ea80 0202 	eor.w	r2, r0, r2
   da652:	ea81 0303 	eor.w	r3, r1, r3
   da656:	ea82 0000 	eor.w	r0, r2, r0
   da65a:	ea83 0101 	eor.w	r1, r3, r1
   da65e:	ea80 0202 	eor.w	r2, r0, r2
   da662:	ea81 0303 	eor.w	r3, r1, r3
   da666:	2d36      	cmp	r5, #54	; 0x36
   da668:	bf88      	it	hi
   da66a:	bd30      	pophi	{r4, r5, pc}
   da66c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da670:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da674:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da678:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da67c:	d002      	beq.n	da684 <__adddf3+0x70>
   da67e:	4240      	negs	r0, r0
   da680:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da684:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da688:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da68c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da690:	d002      	beq.n	da698 <__adddf3+0x84>
   da692:	4252      	negs	r2, r2
   da694:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da698:	ea94 0f05 	teq	r4, r5
   da69c:	f000 80a7 	beq.w	da7ee <__adddf3+0x1da>
   da6a0:	f1a4 0401 	sub.w	r4, r4, #1
   da6a4:	f1d5 0e20 	rsbs	lr, r5, #32
   da6a8:	db0d      	blt.n	da6c6 <__adddf3+0xb2>
   da6aa:	fa02 fc0e 	lsl.w	ip, r2, lr
   da6ae:	fa22 f205 	lsr.w	r2, r2, r5
   da6b2:	1880      	adds	r0, r0, r2
   da6b4:	f141 0100 	adc.w	r1, r1, #0
   da6b8:	fa03 f20e 	lsl.w	r2, r3, lr
   da6bc:	1880      	adds	r0, r0, r2
   da6be:	fa43 f305 	asr.w	r3, r3, r5
   da6c2:	4159      	adcs	r1, r3
   da6c4:	e00e      	b.n	da6e4 <__adddf3+0xd0>
   da6c6:	f1a5 0520 	sub.w	r5, r5, #32
   da6ca:	f10e 0e20 	add.w	lr, lr, #32
   da6ce:	2a01      	cmp	r2, #1
   da6d0:	fa03 fc0e 	lsl.w	ip, r3, lr
   da6d4:	bf28      	it	cs
   da6d6:	f04c 0c02 	orrcs.w	ip, ip, #2
   da6da:	fa43 f305 	asr.w	r3, r3, r5
   da6de:	18c0      	adds	r0, r0, r3
   da6e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da6e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da6e8:	d507      	bpl.n	da6fa <__adddf3+0xe6>
   da6ea:	f04f 0e00 	mov.w	lr, #0
   da6ee:	f1dc 0c00 	rsbs	ip, ip, #0
   da6f2:	eb7e 0000 	sbcs.w	r0, lr, r0
   da6f6:	eb6e 0101 	sbc.w	r1, lr, r1
   da6fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da6fe:	d31b      	bcc.n	da738 <__adddf3+0x124>
   da700:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da704:	d30c      	bcc.n	da720 <__adddf3+0x10c>
   da706:	0849      	lsrs	r1, r1, #1
   da708:	ea5f 0030 	movs.w	r0, r0, rrx
   da70c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da710:	f104 0401 	add.w	r4, r4, #1
   da714:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da718:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da71c:	f080 809a 	bcs.w	da854 <__adddf3+0x240>
   da720:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da724:	bf08      	it	eq
   da726:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da72a:	f150 0000 	adcs.w	r0, r0, #0
   da72e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da732:	ea41 0105 	orr.w	r1, r1, r5
   da736:	bd30      	pop	{r4, r5, pc}
   da738:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da73c:	4140      	adcs	r0, r0
   da73e:	eb41 0101 	adc.w	r1, r1, r1
   da742:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da746:	f1a4 0401 	sub.w	r4, r4, #1
   da74a:	d1e9      	bne.n	da720 <__adddf3+0x10c>
   da74c:	f091 0f00 	teq	r1, #0
   da750:	bf04      	itt	eq
   da752:	4601      	moveq	r1, r0
   da754:	2000      	moveq	r0, #0
   da756:	fab1 f381 	clz	r3, r1
   da75a:	bf08      	it	eq
   da75c:	3320      	addeq	r3, #32
   da75e:	f1a3 030b 	sub.w	r3, r3, #11
   da762:	f1b3 0220 	subs.w	r2, r3, #32
   da766:	da0c      	bge.n	da782 <__adddf3+0x16e>
   da768:	320c      	adds	r2, #12
   da76a:	dd08      	ble.n	da77e <__adddf3+0x16a>
   da76c:	f102 0c14 	add.w	ip, r2, #20
   da770:	f1c2 020c 	rsb	r2, r2, #12
   da774:	fa01 f00c 	lsl.w	r0, r1, ip
   da778:	fa21 f102 	lsr.w	r1, r1, r2
   da77c:	e00c      	b.n	da798 <__adddf3+0x184>
   da77e:	f102 0214 	add.w	r2, r2, #20
   da782:	bfd8      	it	le
   da784:	f1c2 0c20 	rsble	ip, r2, #32
   da788:	fa01 f102 	lsl.w	r1, r1, r2
   da78c:	fa20 fc0c 	lsr.w	ip, r0, ip
   da790:	bfdc      	itt	le
   da792:	ea41 010c 	orrle.w	r1, r1, ip
   da796:	4090      	lslle	r0, r2
   da798:	1ae4      	subs	r4, r4, r3
   da79a:	bfa2      	ittt	ge
   da79c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da7a0:	4329      	orrge	r1, r5
   da7a2:	bd30      	popge	{r4, r5, pc}
   da7a4:	ea6f 0404 	mvn.w	r4, r4
   da7a8:	3c1f      	subs	r4, #31
   da7aa:	da1c      	bge.n	da7e6 <__adddf3+0x1d2>
   da7ac:	340c      	adds	r4, #12
   da7ae:	dc0e      	bgt.n	da7ce <__adddf3+0x1ba>
   da7b0:	f104 0414 	add.w	r4, r4, #20
   da7b4:	f1c4 0220 	rsb	r2, r4, #32
   da7b8:	fa20 f004 	lsr.w	r0, r0, r4
   da7bc:	fa01 f302 	lsl.w	r3, r1, r2
   da7c0:	ea40 0003 	orr.w	r0, r0, r3
   da7c4:	fa21 f304 	lsr.w	r3, r1, r4
   da7c8:	ea45 0103 	orr.w	r1, r5, r3
   da7cc:	bd30      	pop	{r4, r5, pc}
   da7ce:	f1c4 040c 	rsb	r4, r4, #12
   da7d2:	f1c4 0220 	rsb	r2, r4, #32
   da7d6:	fa20 f002 	lsr.w	r0, r0, r2
   da7da:	fa01 f304 	lsl.w	r3, r1, r4
   da7de:	ea40 0003 	orr.w	r0, r0, r3
   da7e2:	4629      	mov	r1, r5
   da7e4:	bd30      	pop	{r4, r5, pc}
   da7e6:	fa21 f004 	lsr.w	r0, r1, r4
   da7ea:	4629      	mov	r1, r5
   da7ec:	bd30      	pop	{r4, r5, pc}
   da7ee:	f094 0f00 	teq	r4, #0
   da7f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da7f6:	bf06      	itte	eq
   da7f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da7fc:	3401      	addeq	r4, #1
   da7fe:	3d01      	subne	r5, #1
   da800:	e74e      	b.n	da6a0 <__adddf3+0x8c>
   da802:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da806:	bf18      	it	ne
   da808:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da80c:	d029      	beq.n	da862 <__adddf3+0x24e>
   da80e:	ea94 0f05 	teq	r4, r5
   da812:	bf08      	it	eq
   da814:	ea90 0f02 	teqeq	r0, r2
   da818:	d005      	beq.n	da826 <__adddf3+0x212>
   da81a:	ea54 0c00 	orrs.w	ip, r4, r0
   da81e:	bf04      	itt	eq
   da820:	4619      	moveq	r1, r3
   da822:	4610      	moveq	r0, r2
   da824:	bd30      	pop	{r4, r5, pc}
   da826:	ea91 0f03 	teq	r1, r3
   da82a:	bf1e      	ittt	ne
   da82c:	2100      	movne	r1, #0
   da82e:	2000      	movne	r0, #0
   da830:	bd30      	popne	{r4, r5, pc}
   da832:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da836:	d105      	bne.n	da844 <__adddf3+0x230>
   da838:	0040      	lsls	r0, r0, #1
   da83a:	4149      	adcs	r1, r1
   da83c:	bf28      	it	cs
   da83e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da842:	bd30      	pop	{r4, r5, pc}
   da844:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da848:	bf3c      	itt	cc
   da84a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da84e:	bd30      	popcc	{r4, r5, pc}
   da850:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da854:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da85c:	f04f 0000 	mov.w	r0, #0
   da860:	bd30      	pop	{r4, r5, pc}
   da862:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da866:	bf1a      	itte	ne
   da868:	4619      	movne	r1, r3
   da86a:	4610      	movne	r0, r2
   da86c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da870:	bf1c      	itt	ne
   da872:	460b      	movne	r3, r1
   da874:	4602      	movne	r2, r0
   da876:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da87a:	bf06      	itte	eq
   da87c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da880:	ea91 0f03 	teqeq	r1, r3
   da884:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da888:	bd30      	pop	{r4, r5, pc}
   da88a:	bf00      	nop

000da88c <__aeabi_ui2d>:
   da88c:	f090 0f00 	teq	r0, #0
   da890:	bf04      	itt	eq
   da892:	2100      	moveq	r1, #0
   da894:	4770      	bxeq	lr
   da896:	b530      	push	{r4, r5, lr}
   da898:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da89c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da8a0:	f04f 0500 	mov.w	r5, #0
   da8a4:	f04f 0100 	mov.w	r1, #0
   da8a8:	e750      	b.n	da74c <__adddf3+0x138>
   da8aa:	bf00      	nop

000da8ac <__aeabi_i2d>:
   da8ac:	f090 0f00 	teq	r0, #0
   da8b0:	bf04      	itt	eq
   da8b2:	2100      	moveq	r1, #0
   da8b4:	4770      	bxeq	lr
   da8b6:	b530      	push	{r4, r5, lr}
   da8b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da8bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da8c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da8c4:	bf48      	it	mi
   da8c6:	4240      	negmi	r0, r0
   da8c8:	f04f 0100 	mov.w	r1, #0
   da8cc:	e73e      	b.n	da74c <__adddf3+0x138>
   da8ce:	bf00      	nop

000da8d0 <__aeabi_f2d>:
   da8d0:	0042      	lsls	r2, r0, #1
   da8d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da8d6:	ea4f 0131 	mov.w	r1, r1, rrx
   da8da:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da8de:	bf1f      	itttt	ne
   da8e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da8e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da8e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da8ec:	4770      	bxne	lr
   da8ee:	f092 0f00 	teq	r2, #0
   da8f2:	bf14      	ite	ne
   da8f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da8f8:	4770      	bxeq	lr
   da8fa:	b530      	push	{r4, r5, lr}
   da8fc:	f44f 7460 	mov.w	r4, #896	; 0x380
   da900:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da904:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da908:	e720      	b.n	da74c <__adddf3+0x138>
   da90a:	bf00      	nop

000da90c <__aeabi_ul2d>:
   da90c:	ea50 0201 	orrs.w	r2, r0, r1
   da910:	bf08      	it	eq
   da912:	4770      	bxeq	lr
   da914:	b530      	push	{r4, r5, lr}
   da916:	f04f 0500 	mov.w	r5, #0
   da91a:	e00a      	b.n	da932 <__aeabi_l2d+0x16>

000da91c <__aeabi_l2d>:
   da91c:	ea50 0201 	orrs.w	r2, r0, r1
   da920:	bf08      	it	eq
   da922:	4770      	bxeq	lr
   da924:	b530      	push	{r4, r5, lr}
   da926:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da92a:	d502      	bpl.n	da932 <__aeabi_l2d+0x16>
   da92c:	4240      	negs	r0, r0
   da92e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da932:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da936:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da93a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da93e:	f43f aedc 	beq.w	da6fa <__adddf3+0xe6>
   da942:	f04f 0203 	mov.w	r2, #3
   da946:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da94a:	bf18      	it	ne
   da94c:	3203      	addne	r2, #3
   da94e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da952:	bf18      	it	ne
   da954:	3203      	addne	r2, #3
   da956:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da95a:	f1c2 0320 	rsb	r3, r2, #32
   da95e:	fa00 fc03 	lsl.w	ip, r0, r3
   da962:	fa20 f002 	lsr.w	r0, r0, r2
   da966:	fa01 fe03 	lsl.w	lr, r1, r3
   da96a:	ea40 000e 	orr.w	r0, r0, lr
   da96e:	fa21 f102 	lsr.w	r1, r1, r2
   da972:	4414      	add	r4, r2
   da974:	e6c1      	b.n	da6fa <__adddf3+0xe6>
   da976:	bf00      	nop

000da978 <__aeabi_dmul>:
   da978:	b570      	push	{r4, r5, r6, lr}
   da97a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da97e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da982:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da986:	bf1d      	ittte	ne
   da988:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da98c:	ea94 0f0c 	teqne	r4, ip
   da990:	ea95 0f0c 	teqne	r5, ip
   da994:	f000 f8de 	bleq	dab54 <__aeabi_dmul+0x1dc>
   da998:	442c      	add	r4, r5
   da99a:	ea81 0603 	eor.w	r6, r1, r3
   da99e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da9a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da9a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da9aa:	bf18      	it	ne
   da9ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da9b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da9b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da9b8:	d038      	beq.n	daa2c <__aeabi_dmul+0xb4>
   da9ba:	fba0 ce02 	umull	ip, lr, r0, r2
   da9be:	f04f 0500 	mov.w	r5, #0
   da9c2:	fbe1 e502 	umlal	lr, r5, r1, r2
   da9c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da9ca:	fbe0 e503 	umlal	lr, r5, r0, r3
   da9ce:	f04f 0600 	mov.w	r6, #0
   da9d2:	fbe1 5603 	umlal	r5, r6, r1, r3
   da9d6:	f09c 0f00 	teq	ip, #0
   da9da:	bf18      	it	ne
   da9dc:	f04e 0e01 	orrne.w	lr, lr, #1
   da9e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da9e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da9e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da9ec:	d204      	bcs.n	da9f8 <__aeabi_dmul+0x80>
   da9ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da9f2:	416d      	adcs	r5, r5
   da9f4:	eb46 0606 	adc.w	r6, r6, r6
   da9f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da9fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   daa00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   daa04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   daa08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   daa0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   daa10:	bf88      	it	hi
   daa12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   daa16:	d81e      	bhi.n	daa56 <__aeabi_dmul+0xde>
   daa18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   daa1c:	bf08      	it	eq
   daa1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   daa22:	f150 0000 	adcs.w	r0, r0, #0
   daa26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   daa2a:	bd70      	pop	{r4, r5, r6, pc}
   daa2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   daa30:	ea46 0101 	orr.w	r1, r6, r1
   daa34:	ea40 0002 	orr.w	r0, r0, r2
   daa38:	ea81 0103 	eor.w	r1, r1, r3
   daa3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   daa40:	bfc2      	ittt	gt
   daa42:	ebd4 050c 	rsbsgt	r5, r4, ip
   daa46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   daa4a:	bd70      	popgt	{r4, r5, r6, pc}
   daa4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daa50:	f04f 0e00 	mov.w	lr, #0
   daa54:	3c01      	subs	r4, #1
   daa56:	f300 80ab 	bgt.w	dabb0 <__aeabi_dmul+0x238>
   daa5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   daa5e:	bfde      	ittt	le
   daa60:	2000      	movle	r0, #0
   daa62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   daa66:	bd70      	pople	{r4, r5, r6, pc}
   daa68:	f1c4 0400 	rsb	r4, r4, #0
   daa6c:	3c20      	subs	r4, #32
   daa6e:	da35      	bge.n	daadc <__aeabi_dmul+0x164>
   daa70:	340c      	adds	r4, #12
   daa72:	dc1b      	bgt.n	daaac <__aeabi_dmul+0x134>
   daa74:	f104 0414 	add.w	r4, r4, #20
   daa78:	f1c4 0520 	rsb	r5, r4, #32
   daa7c:	fa00 f305 	lsl.w	r3, r0, r5
   daa80:	fa20 f004 	lsr.w	r0, r0, r4
   daa84:	fa01 f205 	lsl.w	r2, r1, r5
   daa88:	ea40 0002 	orr.w	r0, r0, r2
   daa8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   daa90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   daa94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   daa98:	fa21 f604 	lsr.w	r6, r1, r4
   daa9c:	eb42 0106 	adc.w	r1, r2, r6
   daaa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   daaa4:	bf08      	it	eq
   daaa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   daaaa:	bd70      	pop	{r4, r5, r6, pc}
   daaac:	f1c4 040c 	rsb	r4, r4, #12
   daab0:	f1c4 0520 	rsb	r5, r4, #32
   daab4:	fa00 f304 	lsl.w	r3, r0, r4
   daab8:	fa20 f005 	lsr.w	r0, r0, r5
   daabc:	fa01 f204 	lsl.w	r2, r1, r4
   daac0:	ea40 0002 	orr.w	r0, r0, r2
   daac4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daac8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   daacc:	f141 0100 	adc.w	r1, r1, #0
   daad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   daad4:	bf08      	it	eq
   daad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   daada:	bd70      	pop	{r4, r5, r6, pc}
   daadc:	f1c4 0520 	rsb	r5, r4, #32
   daae0:	fa00 f205 	lsl.w	r2, r0, r5
   daae4:	ea4e 0e02 	orr.w	lr, lr, r2
   daae8:	fa20 f304 	lsr.w	r3, r0, r4
   daaec:	fa01 f205 	lsl.w	r2, r1, r5
   daaf0:	ea43 0302 	orr.w	r3, r3, r2
   daaf4:	fa21 f004 	lsr.w	r0, r1, r4
   daaf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daafc:	fa21 f204 	lsr.w	r2, r1, r4
   dab00:	ea20 0002 	bic.w	r0, r0, r2
   dab04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dab08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dab0c:	bf08      	it	eq
   dab0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dab12:	bd70      	pop	{r4, r5, r6, pc}
   dab14:	f094 0f00 	teq	r4, #0
   dab18:	d10f      	bne.n	dab3a <__aeabi_dmul+0x1c2>
   dab1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dab1e:	0040      	lsls	r0, r0, #1
   dab20:	eb41 0101 	adc.w	r1, r1, r1
   dab24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab28:	bf08      	it	eq
   dab2a:	3c01      	subeq	r4, #1
   dab2c:	d0f7      	beq.n	dab1e <__aeabi_dmul+0x1a6>
   dab2e:	ea41 0106 	orr.w	r1, r1, r6
   dab32:	f095 0f00 	teq	r5, #0
   dab36:	bf18      	it	ne
   dab38:	4770      	bxne	lr
   dab3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dab3e:	0052      	lsls	r2, r2, #1
   dab40:	eb43 0303 	adc.w	r3, r3, r3
   dab44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dab48:	bf08      	it	eq
   dab4a:	3d01      	subeq	r5, #1
   dab4c:	d0f7      	beq.n	dab3e <__aeabi_dmul+0x1c6>
   dab4e:	ea43 0306 	orr.w	r3, r3, r6
   dab52:	4770      	bx	lr
   dab54:	ea94 0f0c 	teq	r4, ip
   dab58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dab5c:	bf18      	it	ne
   dab5e:	ea95 0f0c 	teqne	r5, ip
   dab62:	d00c      	beq.n	dab7e <__aeabi_dmul+0x206>
   dab64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dab68:	bf18      	it	ne
   dab6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dab6e:	d1d1      	bne.n	dab14 <__aeabi_dmul+0x19c>
   dab70:	ea81 0103 	eor.w	r1, r1, r3
   dab74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dab78:	f04f 0000 	mov.w	r0, #0
   dab7c:	bd70      	pop	{r4, r5, r6, pc}
   dab7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dab82:	bf06      	itte	eq
   dab84:	4610      	moveq	r0, r2
   dab86:	4619      	moveq	r1, r3
   dab88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dab8c:	d019      	beq.n	dabc2 <__aeabi_dmul+0x24a>
   dab8e:	ea94 0f0c 	teq	r4, ip
   dab92:	d102      	bne.n	dab9a <__aeabi_dmul+0x222>
   dab94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dab98:	d113      	bne.n	dabc2 <__aeabi_dmul+0x24a>
   dab9a:	ea95 0f0c 	teq	r5, ip
   dab9e:	d105      	bne.n	dabac <__aeabi_dmul+0x234>
   daba0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   daba4:	bf1c      	itt	ne
   daba6:	4610      	movne	r0, r2
   daba8:	4619      	movne	r1, r3
   dabaa:	d10a      	bne.n	dabc2 <__aeabi_dmul+0x24a>
   dabac:	ea81 0103 	eor.w	r1, r1, r3
   dabb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dabb4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dabb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dabbc:	f04f 0000 	mov.w	r0, #0
   dabc0:	bd70      	pop	{r4, r5, r6, pc}
   dabc2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dabc6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dabca:	bd70      	pop	{r4, r5, r6, pc}

000dabcc <__aeabi_ddiv>:
   dabcc:	b570      	push	{r4, r5, r6, lr}
   dabce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dabd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dabd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dabda:	bf1d      	ittte	ne
   dabdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dabe0:	ea94 0f0c 	teqne	r4, ip
   dabe4:	ea95 0f0c 	teqne	r5, ip
   dabe8:	f000 f8a7 	bleq	dad3a <__aeabi_ddiv+0x16e>
   dabec:	eba4 0405 	sub.w	r4, r4, r5
   dabf0:	ea81 0e03 	eor.w	lr, r1, r3
   dabf4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dabf8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dabfc:	f000 8088 	beq.w	dad10 <__aeabi_ddiv+0x144>
   dac00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dac04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dac08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dac0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dac10:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dac14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dac18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dac1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dac20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dac24:	429d      	cmp	r5, r3
   dac26:	bf08      	it	eq
   dac28:	4296      	cmpeq	r6, r2
   dac2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dac2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dac32:	d202      	bcs.n	dac3a <__aeabi_ddiv+0x6e>
   dac34:	085b      	lsrs	r3, r3, #1
   dac36:	ea4f 0232 	mov.w	r2, r2, rrx
   dac3a:	1ab6      	subs	r6, r6, r2
   dac3c:	eb65 0503 	sbc.w	r5, r5, r3
   dac40:	085b      	lsrs	r3, r3, #1
   dac42:	ea4f 0232 	mov.w	r2, r2, rrx
   dac46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dac4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dac4e:	ebb6 0e02 	subs.w	lr, r6, r2
   dac52:	eb75 0e03 	sbcs.w	lr, r5, r3
   dac56:	bf22      	ittt	cs
   dac58:	1ab6      	subcs	r6, r6, r2
   dac5a:	4675      	movcs	r5, lr
   dac5c:	ea40 000c 	orrcs.w	r0, r0, ip
   dac60:	085b      	lsrs	r3, r3, #1
   dac62:	ea4f 0232 	mov.w	r2, r2, rrx
   dac66:	ebb6 0e02 	subs.w	lr, r6, r2
   dac6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dac6e:	bf22      	ittt	cs
   dac70:	1ab6      	subcs	r6, r6, r2
   dac72:	4675      	movcs	r5, lr
   dac74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dac78:	085b      	lsrs	r3, r3, #1
   dac7a:	ea4f 0232 	mov.w	r2, r2, rrx
   dac7e:	ebb6 0e02 	subs.w	lr, r6, r2
   dac82:	eb75 0e03 	sbcs.w	lr, r5, r3
   dac86:	bf22      	ittt	cs
   dac88:	1ab6      	subcs	r6, r6, r2
   dac8a:	4675      	movcs	r5, lr
   dac8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dac90:	085b      	lsrs	r3, r3, #1
   dac92:	ea4f 0232 	mov.w	r2, r2, rrx
   dac96:	ebb6 0e02 	subs.w	lr, r6, r2
   dac9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dac9e:	bf22      	ittt	cs
   daca0:	1ab6      	subcs	r6, r6, r2
   daca2:	4675      	movcs	r5, lr
   daca4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   daca8:	ea55 0e06 	orrs.w	lr, r5, r6
   dacac:	d018      	beq.n	dace0 <__aeabi_ddiv+0x114>
   dacae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dacb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dacb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dacba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dacbe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dacc2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dacc6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dacca:	d1c0      	bne.n	dac4e <__aeabi_ddiv+0x82>
   daccc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dacd0:	d10b      	bne.n	dacea <__aeabi_ddiv+0x11e>
   dacd2:	ea41 0100 	orr.w	r1, r1, r0
   dacd6:	f04f 0000 	mov.w	r0, #0
   dacda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dacde:	e7b6      	b.n	dac4e <__aeabi_ddiv+0x82>
   dace0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dace4:	bf04      	itt	eq
   dace6:	4301      	orreq	r1, r0
   dace8:	2000      	moveq	r0, #0
   dacea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dacee:	bf88      	it	hi
   dacf0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dacf4:	f63f aeaf 	bhi.w	daa56 <__aeabi_dmul+0xde>
   dacf8:	ebb5 0c03 	subs.w	ip, r5, r3
   dacfc:	bf04      	itt	eq
   dacfe:	ebb6 0c02 	subseq.w	ip, r6, r2
   dad02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dad06:	f150 0000 	adcs.w	r0, r0, #0
   dad0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dad0e:	bd70      	pop	{r4, r5, r6, pc}
   dad10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dad14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dad18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dad1c:	bfc2      	ittt	gt
   dad1e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dad22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dad26:	bd70      	popgt	{r4, r5, r6, pc}
   dad28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dad2c:	f04f 0e00 	mov.w	lr, #0
   dad30:	3c01      	subs	r4, #1
   dad32:	e690      	b.n	daa56 <__aeabi_dmul+0xde>
   dad34:	ea45 0e06 	orr.w	lr, r5, r6
   dad38:	e68d      	b.n	daa56 <__aeabi_dmul+0xde>
   dad3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dad3e:	ea94 0f0c 	teq	r4, ip
   dad42:	bf08      	it	eq
   dad44:	ea95 0f0c 	teqeq	r5, ip
   dad48:	f43f af3b 	beq.w	dabc2 <__aeabi_dmul+0x24a>
   dad4c:	ea94 0f0c 	teq	r4, ip
   dad50:	d10a      	bne.n	dad68 <__aeabi_ddiv+0x19c>
   dad52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dad56:	f47f af34 	bne.w	dabc2 <__aeabi_dmul+0x24a>
   dad5a:	ea95 0f0c 	teq	r5, ip
   dad5e:	f47f af25 	bne.w	dabac <__aeabi_dmul+0x234>
   dad62:	4610      	mov	r0, r2
   dad64:	4619      	mov	r1, r3
   dad66:	e72c      	b.n	dabc2 <__aeabi_dmul+0x24a>
   dad68:	ea95 0f0c 	teq	r5, ip
   dad6c:	d106      	bne.n	dad7c <__aeabi_ddiv+0x1b0>
   dad6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dad72:	f43f aefd 	beq.w	dab70 <__aeabi_dmul+0x1f8>
   dad76:	4610      	mov	r0, r2
   dad78:	4619      	mov	r1, r3
   dad7a:	e722      	b.n	dabc2 <__aeabi_dmul+0x24a>
   dad7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dad80:	bf18      	it	ne
   dad82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dad86:	f47f aec5 	bne.w	dab14 <__aeabi_dmul+0x19c>
   dad8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dad8e:	f47f af0d 	bne.w	dabac <__aeabi_dmul+0x234>
   dad92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dad96:	f47f aeeb 	bne.w	dab70 <__aeabi_dmul+0x1f8>
   dad9a:	e712      	b.n	dabc2 <__aeabi_dmul+0x24a>

000dad9c <__aeabi_d2f>:
   dad9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dada0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dada4:	bf24      	itt	cs
   dada6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dadaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dadae:	d90d      	bls.n	dadcc <__aeabi_d2f+0x30>
   dadb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dadb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dadb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dadbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dadc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dadc4:	bf08      	it	eq
   dadc6:	f020 0001 	biceq.w	r0, r0, #1
   dadca:	4770      	bx	lr
   dadcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dadd0:	d121      	bne.n	dae16 <__aeabi_d2f+0x7a>
   dadd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dadd6:	bfbc      	itt	lt
   dadd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   daddc:	4770      	bxlt	lr
   dadde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dade2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dade6:	f1c2 0218 	rsb	r2, r2, #24
   dadea:	f1c2 0c20 	rsb	ip, r2, #32
   dadee:	fa10 f30c 	lsls.w	r3, r0, ip
   dadf2:	fa20 f002 	lsr.w	r0, r0, r2
   dadf6:	bf18      	it	ne
   dadf8:	f040 0001 	orrne.w	r0, r0, #1
   dadfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dae00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dae04:	fa03 fc0c 	lsl.w	ip, r3, ip
   dae08:	ea40 000c 	orr.w	r0, r0, ip
   dae0c:	fa23 f302 	lsr.w	r3, r3, r2
   dae10:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dae14:	e7cc      	b.n	dadb0 <__aeabi_d2f+0x14>
   dae16:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dae1a:	d107      	bne.n	dae2c <__aeabi_d2f+0x90>
   dae1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dae20:	bf1e      	ittt	ne
   dae22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dae26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dae2a:	4770      	bxne	lr
   dae2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dae30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dae34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dae38:	4770      	bx	lr
   dae3a:	bf00      	nop

000dae3c <__cxa_atexit>:
   dae3c:	b510      	push	{r4, lr}
   dae3e:	4c05      	ldr	r4, [pc, #20]	; (dae54 <__cxa_atexit+0x18>)
   dae40:	4613      	mov	r3, r2
   dae42:	b12c      	cbz	r4, dae50 <__cxa_atexit+0x14>
   dae44:	460a      	mov	r2, r1
   dae46:	4601      	mov	r1, r0
   dae48:	2002      	movs	r0, #2
   dae4a:	f3af 8000 	nop.w
   dae4e:	bd10      	pop	{r4, pc}
   dae50:	4620      	mov	r0, r4
   dae52:	bd10      	pop	{r4, pc}
   dae54:	00000000 	.word	0x00000000

000dae58 <memcmp>:
   dae58:	b510      	push	{r4, lr}
   dae5a:	3901      	subs	r1, #1
   dae5c:	4402      	add	r2, r0
   dae5e:	4290      	cmp	r0, r2
   dae60:	d007      	beq.n	dae72 <memcmp+0x1a>
   dae62:	f810 3b01 	ldrb.w	r3, [r0], #1
   dae66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dae6a:	42a3      	cmp	r3, r4
   dae6c:	d0f7      	beq.n	dae5e <memcmp+0x6>
   dae6e:	1b18      	subs	r0, r3, r4
   dae70:	bd10      	pop	{r4, pc}
   dae72:	2000      	movs	r0, #0
   dae74:	bd10      	pop	{r4, pc}

000dae76 <memcpy>:
   dae76:	b510      	push	{r4, lr}
   dae78:	1e43      	subs	r3, r0, #1
   dae7a:	440a      	add	r2, r1
   dae7c:	4291      	cmp	r1, r2
   dae7e:	d004      	beq.n	dae8a <memcpy+0x14>
   dae80:	f811 4b01 	ldrb.w	r4, [r1], #1
   dae84:	f803 4f01 	strb.w	r4, [r3, #1]!
   dae88:	e7f8      	b.n	dae7c <memcpy+0x6>
   dae8a:	bd10      	pop	{r4, pc}

000dae8c <memset>:
   dae8c:	4402      	add	r2, r0
   dae8e:	4603      	mov	r3, r0
   dae90:	4293      	cmp	r3, r2
   dae92:	d002      	beq.n	dae9a <memset+0xe>
   dae94:	f803 1b01 	strb.w	r1, [r3], #1
   dae98:	e7fa      	b.n	dae90 <memset+0x4>
   dae9a:	4770      	bx	lr

000dae9c <srand>:
   dae9c:	b538      	push	{r3, r4, r5, lr}
   dae9e:	4b12      	ldr	r3, [pc, #72]	; (daee8 <srand+0x4c>)
   daea0:	681c      	ldr	r4, [r3, #0]
   daea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   daea4:	4605      	mov	r5, r0
   daea6:	b9d3      	cbnz	r3, daede <srand+0x42>
   daea8:	2018      	movs	r0, #24
   daeaa:	f7fd fd1f 	bl	d88ec <malloc>
   daeae:	f243 330e 	movw	r3, #13070	; 0x330e
   daeb2:	63a0      	str	r0, [r4, #56]	; 0x38
   daeb4:	8003      	strh	r3, [r0, #0]
   daeb6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   daeba:	8043      	strh	r3, [r0, #2]
   daebc:	f241 2334 	movw	r3, #4660	; 0x1234
   daec0:	8083      	strh	r3, [r0, #4]
   daec2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   daec6:	80c3      	strh	r3, [r0, #6]
   daec8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   daecc:	8103      	strh	r3, [r0, #8]
   daece:	2305      	movs	r3, #5
   daed0:	8143      	strh	r3, [r0, #10]
   daed2:	230b      	movs	r3, #11
   daed4:	8183      	strh	r3, [r0, #12]
   daed6:	2201      	movs	r2, #1
   daed8:	2300      	movs	r3, #0
   daeda:	e9c0 2304 	strd	r2, r3, [r0, #16]
   daede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   daee0:	2200      	movs	r2, #0
   daee2:	611d      	str	r5, [r3, #16]
   daee4:	615a      	str	r2, [r3, #20]
   daee6:	bd38      	pop	{r3, r4, r5, pc}
   daee8:	2003da24 	.word	0x2003da24

000daeec <strchr>:
   daeec:	b2c9      	uxtb	r1, r1
   daeee:	4603      	mov	r3, r0
   daef0:	f810 2b01 	ldrb.w	r2, [r0], #1
   daef4:	b11a      	cbz	r2, daefe <strchr+0x12>
   daef6:	4291      	cmp	r1, r2
   daef8:	d1f9      	bne.n	daeee <strchr+0x2>
   daefa:	4618      	mov	r0, r3
   daefc:	4770      	bx	lr
   daefe:	2900      	cmp	r1, #0
   daf00:	bf0c      	ite	eq
   daf02:	4618      	moveq	r0, r3
   daf04:	2000      	movne	r0, #0
   daf06:	4770      	bx	lr

000daf08 <strcpy>:
   daf08:	4603      	mov	r3, r0
   daf0a:	f811 2b01 	ldrb.w	r2, [r1], #1
   daf0e:	f803 2b01 	strb.w	r2, [r3], #1
   daf12:	2a00      	cmp	r2, #0
   daf14:	d1f9      	bne.n	daf0a <strcpy+0x2>
   daf16:	4770      	bx	lr

000daf18 <strlen>:
   daf18:	4603      	mov	r3, r0
   daf1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   daf1e:	2a00      	cmp	r2, #0
   daf20:	d1fb      	bne.n	daf1a <strlen+0x2>
   daf22:	1a18      	subs	r0, r3, r0
   daf24:	3801      	subs	r0, #1
   daf26:	4770      	bx	lr

000daf28 <dynalib_user>:
   daf28:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   daf38:	0000 0000 002e 7055 6f6c 6461 6e69 3a67     ......Uploading:
   daf48:	0020 4f20 004b 4420 4c45 4520 5252 524f      . OK. DEL ERROR
   daf58:	2000 514d 5454 4520 5252 524f 3000 7d00     . MQTT ERROR.0.}
   daf68:	000a 540a 4d49 3a45 0020 504f 5320 4154     ...TIME: .OP STA
   daf78:	4554 003a 4552 4f50 5452 4e49 2047 4e49     TE:.REPORTING IN
   daf88:	4554 5652 4c41 203a 4400 5441 2041 4552     TERVAL: .DATA RE
   daf98:	4f53 554c 4954 4e4f 203a 5300 5245 4149     SOLUTION: .SERIA
   dafa8:	204c 554e 424d 5245 203a 4d00 5451 2054     L NUMBER: .MQTT 
   dafb8:	5242 4b4f 5245 203a 4d00 5451 2054 5242     BROKER: .MQTT BR
   dafc8:	4b4f 5245 5020 524f 3a54 0020 4954 454d     OKER PORT: .TIME
   dafd8:	4f5a 454e 203a 4900 5252 4749 5441 4f49     ZONE: .IRRIGATIO
   dafe8:	204e 4f48 5255 203a 4300 4548 4b43 5553     N HOUR: .CHECKSU
   daff8:	3a4d 0020 6553 7474 6e69 7367 5320 7661     M: .Settings Sav
   db008:	6465 7320 6375 6563 7373 7566 6c6c 0079     ed successfully.
   db018:	4553 4952 4c41 4420 5441 2041 4553 5454     SERIAL DATA SETT
   db028:	4e49 5347 2d20 3e2d 7b20 5300 5445 4954     INGS --> {.SETTI
   db038:	474e 2053 4146 4c49 4445 5200 4345 4945     NGS FAILED.RECEI
   db048:	4556 2044 534d 3a47 0020 4d0a 5345 4153     VED MSG: ..MESSA
   db058:	4547 5420 5059 3a45 0020 3434 3500 0035     GE TYPE: .44.55.
   db068:	5550 4c42 5349 2048 4146 4c49 4445 6200     PUBLISH FAILED.b
   db078:	6f72 656b 2e72 6968 6576 716d 632e 6d6f     roker.hivemq.com
   db088:	0a00 6544 6976 6563 4920 3a44 0020 540a     ..Device ID: ..T
   db098:	7365 6974 676e 4520 5045 4f52 3a4d 0a00     esting EEPROM:..
   db0a8:	7250 7365 2073 7562 7474 6e6f 6620 726f     Press button for
   db0b8:	203a 2000 6553 6f63 646e 0073 540a 7365     : . Seconds..Tes
   db0c8:	6974 676e 4220 7475 6f74 3a6e 0a00 6554     ting Button:..Te
   db0d8:	7473 6e69 2067 6156 766c 3a65 0a00 6554     sting Valve:..Te
   db0e8:	7473 6e69 2067 4453 4320 7261 3a64 0a00     sting SD Card:..
   db0f8:	6554 7473 6e69 2067 6152 6964 3a6f 0a00     Testing Radio:..
   db108:	6e55 6e6b 776f 206e 6f63 6d6d 6e61 0064     Unknown command.
   db118:	5355 4e49 2047 4544 4146 4c55 2054 4553     USING DEFAULT SE
   db128:	5454 4e49 5347 5500 4953 474e 5320 5445     TTINGS.USING SET
   db138:	4954 474e 2053 5246 4d4f 4d20 4d45 524f     TINGS FROM MEMOR
   db148:	0059 6574 7473 622e 6f72 656b 2e72 6f63     Y.test.broker.co
   db158:	006d 0000                                   m...

000db15c <_ZTV5Timer>:
	...
   db164:	51fd 000d 5245 000d 511d 000d               .Q..ER...Q..

000db170 <_ZTVN8particle13__SPISettingsE>:
	...
   db178:	5431 000d                                   1T..

000db17c <_ZTV4File>:
	...
   db184:	542f 000d 54c7 000d 54a1 000d 5495 000d     /T...T...T...T..
   db194:	5411 000d 550b 000d 548f 000d 5489 000d     .T...U...T...T..

000db1a4 <_ZTV6SdFile>:
	...
   db1ac:	542d 000d 54b9 000d 54d5 000d 549b 000d     -T...T...T...T..
   db1bc:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   db1cc:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   db1dc:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   db1ec:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   db1fc:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   db20c:	2558 3230 2e58 4f4c 0047 6153 6976 676e     X%02X.LOG.Saving
   db21c:	203a 2000 6953 657a 203a 2f00 5200 4d46     : . Size: ./.RFM
   db22c:	3936 4920 494e 2054 5245 4f52 0052 454e     69 INIT ERROR.NE
   db23c:	2057 4853 4549 444c 5220 2046 4449 203a     W SHIELD RF ID: 
   db24c:	4e00 5745 4e20 5445 4f57 4b52 4920 3a44     .NEW NETWORK ID:
   db25c:	0020 4749 2d48 4652 364d 4839 5743 4b2d      .IGH-RFM69HCW-K
   db26c:	5945 3c00 4554 5453 003e 543c 5345 3a54     EY.<TEST>.<TEST:
   db27c:	4b4f 003e 0400 514d 5454 0004 4d06 4951     OK>...MQTT...MQI
   db28c:	6473 0370                                   sdp.

000db290 <_ZTV5RFM69>:
	...
   db298:	7eb5 000d                                   .~..

000db29c <_ZTVN5spark13EthernetClassE>:
	...
   db2a4:	89ab 000d 89a1 000d 8997 000d 898d 000d     ................
   db2b4:	8981 000d 8975 000d 8969 000d 8961 000d     ....u...i...a...
   db2c4:	8957 000d 894d 000d a043 000d               W...M...C...

000db2d0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   db2d0:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   db2e0:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   db2f0:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   db300:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   db310:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   db320:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   db330:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   db340:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   db350:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   db360:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   db370:	7465 6961 736c 3d20 0020 0a0d 6600 6c00     etails = ....f.l
   db380:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   db390:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   db3a0:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   db3b0:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
   db3c0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   db3d0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000db3e0 <_ZTV14CellularSignal>:
	...
   db3e8:	5869 000d 586b 000d 9031 000d 90c1 000d     iX..kX..1.......
   db3f8:	9035 000d 908d 000d 9061 000d 9133 000d     5.......a...3...
   db408:	fffc ffff 0000 0000 915d 000d               ........]...

000db414 <_ZTV9IPAddress>:
	...
   db41c:	9369 000d 9359 000d 935b 000d               i...Y...[...

000db428 <_ZTV9USBSerial>:
	...
   db430:	9481 000d 94d1 000d 94df 000d 8e55 000d     ............U...
   db440:	94bd 000d 9483 000d 9499 000d 94cb 000d     ................
   db450:	94af 000d 947d 000d                         ....}...

000db458 <_ZTVN5spark13CellularClassE>:
	...
   db460:	967b 000d 9671 000d 9667 000d 961d 000d     {...q...g.......
   db470:	965b 000d 964f 000d 9643 000d 963b 000d     [...O...C...;...
   db480:	9631 000d 9627 000d a043 000d               1...'...C...

000db48c <_ZTV11USARTSerial>:
	...
   db494:	96b5 000d 9705 000d 9713 000d 8e55 000d     ............U...
   db4a4:	96c9 000d 96eb 000d 96d7 000d 96ff 000d     ................
   db4b4:	96b7 000d 96bb 000d                         ........

000db4bc <_ZTV7TwoWire>:
	...
   db4c4:	97b9 000d 9803 000d 97db 000d 97bb 000d     ................
   db4d4:	97e3 000d 97eb 000d 97f3 000d 97fb 000d     ................

000db4e4 <_ZTVN5spark9MeshClassE>:
	...
   db4ec:	9931 000d 9927 000d 991d 000d 9913 000d     1...'...........
   db4fc:	9907 000d 98fb 000d 98ef 000d 98e7 000d     ................
   db50c:	98dd 000d 98d3 000d a043 000d               ........C...

000db518 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   db520:	9ad5 000d 9adb 000d 9fc3 000d 9ae9 000d     ................
   db530:	9ad7 000d                                   ....

000db534 <_ZTV9TCPClient>:
	...
   db53c:	5b19 000d 5b4d 000d 9a4d 000d 9a67 000d     .[..M[..M...g...
   db54c:	9e69 000d 9bbb 000d 9b8d 000d 9a91 000d     i...............
   db55c:	9d45 000d 9c41 000d 9bef 000d 9e39 000d     E...A.......9...
   db56c:	9a93 000d 9acb 000d 9a79 000d 9aed 000d     ........y.......
   db57c:	9b6d 000d 6977 6972 676e 7200 6365 2076     m...wiring.recv 
   db58c:	7265 6f72 2072 203d 6425 0000               error = %d..

000db598 <_ZTVN5spark12NetworkClassE>:
	...
   db5a0:	9fdb 000d 9fe5 000d 9fef 000d 9ff9 000d     ................
   db5b0:	a003 000d a00f 000d a01b 000d a027 000d     ............'...
   db5c0:	a02f 000d a039 000d a043 000d               /...9...C...

000db5cc <_ZSt7nothrow>:
   db5cc:	0000 0000                                   ....

000db5d0 <__sf_fake_stdin>:
	...

000db5f0 <__sf_fake_stdout>:
	...

000db610 <__sf_fake_stderr>:
	...
   db630:	0043                                        C.

000db632 <link_const_variable_data_end>:
	...

000db634 <link_constructors_location>:
   db634:	000d4619 	.word	0x000d4619
   db638:	000d4cf1 	.word	0x000d4cf1
   db63c:	000d4f69 	.word	0x000d4f69
   db640:	000d4ff9 	.word	0x000d4ff9
   db644:	000d50eb 	.word	0x000d50eb
   db648:	000d5389 	.word	0x000d5389
   db64c:	000d5795 	.word	0x000d5795
   db650:	000d593d 	.word	0x000d593d
   db654:	000d5ae5 	.word	0x000d5ae5
   db658:	000d6367 	.word	0x000d6367
   db65c:	000d636b 	.word	0x000d636b
   db660:	000d636f 	.word	0x000d636f
   db664:	000d6a89 	.word	0x000d6a89
   db668:	000d6a8d 	.word	0x000d6a8d
   db66c:	000d6a91 	.word	0x000d6a91
   db670:	000d6ac3 	.word	0x000d6ac3
   db674:	000d7289 	.word	0x000d7289
   db678:	000d72ad 	.word	0x000d72ad
   db67c:	000d72b1 	.word	0x000d72b1
   db680:	000d75d5 	.word	0x000d75d5
   db684:	000d75d9 	.word	0x000d75d9
   db688:	000d75dd 	.word	0x000d75dd
   db68c:	000d7b17 	.word	0x000d7b17
   db690:	000d7b1b 	.word	0x000d7b1b
   db694:	000d7b1f 	.word	0x000d7b1f
   db698:	000d7bc5 	.word	0x000d7bc5
   db69c:	000d824d 	.word	0x000d824d
   db6a0:	000d8251 	.word	0x000d8251
   db6a4:	000d89b5 	.word	0x000d89b5
   db6a8:	000d8c65 	.word	0x000d8c65
   db6ac:	000d8e2d 	.word	0x000d8e2d
   db6b0:	000d8f71 	.word	0x000d8f71
   db6b4:	000d8fed 	.word	0x000d8fed
   db6b8:	000d9015 	.word	0x000d9015
   db6bc:	000d9685 	.word	0x000d9685
   db6c0:	000d99fd 	.word	0x000d99fd
   db6c4:	000da111 	.word	0x000da111
   db6c8:	000da379 	.word	0x000da379
   db6cc:	000da3fd 	.word	0x000da3fd
   db6d0:	000da4c1 	.word	0x000da4c1
   db6d4:	000da585 	.word	0x000da585

000db6d8 <link_constructors_end>:
	...
