
c:/Users/Clarence.Alucho/Documents/git/igh/igh_shield/target/1.5.0/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001334  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5350  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e260  000d5354  0001e260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000524  2003e2cc  2003e2cc  0002e2cc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d53c0  000d53c0  000253c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d53e8  000d53e8  000253e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009d512  00000000  00000000  000253ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bbe2  00000000  00000000  000c28fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000178ac  00000000  00000000  000ce4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001cd8  00000000  00000000  000e5d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003998  00000000  00000000  000e7a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002db57  00000000  00000000  000eb3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001c6db  00000000  00000000  00118f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fe3de  00000000  00000000  0013562e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b600  00000000  00000000  00233a0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f000 ffc7 	bl	d4fc0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f000 ffcc 	bl	d4fd6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e260 	.word	0x2003e260
   d4048:	000d5354 	.word	0x000d5354
   d404c:	2003e2cc 	.word	0x2003e2cc
   d4050:	2003e2cc 	.word	0x2003e2cc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fb01 	bl	d4660 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5348 	.word	0x000d5348
   d4080:	000d5310 	.word	0x000d5310

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b813 	b.w	d40ae <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f81b 	bl	d40c4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 baa7 	b.w	d45e4 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 b981 	b.w	d439c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 b97f 	b.w	d439c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <setup>:
extern volatile uint8_t igh_msg_buffer_tracker;

SYSTEM_THREAD(ENABLED);

void setup() 
{
   d40ae:	b508      	push	{r3, lr}
  igh_message_init();
   d40b0:	f000 f826 	bl	d4100 <_Z16igh_message_initv>

  Serial.begin(115200);
   d40b4:	f000 fbd4 	bl	d4860 <_Z16_fetch_usbserialv>
   d40b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
}
   d40bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup() 
{
  igh_message_init();

  Serial.begin(115200);
   d40c0:	f000 bbc2 	b.w	d4848 <_ZN9USBSerial5beginEl>

000d40c4 <loop>:
}

void loop() 
{
   d40c4:	4770      	bx	lr

000d40c6 <_GLOBAL__sub_I_setup>:

}
   d40c6:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40c8:	f000 f82c 	bl	d4124 <HAL_Pin_Map>

extern char igh_msg_buffer[MESSAGE_SIZE];
extern uint8_t size_of_message_id;
extern volatile uint8_t igh_msg_buffer_tracker;

SYSTEM_THREAD(ENABLED);
   d40cc:	2100      	movs	r1, #0
   d40ce:	2001      	movs	r0, #1
}

void loop() 
{

}
   d40d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

extern char igh_msg_buffer[MESSAGE_SIZE];
extern uint8_t size_of_message_id;
extern volatile uint8_t igh_msg_buffer_tracker;

SYSTEM_THREAD(ENABLED);
   d40d4:	f000 b8e6 	b.w	d42a4 <system_thread_set_state>

000d40d8 <_Z24igh_message_clear_bufferv>:
    }
}

void igh_message_clear_buffer(void)
{
    igh_msg_buffer[0] = msg_padding;
   d40d8:	4a07      	ldr	r2, [pc, #28]	; (d40f8 <_Z24igh_message_clear_bufferv+0x20>)
   d40da:	4613      	mov	r3, r2
   d40dc:	21fe      	movs	r1, #254	; 0xfe
   d40de:	f803 1b01 	strb.w	r1, [r3], #1
   d40e2:	440a      	add	r2, r1
    for(uint8_t i = 2; i < MESSAGE_SIZE; i++)
    {
        igh_msg_buffer[i] = '\0'; // null the buffer
   d40e4:	2100      	movs	r1, #0
   d40e6:	f803 1f01 	strb.w	r1, [r3, #1]!
}

void igh_message_clear_buffer(void)
{
    igh_msg_buffer[0] = msg_padding;
    for(uint8_t i = 2; i < MESSAGE_SIZE; i++)
   d40ea:	4293      	cmp	r3, r2
   d40ec:	d1fb      	bne.n	d40e6 <_Z24igh_message_clear_bufferv+0xe>
    {
        igh_msg_buffer[i] = '\0'; // null the buffer
    }
    igh_msg_buffer_tracker = 2; // always reset  to point to location two of the buffer
   d40ee:	4b03      	ldr	r3, [pc, #12]	; (d40fc <_Z24igh_message_clear_bufferv+0x24>)
   d40f0:	2202      	movs	r2, #2
   d40f2:	701a      	strb	r2, [r3, #0]
   d40f4:	4770      	bx	lr
   d40f6:	bf00      	nop
   d40f8:	2003e2d0 	.word	0x2003e2d0
   d40fc:	2003e260 	.word	0x2003e260

000d4100 <_Z16igh_message_initv>:
void add_message_id(void);
void add_bytes(uint8_t bytes, uint8_t * _msg);

void igh_message_init(void)
{
    igh_message_clear_buffer();
   d4100:	f7ff bfea 	b.w	d40d8 <_Z24igh_message_clear_bufferv>

000d4104 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4104:	b508      	push	{r3, lr}
   d4106:	4b02      	ldr	r3, [pc, #8]	; (d4110 <netdb_freeaddrinfo+0xc>)
   d4108:	681b      	ldr	r3, [r3, #0]
   d410a:	689b      	ldr	r3, [r3, #8]
   d410c:	9301      	str	r3, [sp, #4]
   d410e:	bd08      	pop	{r3, pc}
   d4110:	00030268 	.word	0x00030268

000d4114 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4114:	b508      	push	{r3, lr}
   d4116:	4b02      	ldr	r3, [pc, #8]	; (d4120 <netdb_getaddrinfo+0xc>)
   d4118:	681b      	ldr	r3, [r3, #0]
   d411a:	68db      	ldr	r3, [r3, #12]
   d411c:	9301      	str	r3, [sp, #4]
   d411e:	bd08      	pop	{r3, pc}
   d4120:	00030268 	.word	0x00030268

000d4124 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4124:	b508      	push	{r3, lr}
   d4126:	4b02      	ldr	r3, [pc, #8]	; (d4130 <HAL_Pin_Map+0xc>)
   d4128:	681b      	ldr	r3, [r3, #0]
   d412a:	681b      	ldr	r3, [r3, #0]
   d412c:	9301      	str	r3, [sp, #4]
   d412e:	bd08      	pop	{r3, pc}
   d4130:	0003022c 	.word	0x0003022c

000d4134 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4134:	b508      	push	{r3, lr}
   d4136:	4b02      	ldr	r3, [pc, #8]	; (d4140 <HAL_RNG_GetRandomNumber+0xc>)
   d4138:	681b      	ldr	r3, [r3, #0]
   d413a:	685b      	ldr	r3, [r3, #4]
   d413c:	9301      	str	r3, [sp, #4]
   d413e:	bd08      	pop	{r3, pc}
   d4140:	00030218 	.word	0x00030218

000d4144 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4144:	b508      	push	{r3, lr}
   d4146:	4b02      	ldr	r3, [pc, #8]	; (d4150 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4148:	681b      	ldr	r3, [r3, #0]
   d414a:	695b      	ldr	r3, [r3, #20]
   d414c:	9301      	str	r3, [sp, #4]
   d414e:	bd08      	pop	{r3, pc}
   d4150:	00030218 	.word	0x00030218

000d4154 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4154:	b508      	push	{r3, lr}
   d4156:	4b02      	ldr	r3, [pc, #8]	; (d4160 <os_thread_is_current+0xc>)
   d4158:	681b      	ldr	r3, [r3, #0]
   d415a:	689b      	ldr	r3, [r3, #8]
   d415c:	9301      	str	r3, [sp, #4]
   d415e:	bd08      	pop	{r3, pc}
   d4160:	00030248 	.word	0x00030248

000d4164 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4164:	b508      	push	{r3, lr}
   d4166:	4b02      	ldr	r3, [pc, #8]	; (d4170 <os_thread_join+0xc>)
   d4168:	681b      	ldr	r3, [r3, #0]
   d416a:	691b      	ldr	r3, [r3, #16]
   d416c:	9301      	str	r3, [sp, #4]
   d416e:	bd08      	pop	{r3, pc}
   d4170:	00030248 	.word	0x00030248

000d4174 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4174:	b508      	push	{r3, lr}
   d4176:	4b02      	ldr	r3, [pc, #8]	; (d4180 <os_thread_cleanup+0xc>)
   d4178:	681b      	ldr	r3, [r3, #0]
   d417a:	695b      	ldr	r3, [r3, #20]
   d417c:	9301      	str	r3, [sp, #4]
   d417e:	bd08      	pop	{r3, pc}
   d4180:	00030248 	.word	0x00030248

000d4184 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4184:	b508      	push	{r3, lr}
   d4186:	4b02      	ldr	r3, [pc, #8]	; (d4190 <os_mutex_recursive_create+0xc>)
   d4188:	681b      	ldr	r3, [r3, #0]
   d418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d418c:	9301      	str	r3, [sp, #4]
   d418e:	bd08      	pop	{r3, pc}
   d4190:	00030248 	.word	0x00030248

000d4194 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4194:	b508      	push	{r3, lr}
   d4196:	4b02      	ldr	r3, [pc, #8]	; (d41a0 <os_mutex_recursive_destroy+0xc>)
   d4198:	681b      	ldr	r3, [r3, #0]
   d419a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d419c:	9301      	str	r3, [sp, #4]
   d419e:	bd08      	pop	{r3, pc}
   d41a0:	00030248 	.word	0x00030248

000d41a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d41a4:	b508      	push	{r3, lr}
   d41a6:	4b02      	ldr	r3, [pc, #8]	; (d41b0 <inet_inet_ntop+0xc>)
   d41a8:	681b      	ldr	r3, [r3, #0]
   d41aa:	695b      	ldr	r3, [r3, #20]
   d41ac:	9301      	str	r3, [sp, #4]
   d41ae:	bd08      	pop	{r3, pc}
   d41b0:	00030264 	.word	0x00030264

000d41b4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d41b4:	b508      	push	{r3, lr}
   d41b6:	4b02      	ldr	r3, [pc, #8]	; (d41c0 <HAL_USART_Init+0xc>)
   d41b8:	681b      	ldr	r3, [r3, #0]
   d41ba:	681b      	ldr	r3, [r3, #0]
   d41bc:	9301      	str	r3, [sp, #4]
   d41be:	bd08      	pop	{r3, pc}
   d41c0:	0003023c 	.word	0x0003023c

000d41c4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d41c4:	b508      	push	{r3, lr}
   d41c6:	4b02      	ldr	r3, [pc, #8]	; (d41d0 <HAL_USART_Write_Data+0xc>)
   d41c8:	681b      	ldr	r3, [r3, #0]
   d41ca:	68db      	ldr	r3, [r3, #12]
   d41cc:	9301      	str	r3, [sp, #4]
   d41ce:	bd08      	pop	{r3, pc}
   d41d0:	0003023c 	.word	0x0003023c

000d41d4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d41d4:	b508      	push	{r3, lr}
   d41d6:	4b02      	ldr	r3, [pc, #8]	; (d41e0 <HAL_USART_Available_Data+0xc>)
   d41d8:	681b      	ldr	r3, [r3, #0]
   d41da:	691b      	ldr	r3, [r3, #16]
   d41dc:	9301      	str	r3, [sp, #4]
   d41de:	bd08      	pop	{r3, pc}
   d41e0:	0003023c 	.word	0x0003023c

000d41e4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d41e4:	b508      	push	{r3, lr}
   d41e6:	4b02      	ldr	r3, [pc, #8]	; (d41f0 <HAL_USART_Read_Data+0xc>)
   d41e8:	681b      	ldr	r3, [r3, #0]
   d41ea:	695b      	ldr	r3, [r3, #20]
   d41ec:	9301      	str	r3, [sp, #4]
   d41ee:	bd08      	pop	{r3, pc}
   d41f0:	0003023c 	.word	0x0003023c

000d41f4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d41f4:	b508      	push	{r3, lr}
   d41f6:	4b02      	ldr	r3, [pc, #8]	; (d4200 <HAL_USART_Peek_Data+0xc>)
   d41f8:	681b      	ldr	r3, [r3, #0]
   d41fa:	699b      	ldr	r3, [r3, #24]
   d41fc:	9301      	str	r3, [sp, #4]
   d41fe:	bd08      	pop	{r3, pc}
   d4200:	0003023c 	.word	0x0003023c

000d4204 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4204:	b508      	push	{r3, lr}
   d4206:	4b02      	ldr	r3, [pc, #8]	; (d4210 <HAL_USART_Flush_Data+0xc>)
   d4208:	681b      	ldr	r3, [r3, #0]
   d420a:	69db      	ldr	r3, [r3, #28]
   d420c:	9301      	str	r3, [sp, #4]
   d420e:	bd08      	pop	{r3, pc}
   d4210:	0003023c 	.word	0x0003023c

000d4214 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4214:	b508      	push	{r3, lr}
   d4216:	4b02      	ldr	r3, [pc, #8]	; (d4220 <HAL_USART_Available_Data_For_Write+0xc>)
   d4218:	681b      	ldr	r3, [r3, #0]
   d421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d421c:	9301      	str	r3, [sp, #4]
   d421e:	bd08      	pop	{r3, pc}
   d4220:	0003023c 	.word	0x0003023c

000d4224 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4224:	b508      	push	{r3, lr}
   d4226:	4b02      	ldr	r3, [pc, #8]	; (d4230 <HAL_USB_USART_Init+0xc>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	681b      	ldr	r3, [r3, #0]
   d422c:	9301      	str	r3, [sp, #4]
   d422e:	bd08      	pop	{r3, pc}
   d4230:	0003024c 	.word	0x0003024c

000d4234 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4234:	b508      	push	{r3, lr}
   d4236:	4b02      	ldr	r3, [pc, #8]	; (d4240 <HAL_USB_USART_Begin+0xc>)
   d4238:	681b      	ldr	r3, [r3, #0]
   d423a:	685b      	ldr	r3, [r3, #4]
   d423c:	9301      	str	r3, [sp, #4]
   d423e:	bd08      	pop	{r3, pc}
   d4240:	0003024c 	.word	0x0003024c

000d4244 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4244:	b508      	push	{r3, lr}
   d4246:	4b02      	ldr	r3, [pc, #8]	; (d4250 <HAL_USB_USART_Available_Data+0xc>)
   d4248:	681b      	ldr	r3, [r3, #0]
   d424a:	691b      	ldr	r3, [r3, #16]
   d424c:	9301      	str	r3, [sp, #4]
   d424e:	bd08      	pop	{r3, pc}
   d4250:	0003024c 	.word	0x0003024c

000d4254 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4254:	b508      	push	{r3, lr}
   d4256:	4b02      	ldr	r3, [pc, #8]	; (d4260 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4258:	681b      	ldr	r3, [r3, #0]
   d425a:	695b      	ldr	r3, [r3, #20]
   d425c:	9301      	str	r3, [sp, #4]
   d425e:	bd08      	pop	{r3, pc}
   d4260:	0003024c 	.word	0x0003024c

000d4264 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4264:	b508      	push	{r3, lr}
   d4266:	4b02      	ldr	r3, [pc, #8]	; (d4270 <HAL_USB_USART_Receive_Data+0xc>)
   d4268:	681b      	ldr	r3, [r3, #0]
   d426a:	699b      	ldr	r3, [r3, #24]
   d426c:	9301      	str	r3, [sp, #4]
   d426e:	bd08      	pop	{r3, pc}
   d4270:	0003024c 	.word	0x0003024c

000d4274 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4274:	b508      	push	{r3, lr}
   d4276:	4b02      	ldr	r3, [pc, #8]	; (d4280 <HAL_USB_USART_Send_Data+0xc>)
   d4278:	681b      	ldr	r3, [r3, #0]
   d427a:	69db      	ldr	r3, [r3, #28]
   d427c:	9301      	str	r3, [sp, #4]
   d427e:	bd08      	pop	{r3, pc}
   d4280:	0003024c 	.word	0x0003024c

000d4284 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <HAL_USB_USART_Flush_Data+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	6a1b      	ldr	r3, [r3, #32]
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	0003024c 	.word	0x0003024c

000d4294 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <set_system_mode+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	685b      	ldr	r3, [r3, #4]
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	00030220 	.word	0x00030220

000d42a4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <system_thread_set_state+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	00030220 	.word	0x00030220

000d42b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b03      	ldr	r3, [pc, #12]	; (d42c4 <system_ctrl_set_app_request_handler+0x10>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d42be:	9301      	str	r3, [sp, #4]
   d42c0:	bd08      	pop	{r3, pc}
   d42c2:	0000      	.short	0x0000
   d42c4:	00030220 	.word	0x00030220

000d42c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b03      	ldr	r3, [pc, #12]	; (d42d8 <system_ctrl_set_result+0x10>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d42d2:	9301      	str	r3, [sp, #4]
   d42d4:	bd08      	pop	{r3, pc}
   d42d6:	0000      	.short	0x0000
   d42d8:	00030220 	.word	0x00030220

000d42dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <network_connect+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	685b      	ldr	r3, [r3, #4]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	00030240 	.word	0x00030240

000d42ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <network_connecting+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	689b      	ldr	r3, [r3, #8]
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	00030240 	.word	0x00030240

000d42fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <network_disconnect+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	68db      	ldr	r3, [r3, #12]
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	00030240 	.word	0x00030240

000d430c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <network_ready+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	691b      	ldr	r3, [r3, #16]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	00030240 	.word	0x00030240

000d431c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <network_on+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	695b      	ldr	r3, [r3, #20]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	00030240 	.word	0x00030240

000d432c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <network_off+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	699b      	ldr	r3, [r3, #24]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	00030240 	.word	0x00030240

000d433c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <network_listen+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	69db      	ldr	r3, [r3, #28]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	00030240 	.word	0x00030240

000d434c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <network_listening+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	6a1b      	ldr	r3, [r3, #32]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	00030240 	.word	0x00030240

000d435c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <network_set_listen_timeout+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	00030240 	.word	0x00030240

000d436c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <network_get_listen_timeout+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	00030240 	.word	0x00030240

000d437c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	00030244 	.word	0x00030244

000d438c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <malloc+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	681b      	ldr	r3, [r3, #0]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	0003021c 	.word	0x0003021c

000d439c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <free+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	685b      	ldr	r3, [r3, #4]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	0003021c 	.word	0x0003021c

000d43ac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d43ac:	2200      	movs	r2, #0
   d43ae:	4611      	mov	r1, r2
   d43b0:	6840      	ldr	r0, [r0, #4]
   d43b2:	f7ff bfcb 	b.w	d434c <network_listening>

000d43b6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d43b6:	2200      	movs	r2, #0
   d43b8:	4611      	mov	r1, r2
   d43ba:	6840      	ldr	r0, [r0, #4]
   d43bc:	f7ff bfd6 	b.w	d436c <network_get_listen_timeout>

000d43c0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d43c0:	2200      	movs	r2, #0
   d43c2:	6840      	ldr	r0, [r0, #4]
   d43c4:	f7ff bfca 	b.w	d435c <network_set_listen_timeout>

000d43c8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d43c8:	2200      	movs	r2, #0
   d43ca:	f081 0101 	eor.w	r1, r1, #1
   d43ce:	6840      	ldr	r0, [r0, #4]
   d43d0:	f7ff bfb4 	b.w	d433c <network_listen>

000d43d4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d43d4:	2300      	movs	r3, #0
   d43d6:	461a      	mov	r2, r3
   d43d8:	4619      	mov	r1, r3
   d43da:	6840      	ldr	r0, [r0, #4]
   d43dc:	f7ff bfa6 	b.w	d432c <network_off>

000d43e0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d43e0:	2300      	movs	r3, #0
   d43e2:	461a      	mov	r2, r3
   d43e4:	4619      	mov	r1, r3
   d43e6:	6840      	ldr	r0, [r0, #4]
   d43e8:	f7ff bf98 	b.w	d431c <network_on>

000d43ec <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d43ec:	2200      	movs	r2, #0
   d43ee:	4611      	mov	r1, r2
   d43f0:	6840      	ldr	r0, [r0, #4]
   d43f2:	f7ff bf8b 	b.w	d430c <network_ready>

000d43f6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d43f6:	2200      	movs	r2, #0
   d43f8:	4611      	mov	r1, r2
   d43fa:	6840      	ldr	r0, [r0, #4]
   d43fc:	f7ff bf76 	b.w	d42ec <network_connecting>

000d4400 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4400:	2200      	movs	r2, #0
   d4402:	2102      	movs	r1, #2
   d4404:	6840      	ldr	r0, [r0, #4]
   d4406:	f7ff bf79 	b.w	d42fc <network_disconnect>

000d440a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d440a:	2300      	movs	r3, #0
   d440c:	461a      	mov	r2, r3
   d440e:	6840      	ldr	r0, [r0, #4]
   d4410:	f7ff bf64 	b.w	d42dc <network_connect>

000d4414 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4414:	4b02      	ldr	r3, [pc, #8]	; (d4420 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4416:	2203      	movs	r2, #3
   d4418:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d441a:	4a02      	ldr	r2, [pc, #8]	; (d4424 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d441c:	601a      	str	r2, [r3, #0]
   d441e:	4770      	bx	lr
   d4420:	2003e3d0 	.word	0x2003e3d0
   d4424:	000d5064 	.word	0x000d5064

000d4428 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4428:	b510      	push	{r4, lr}
   d442a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d442c:	6800      	ldr	r0, [r0, #0]
   d442e:	b118      	cbz	r0, d4438 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4430:	f7ff ffb4 	bl	d439c <free>
            wakeupSource_ = nullptr;
   d4434:	2300      	movs	r3, #0
   d4436:	6023      	str	r3, [r4, #0]
   d4438:	bd10      	pop	{r4, pc}

000d443a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d443a:	b510      	push	{r4, lr}
   d443c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d443e:	f7ff fff3 	bl	d4428 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4442:	4620      	mov	r0, r4
   d4444:	bd10      	pop	{r4, pc}
	...

000d4448 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4448:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d444a:	4c09      	ldr	r4, [pc, #36]	; (d4470 <_GLOBAL__sub_I_System+0x28>)
   d444c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d444e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4452:	6020      	str	r0, [r4, #0]
   d4454:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4456:	71a0      	strb	r0, [r4, #6]
   d4458:	8120      	strh	r0, [r4, #8]
   d445a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d445c:	f7ff ff1a 	bl	d4294 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4460:	4620      	mov	r0, r4
   d4462:	4a04      	ldr	r2, [pc, #16]	; (d4474 <_GLOBAL__sub_I_System+0x2c>)
   d4464:	4904      	ldr	r1, [pc, #16]	; (d4478 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d446a:	f000 bc4b 	b.w	d4d04 <__aeabi_atexit>
   d446e:	bf00      	nop
   d4470:	2003e3d8 	.word	0x2003e3d8
   d4474:	2003e2cc 	.word	0x2003e2cc
   d4478:	000d443b 	.word	0x000d443b

000d447c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d447c:	b510      	push	{r4, lr}
   d447e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4480:	6800      	ldr	r0, [r0, #0]
   d4482:	b108      	cbz	r0, d4488 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4484:	f7ff fe86 	bl	d4194 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4488:	4620      	mov	r0, r4
   d448a:	bd10      	pop	{r4, pc}

000d448c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d448c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d448e:	4c06      	ldr	r4, [pc, #24]	; (d44a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4490:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4492:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4494:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4496:	f7ff fe75 	bl	d4184 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d449a:	4620      	mov	r0, r4
   d449c:	4a03      	ldr	r2, [pc, #12]	; (d44ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d449e:	4904      	ldr	r1, [pc, #16]	; (d44b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d44a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d44a4:	f000 bc2e 	b.w	d4d04 <__aeabi_atexit>
   d44a8:	2003e3e4 	.word	0x2003e3e4
   d44ac:	2003e2cc 	.word	0x2003e2cc
   d44b0:	000d447d 	.word	0x000d447d

000d44b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d44b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44b6:	4606      	mov	r6, r0
   d44b8:	460d      	mov	r5, r1
   d44ba:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d44bc:	2400      	movs	r4, #0
  while (size--) {
   d44be:	42bd      	cmp	r5, r7
   d44c0:	d00c      	beq.n	d44dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d44c2:	6833      	ldr	r3, [r6, #0]
   d44c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d44c8:	689b      	ldr	r3, [r3, #8]
   d44ca:	4630      	mov	r0, r6
   d44cc:	4798      	blx	r3
     if (chunk>=0)
   d44ce:	2800      	cmp	r0, #0
   d44d0:	db01      	blt.n	d44d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d44d2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d44d4:	e7f3      	b.n	d44be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d44d6:	2c00      	cmp	r4, #0
   d44d8:	bf08      	it	eq
   d44da:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d44dc:	4620      	mov	r0, r4
   d44de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d44e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d44e0:	b570      	push	{r4, r5, r6, lr}
   d44e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d44e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d44e6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d44e8:	b149      	cbz	r1, d44fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d44ea:	f000 fda5 	bl	d5038 <strlen>
   d44ee:	682b      	ldr	r3, [r5, #0]
   d44f0:	4602      	mov	r2, r0
   d44f2:	4621      	mov	r1, r4
   d44f4:	4628      	mov	r0, r5
   d44f6:	68db      	ldr	r3, [r3, #12]
    }
   d44f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d44fc:	4718      	bx	r3
    }
   d44fe:	bd70      	pop	{r4, r5, r6, pc}

000d4500 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4500:	6803      	ldr	r3, [r0, #0]
   d4502:	689b      	ldr	r3, [r3, #8]
   d4504:	4718      	bx	r3

000d4506 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4506:	b530      	push	{r4, r5, lr}
   d4508:	b08b      	sub	sp, #44	; 0x2c
   d450a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d450c:	2100      	movs	r1, #0
   d450e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4512:	2a01      	cmp	r2, #1
   d4514:	bf98      	it	ls
   d4516:	220a      	movls	r2, #10
   d4518:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d451c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4520:	fb05 3312 	mls	r3, r5, r2, r3
   d4524:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4528:	2b09      	cmp	r3, #9
   d452a:	bf94      	ite	ls
   d452c:	3330      	addls	r3, #48	; 0x30
   d452e:	3337      	addhi	r3, #55	; 0x37
   d4530:	b2db      	uxtb	r3, r3
   d4532:	4621      	mov	r1, r4
   d4534:	f804 3901 	strb.w	r3, [r4], #-1
   d4538:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d453a:	2d00      	cmp	r5, #0
   d453c:	d1ee      	bne.n	d451c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d453e:	f7ff ffcf 	bl	d44e0 <_ZN5Print5writeEPKc>
}
   d4542:	b00b      	add	sp, #44	; 0x2c
   d4544:	bd30      	pop	{r4, r5, pc}
	...

000d4548 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4548:	4b01      	ldr	r3, [pc, #4]	; (d4550 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d454a:	4a02      	ldr	r2, [pc, #8]	; (d4554 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d454c:	601a      	str	r2, [r3, #0]
   d454e:	4770      	bx	lr
   d4550:	2003e3e8 	.word	0x2003e3e8
   d4554:	000d5103 	.word	0x000d5103

000d4558 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4558:	4b02      	ldr	r3, [pc, #8]	; (d4564 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d455a:	681a      	ldr	r2, [r3, #0]
   d455c:	4b02      	ldr	r3, [pc, #8]	; (d4568 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d455e:	601a      	str	r2, [r3, #0]
   d4560:	4770      	bx	lr
   d4562:	bf00      	nop
   d4564:	2003e264 	.word	0x2003e264
   d4568:	2003e3ec 	.word	0x2003e3ec

000d456c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d456c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d456e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4570:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4572:	b113      	cbz	r3, d457a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4574:	2203      	movs	r2, #3
   d4576:	4601      	mov	r1, r0
   d4578:	4798      	blx	r3
    }
   d457a:	4620      	mov	r0, r4
   d457c:	bd10      	pop	{r4, pc}

000d457e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d457e:	b510      	push	{r4, lr}
   d4580:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4582:	f7ff fff3 	bl	d456c <_ZNSt14_Function_baseD1Ev>
   d4586:	4620      	mov	r0, r4
   d4588:	bd10      	pop	{r4, pc}
	...

000d458c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d458c:	4803      	ldr	r0, [pc, #12]	; (d459c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d458e:	4a04      	ldr	r2, [pc, #16]	; (d45a0 <_GLOBAL__sub_I_RGB+0x14>)
   d4590:	4904      	ldr	r1, [pc, #16]	; (d45a4 <_GLOBAL__sub_I_RGB+0x18>)
   d4592:	2300      	movs	r3, #0
   d4594:	6083      	str	r3, [r0, #8]
   d4596:	f000 bbb5 	b.w	d4d04 <__aeabi_atexit>
   d459a:	bf00      	nop
   d459c:	2003e3f0 	.word	0x2003e3f0
   d45a0:	2003e2cc 	.word	0x2003e2cc
   d45a4:	000d457f 	.word	0x000d457f

000d45a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d45a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d45aa:	4b0c      	ldr	r3, [pc, #48]	; (d45dc <serialEventRun+0x34>)
   d45ac:	b133      	cbz	r3, d45bc <serialEventRun+0x14>
   d45ae:	f000 f957 	bl	d4860 <_Z16_fetch_usbserialv>
   d45b2:	6803      	ldr	r3, [r0, #0]
   d45b4:	691b      	ldr	r3, [r3, #16]
   d45b6:	4798      	blx	r3
   d45b8:	2800      	cmp	r0, #0
   d45ba:	dc09      	bgt.n	d45d0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d45bc:	4b08      	ldr	r3, [pc, #32]	; (d45e0 <serialEventRun+0x38>)
   d45be:	b163      	cbz	r3, d45da <serialEventRun+0x32>
   d45c0:	f000 fa18 	bl	d49f4 <_Z22__fetch_global_Serial1v>
   d45c4:	6803      	ldr	r3, [r0, #0]
   d45c6:	691b      	ldr	r3, [r3, #16]
   d45c8:	4798      	blx	r3
   d45ca:	2800      	cmp	r0, #0
   d45cc:	dc03      	bgt.n	d45d6 <serialEventRun+0x2e>
   d45ce:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d45d0:	f3af 8000 	nop.w
   d45d4:	e7f2      	b.n	d45bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d45d6:	f3af 8000 	nop.w
   d45da:	bd08      	pop	{r3, pc}
	...

000d45e4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d45e4:	b508      	push	{r3, lr}
	serialEventRun();
   d45e6:	f7ff ffdf 	bl	d45a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d45ea:	f7ff fdab 	bl	d4144 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d45ee:	4b01      	ldr	r3, [pc, #4]	; (d45f4 <_post_loop+0x10>)
   d45f0:	6018      	str	r0, [r3, #0]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	2003e74c 	.word	0x2003e74c

000d45f8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d45f8:	4802      	ldr	r0, [pc, #8]	; (d4604 <_Z33system_initialize_user_backup_ramv+0xc>)
   d45fa:	4a03      	ldr	r2, [pc, #12]	; (d4608 <_Z33system_initialize_user_backup_ramv+0x10>)
   d45fc:	4903      	ldr	r1, [pc, #12]	; (d460c <_Z33system_initialize_user_backup_ramv+0x14>)
   d45fe:	1a12      	subs	r2, r2, r0
   d4600:	f000 bcde 	b.w	d4fc0 <memcpy>
   d4604:	2003f400 	.word	0x2003f400
   d4608:	2003f404 	.word	0x2003f404
   d460c:	000d5350 	.word	0x000d5350

000d4610 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4610:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4612:	2300      	movs	r3, #0
   d4614:	9300      	str	r3, [sp, #0]
   d4616:	461a      	mov	r2, r3
   d4618:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d461c:	f7ff fe54 	bl	d42c8 <system_ctrl_set_result>
}
   d4620:	b003      	add	sp, #12
   d4622:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4628 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4628:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d462a:	8843      	ldrh	r3, [r0, #2]
   d462c:	2b0a      	cmp	r3, #10
   d462e:	d008      	beq.n	d4642 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4630:	2b50      	cmp	r3, #80	; 0x50
   d4632:	d109      	bne.n	d4648 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4634:	4b09      	ldr	r3, [pc, #36]	; (d465c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4636:	681b      	ldr	r3, [r3, #0]
   d4638:	b13b      	cbz	r3, d464a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d463a:	b003      	add	sp, #12
   d463c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4640:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4642:	f7ff ffe5 	bl	d4610 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4646:	e006      	b.n	d4656 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4648:	2300      	movs	r3, #0
   d464a:	9300      	str	r3, [sp, #0]
   d464c:	461a      	mov	r2, r3
   d464e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4652:	f7ff fe39 	bl	d42c8 <system_ctrl_set_result>
        break;
    }
}
   d4656:	b003      	add	sp, #12
   d4658:	f85d fb04 	ldr.w	pc, [sp], #4
   d465c:	2003e400 	.word	0x2003e400

000d4660 <module_user_init_hook>:

void module_user_init_hook()
{
   d4660:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4662:	4c10      	ldr	r4, [pc, #64]	; (d46a4 <module_user_init_hook+0x44>)
   d4664:	4d10      	ldr	r5, [pc, #64]	; (d46a8 <module_user_init_hook+0x48>)
   d4666:	6823      	ldr	r3, [r4, #0]
   d4668:	42ab      	cmp	r3, r5
   d466a:	4b10      	ldr	r3, [pc, #64]	; (d46ac <module_user_init_hook+0x4c>)
   d466c:	bf0c      	ite	eq
   d466e:	2201      	moveq	r2, #1
   d4670:	2200      	movne	r2, #0
   d4672:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4674:	d002      	beq.n	d467c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4676:	f7ff ffbf 	bl	d45f8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d467a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d467c:	f7ff fd5a 	bl	d4134 <HAL_RNG_GetRandomNumber>
   d4680:	4604      	mov	r4, r0
    srand(seed);
   d4682:	f000 fcb1 	bl	d4fe8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4686:	4b0a      	ldr	r3, [pc, #40]	; (d46b0 <module_user_init_hook+0x50>)
   d4688:	b113      	cbz	r3, d4690 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d468a:	4620      	mov	r0, r4
   d468c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4690:	2100      	movs	r1, #0
   d4692:	4807      	ldr	r0, [pc, #28]	; (d46b0 <module_user_init_hook+0x50>)
   d4694:	f7ff fe72 	bl	d437c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4698:	2100      	movs	r1, #0
   d469a:	4806      	ldr	r0, [pc, #24]	; (d46b4 <module_user_init_hook+0x54>)
}
   d469c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d46a0:	f7ff be08 	b.w	d42b4 <system_ctrl_set_app_request_handler>
   d46a4:	2003f400 	.word	0x2003f400
   d46a8:	9a271c1e 	.word	0x9a271c1e
   d46ac:	2003e404 	.word	0x2003e404
   d46b0:	00000000 	.word	0x00000000
   d46b4:	000d4629 	.word	0x000d4629

000d46b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d46b8:	4770      	bx	lr

000d46ba <_ZN9IPAddressD0Ev>:
   d46ba:	b510      	push	{r4, lr}
   d46bc:	2118      	movs	r1, #24
   d46be:	4604      	mov	r4, r0
   d46c0:	f000 fb25 	bl	d4d0e <_ZdlPvj>
   d46c4:	4620      	mov	r0, r4
   d46c6:	bd10      	pop	{r4, pc}

000d46c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d46ca:	7d03      	ldrb	r3, [r0, #20]
   d46cc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d46ce:	b08d      	sub	sp, #52	; 0x34
   d46d0:	460e      	mov	r6, r1
   d46d2:	f100 0704 	add.w	r7, r0, #4
   d46d6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d46da:	d002      	beq.n	d46e2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d46dc:	f100 0508 	add.w	r5, r0, #8
   d46e0:	e018      	b.n	d4714 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46e2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46e4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46e6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46ea:	232f      	movs	r3, #47	; 0x2f
   d46ec:	462a      	mov	r2, r5
   d46ee:	200a      	movs	r0, #10
   d46f0:	f7ff fd58 	bl	d41a4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d46f4:	4628      	mov	r0, r5
   d46f6:	f000 fc9f 	bl	d5038 <strlen>
   d46fa:	6833      	ldr	r3, [r6, #0]
   d46fc:	4602      	mov	r2, r0
   d46fe:	68db      	ldr	r3, [r3, #12]
   d4700:	4629      	mov	r1, r5
   d4702:	4630      	mov	r0, r6
   d4704:	4798      	blx	r3
   d4706:	e00f      	b.n	d4728 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4708:	b124      	cbz	r4, d4714 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d470a:	212e      	movs	r1, #46	; 0x2e
   d470c:	4630      	mov	r0, r6
   d470e:	f7ff fef7 	bl	d4500 <_ZN5Print5printEc>
   d4712:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4714:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4718:	220a      	movs	r2, #10
   d471a:	4630      	mov	r0, r6
   d471c:	f7ff fef3 	bl	d4506 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4720:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4722:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4724:	d1f0      	bne.n	d4708 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4726:	4620      	mov	r0, r4
    }
    return n;
}
   d4728:	b00d      	add	sp, #52	; 0x34
   d472a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d472c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d472c:	b510      	push	{r4, lr}
   d472e:	4b05      	ldr	r3, [pc, #20]	; (d4744 <_ZN9IPAddressC1Ev+0x18>)
   d4730:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4732:	2211      	movs	r2, #17
   d4734:	f840 3b04 	str.w	r3, [r0], #4
   d4738:	2100      	movs	r1, #0
   d473a:	f000 fc4c 	bl	d4fd6 <memset>
{
    clear();
}
   d473e:	4620      	mov	r0, r4
   d4740:	bd10      	pop	{r4, pc}
   d4742:	bf00      	nop
   d4744:	000d51a4 	.word	0x000d51a4

000d4748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4748:	4603      	mov	r3, r0
   d474a:	4a07      	ldr	r2, [pc, #28]	; (d4768 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d474c:	b510      	push	{r4, lr}
   d474e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4752:	f101 0210 	add.w	r2, r1, #16
   d4756:	f851 4b04 	ldr.w	r4, [r1], #4
   d475a:	f843 4b04 	str.w	r4, [r3], #4
   d475e:	4291      	cmp	r1, r2
   d4760:	d1f9      	bne.n	d4756 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4762:	780a      	ldrb	r2, [r1, #0]
   d4764:	701a      	strb	r2, [r3, #0]
}
   d4766:	bd10      	pop	{r4, pc}
   d4768:	000d51a4 	.word	0x000d51a4

000d476c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d476c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d476e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4772:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4776:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d477a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d477e:	2304      	movs	r3, #4
   d4780:	6041      	str	r1, [r0, #4]
   d4782:	7503      	strb	r3, [r0, #20]
   d4784:	bd10      	pop	{r4, pc}

000d4786 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4786:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4788:	780d      	ldrb	r5, [r1, #0]
   d478a:	788b      	ldrb	r3, [r1, #2]
   d478c:	784a      	ldrb	r2, [r1, #1]
   d478e:	78c9      	ldrb	r1, [r1, #3]
   d4790:	9100      	str	r1, [sp, #0]
   d4792:	4629      	mov	r1, r5
   d4794:	f7ff ffea 	bl	d476c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4798:	b003      	add	sp, #12
   d479a:	bd30      	pop	{r4, r5, pc}

000d479c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d479c:	7441      	strb	r1, [r0, #17]
   d479e:	4770      	bx	lr

000d47a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d47a0:	4770      	bx	lr

000d47a2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d47a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d47a4:	2100      	movs	r1, #0
   d47a6:	7c00      	ldrb	r0, [r0, #16]
   d47a8:	f7ff fd5c 	bl	d4264 <HAL_USB_USART_Receive_Data>
}
   d47ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d47b0:	bf28      	it	cs
   d47b2:	f04f 30ff 	movcs.w	r0, #4294967295
   d47b6:	bd08      	pop	{r3, pc}

000d47b8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d47b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d47ba:	2101      	movs	r1, #1
   d47bc:	7c00      	ldrb	r0, [r0, #16]
   d47be:	f7ff fd51 	bl	d4264 <HAL_USB_USART_Receive_Data>
}
   d47c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d47c6:	bf28      	it	cs
   d47c8:	f04f 30ff 	movcs.w	r0, #4294967295
   d47cc:	bd08      	pop	{r3, pc}

000d47ce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d47ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d47d0:	7c00      	ldrb	r0, [r0, #16]
   d47d2:	f7ff fd3f 	bl	d4254 <HAL_USB_USART_Available_Data_For_Write>
}
   d47d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d47da:	bd08      	pop	{r3, pc}

000d47dc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d47dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d47de:	7c00      	ldrb	r0, [r0, #16]
   d47e0:	f7ff fd30 	bl	d4244 <HAL_USB_USART_Available_Data>
}
   d47e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d47e8:	bd08      	pop	{r3, pc}

000d47ea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d47ea:	7c00      	ldrb	r0, [r0, #16]
   d47ec:	f7ff bd4a 	b.w	d4284 <HAL_USB_USART_Flush_Data>

000d47f0 <_ZN9USBSerialD0Ev>:
   d47f0:	b510      	push	{r4, lr}
   d47f2:	2114      	movs	r1, #20
   d47f4:	4604      	mov	r4, r0
   d47f6:	f000 fa8a 	bl	d4d0e <_ZdlPvj>
   d47fa:	4620      	mov	r0, r4
   d47fc:	bd10      	pop	{r4, pc}

000d47fe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d47fe:	b538      	push	{r3, r4, r5, lr}
   d4800:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4802:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4804:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4806:	f7ff fd25 	bl	d4254 <HAL_USB_USART_Available_Data_For_Write>
   d480a:	2800      	cmp	r0, #0
   d480c:	dc01      	bgt.n	d4812 <_ZN9USBSerial5writeEh+0x14>
   d480e:	7c60      	ldrb	r0, [r4, #17]
   d4810:	b128      	cbz	r0, d481e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4812:	4629      	mov	r1, r5
   d4814:	7c20      	ldrb	r0, [r4, #16]
   d4816:	f7ff fd2d 	bl	d4274 <HAL_USB_USART_Send_Data>
   d481a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d481e:	bd38      	pop	{r3, r4, r5, pc}

000d4820 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4820:	b510      	push	{r4, lr}
   d4822:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4824:	2300      	movs	r3, #0
   d4826:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d482c:	60a3      	str	r3, [r4, #8]
   d482e:	4b05      	ldr	r3, [pc, #20]	; (d4844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4830:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4832:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4834:	4608      	mov	r0, r1
{
  _serial = serial;
   d4836:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4838:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d483a:	4611      	mov	r1, r2
   d483c:	f7ff fcf2 	bl	d4224 <HAL_USB_USART_Init>
}
   d4840:	4620      	mov	r0, r4
   d4842:	bd10      	pop	{r4, pc}
   d4844:	000d51b8 	.word	0x000d51b8

000d4848 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4848:	2200      	movs	r2, #0
   d484a:	7c00      	ldrb	r0, [r0, #16]
   d484c:	f7ff bcf2 	b.w	d4234 <HAL_USB_USART_Begin>

000d4850 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4850:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4852:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4854:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4856:	2100      	movs	r1, #0
   d4858:	f000 fbbd 	bl	d4fd6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d485c:	4620      	mov	r0, r4
   d485e:	bd10      	pop	{r4, pc}

000d4860 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4860:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4862:	4d0e      	ldr	r5, [pc, #56]	; (d489c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4864:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4866:	a801      	add	r0, sp, #4
   d4868:	f7ff fff2 	bl	d4850 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d486c:	6829      	ldr	r1, [r5, #0]
   d486e:	f011 0401 	ands.w	r4, r1, #1
   d4872:	d110      	bne.n	d4896 <_Z16_fetch_usbserialv+0x36>
   d4874:	4628      	mov	r0, r5
   d4876:	f7ff fc12 	bl	d409e <__cxa_guard_acquire>
   d487a:	b160      	cbz	r0, d4896 <_Z16_fetch_usbserialv+0x36>
   d487c:	aa01      	add	r2, sp, #4
   d487e:	4621      	mov	r1, r4
   d4880:	4807      	ldr	r0, [pc, #28]	; (d48a0 <_Z16_fetch_usbserialv+0x40>)
   d4882:	f7ff ffcd 	bl	d4820 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4886:	4628      	mov	r0, r5
   d4888:	f7ff fc0e 	bl	d40a8 <__cxa_guard_release>
   d488c:	4a05      	ldr	r2, [pc, #20]	; (d48a4 <_Z16_fetch_usbserialv+0x44>)
   d488e:	4906      	ldr	r1, [pc, #24]	; (d48a8 <_Z16_fetch_usbserialv+0x48>)
   d4890:	4803      	ldr	r0, [pc, #12]	; (d48a0 <_Z16_fetch_usbserialv+0x40>)
   d4892:	f000 fa37 	bl	d4d04 <__aeabi_atexit>
	return _usbserial;
}
   d4896:	4802      	ldr	r0, [pc, #8]	; (d48a0 <_Z16_fetch_usbserialv+0x40>)
   d4898:	b007      	add	sp, #28
   d489a:	bd30      	pop	{r4, r5, pc}
   d489c:	2003e408 	.word	0x2003e408
   d48a0:	2003e40c 	.word	0x2003e40c
   d48a4:	2003e2cc 	.word	0x2003e2cc
   d48a8:	000d47a1 	.word	0x000d47a1

000d48ac <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d48ac:	2200      	movs	r2, #0
   d48ae:	4611      	mov	r1, r2
   d48b0:	6840      	ldr	r0, [r0, #4]
   d48b2:	f7ff bd2b 	b.w	d430c <network_ready>

000d48b6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48b6:	2200      	movs	r2, #0
   d48b8:	4611      	mov	r1, r2
   d48ba:	6840      	ldr	r0, [r0, #4]
   d48bc:	f7ff bd46 	b.w	d434c <network_listening>

000d48c0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48c0:	2200      	movs	r2, #0
   d48c2:	4611      	mov	r1, r2
   d48c4:	6840      	ldr	r0, [r0, #4]
   d48c6:	f7ff bd51 	b.w	d436c <network_get_listen_timeout>

000d48ca <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48ca:	2200      	movs	r2, #0
   d48cc:	6840      	ldr	r0, [r0, #4]
   d48ce:	f7ff bd45 	b.w	d435c <network_set_listen_timeout>

000d48d2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48d2:	2200      	movs	r2, #0
   d48d4:	f081 0101 	eor.w	r1, r1, #1
   d48d8:	6840      	ldr	r0, [r0, #4]
   d48da:	f7ff bd2f 	b.w	d433c <network_listen>

000d48de <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d48de:	2300      	movs	r3, #0
   d48e0:	461a      	mov	r2, r3
   d48e2:	4619      	mov	r1, r3
   d48e4:	6840      	ldr	r0, [r0, #4]
   d48e6:	f7ff bd21 	b.w	d432c <network_off>

000d48ea <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d48ea:	2300      	movs	r3, #0
   d48ec:	461a      	mov	r2, r3
   d48ee:	4619      	mov	r1, r3
   d48f0:	6840      	ldr	r0, [r0, #4]
   d48f2:	f7ff bd13 	b.w	d431c <network_on>

000d48f6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48f6:	2200      	movs	r2, #0
   d48f8:	4611      	mov	r1, r2
   d48fa:	6840      	ldr	r0, [r0, #4]
   d48fc:	f7ff bcf6 	b.w	d42ec <network_connecting>

000d4900 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4900:	2200      	movs	r2, #0
   d4902:	2102      	movs	r1, #2
   d4904:	6840      	ldr	r0, [r0, #4]
   d4906:	f7ff bcf9 	b.w	d42fc <network_disconnect>

000d490a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d490a:	2300      	movs	r3, #0
   d490c:	461a      	mov	r2, r3
   d490e:	6840      	ldr	r0, [r0, #4]
   d4910:	f7ff bce4 	b.w	d42dc <network_connect>

000d4914 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4914:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4916:	4c08      	ldr	r4, [pc, #32]	; (d4938 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4918:	2528      	movs	r5, #40	; 0x28
   d491a:	462a      	mov	r2, r5
   d491c:	2100      	movs	r1, #0
   d491e:	4620      	mov	r0, r4
   d4920:	f000 fb59 	bl	d4fd6 <memset>
        cid = -1;
   d4924:	f04f 33ff 	mov.w	r3, #4294967295
   d4928:	6063      	str	r3, [r4, #4]
   d492a:	4b04      	ldr	r3, [pc, #16]	; (d493c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d492c:	8025      	strh	r5, [r4, #0]
   d492e:	2204      	movs	r2, #4
   d4930:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4932:	4a03      	ldr	r2, [pc, #12]	; (d4940 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4934:	601a      	str	r2, [r3, #0]
   d4936:	bd38      	pop	{r3, r4, r5, pc}
   d4938:	2003e428 	.word	0x2003e428
   d493c:	2003e420 	.word	0x2003e420
   d4940:	000d51e8 	.word	0x000d51e8

000d4944 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4944:	4770      	bx	lr

000d4946 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4946:	7441      	strb	r1, [r0, #17]
   d4948:	4770      	bx	lr

000d494a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d494a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d494c:	7c00      	ldrb	r0, [r0, #16]
   d494e:	f7ff fc61 	bl	d4214 <HAL_USART_Available_Data_For_Write>
}
   d4952:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4956:	bd08      	pop	{r3, pc}

000d4958 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4958:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d495a:	7c00      	ldrb	r0, [r0, #16]
   d495c:	f7ff fc3a 	bl	d41d4 <HAL_USART_Available_Data>
}
   d4960:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4964:	bd08      	pop	{r3, pc}

000d4966 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4966:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4968:	7c00      	ldrb	r0, [r0, #16]
   d496a:	f7ff fc43 	bl	d41f4 <HAL_USART_Peek_Data>
}
   d496e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4972:	bf28      	it	cs
   d4974:	f04f 30ff 	movcs.w	r0, #4294967295
   d4978:	bd08      	pop	{r3, pc}

000d497a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d497a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d497c:	7c00      	ldrb	r0, [r0, #16]
   d497e:	f7ff fc31 	bl	d41e4 <HAL_USART_Read_Data>
}
   d4982:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4986:	bf28      	it	cs
   d4988:	f04f 30ff 	movcs.w	r0, #4294967295
   d498c:	bd08      	pop	{r3, pc}

000d498e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d498e:	7c00      	ldrb	r0, [r0, #16]
   d4990:	f7ff bc38 	b.w	d4204 <HAL_USART_Flush_Data>

000d4994 <_ZN11USARTSerialD0Ev>:
   d4994:	b510      	push	{r4, lr}
   d4996:	2114      	movs	r1, #20
   d4998:	4604      	mov	r4, r0
   d499a:	f000 f9b8 	bl	d4d0e <_ZdlPvj>
   d499e:	4620      	mov	r0, r4
   d49a0:	bd10      	pop	{r4, pc}

000d49a2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d49a2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d49a4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d49a6:	4604      	mov	r4, r0
   d49a8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d49aa:	b925      	cbnz	r5, d49b6 <_ZN11USARTSerial5writeEh+0x14>
   d49ac:	7c00      	ldrb	r0, [r0, #16]
   d49ae:	f7ff fc31 	bl	d4214 <HAL_USART_Available_Data_For_Write>
   d49b2:	2800      	cmp	r0, #0
   d49b4:	dd05      	ble.n	d49c2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d49b6:	4631      	mov	r1, r6
   d49b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d49ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d49be:	f7ff bc01 	b.w	d41c4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d49c2:	4628      	mov	r0, r5
   d49c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d49c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d49c8:	b510      	push	{r4, lr}
   d49ca:	4604      	mov	r4, r0
   d49cc:	4608      	mov	r0, r1
   d49ce:	4611      	mov	r1, r2
   d49d0:	2200      	movs	r2, #0
   d49d2:	6062      	str	r2, [r4, #4]
   d49d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d49d8:	60a2      	str	r2, [r4, #8]
   d49da:	4a05      	ldr	r2, [pc, #20]	; (d49f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d49dc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d49de:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d49e0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d49e2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d49e4:	461a      	mov	r2, r3
   d49e6:	f7ff fbe5 	bl	d41b4 <HAL_USART_Init>
}
   d49ea:	4620      	mov	r0, r4
   d49ec:	bd10      	pop	{r4, pc}
   d49ee:	bf00      	nop
   d49f0:	000d521c 	.word	0x000d521c

000d49f4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d49f4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d49f6:	4d0c      	ldr	r5, [pc, #48]	; (d4a28 <_Z22__fetch_global_Serial1v+0x34>)
   d49f8:	6829      	ldr	r1, [r5, #0]
   d49fa:	f011 0401 	ands.w	r4, r1, #1
   d49fe:	d111      	bne.n	d4a24 <_Z22__fetch_global_Serial1v+0x30>
   d4a00:	4628      	mov	r0, r5
   d4a02:	f7ff fb4c 	bl	d409e <__cxa_guard_acquire>
   d4a06:	b168      	cbz	r0, d4a24 <_Z22__fetch_global_Serial1v+0x30>
   d4a08:	4a08      	ldr	r2, [pc, #32]	; (d4a2c <_Z22__fetch_global_Serial1v+0x38>)
   d4a0a:	4b09      	ldr	r3, [pc, #36]	; (d4a30 <_Z22__fetch_global_Serial1v+0x3c>)
   d4a0c:	4809      	ldr	r0, [pc, #36]	; (d4a34 <_Z22__fetch_global_Serial1v+0x40>)
   d4a0e:	4621      	mov	r1, r4
   d4a10:	f7ff ffda 	bl	d49c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4a14:	4628      	mov	r0, r5
   d4a16:	f7ff fb47 	bl	d40a8 <__cxa_guard_release>
   d4a1a:	4a07      	ldr	r2, [pc, #28]	; (d4a38 <_Z22__fetch_global_Serial1v+0x44>)
   d4a1c:	4907      	ldr	r1, [pc, #28]	; (d4a3c <_Z22__fetch_global_Serial1v+0x48>)
   d4a1e:	4805      	ldr	r0, [pc, #20]	; (d4a34 <_Z22__fetch_global_Serial1v+0x40>)
   d4a20:	f000 f970 	bl	d4d04 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4a24:	4803      	ldr	r0, [pc, #12]	; (d4a34 <_Z22__fetch_global_Serial1v+0x40>)
   d4a26:	bd38      	pop	{r3, r4, r5, pc}
   d4a28:	2003e4e8 	.word	0x2003e4e8
   d4a2c:	2003e4ec 	.word	0x2003e4ec
   d4a30:	2003e464 	.word	0x2003e464
   d4a34:	2003e450 	.word	0x2003e450
   d4a38:	2003e2cc 	.word	0x2003e2cc
   d4a3c:	000d4945 	.word	0x000d4945

000d4a40 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a40:	2200      	movs	r2, #0
   d4a42:	4611      	mov	r1, r2
   d4a44:	6840      	ldr	r0, [r0, #4]
   d4a46:	f7ff bc81 	b.w	d434c <network_listening>

000d4a4a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a4a:	2200      	movs	r2, #0
   d4a4c:	4611      	mov	r1, r2
   d4a4e:	6840      	ldr	r0, [r0, #4]
   d4a50:	f7ff bc8c 	b.w	d436c <network_get_listen_timeout>

000d4a54 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a54:	2200      	movs	r2, #0
   d4a56:	6840      	ldr	r0, [r0, #4]
   d4a58:	f7ff bc80 	b.w	d435c <network_set_listen_timeout>

000d4a5c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a5c:	2200      	movs	r2, #0
   d4a5e:	f081 0101 	eor.w	r1, r1, #1
   d4a62:	6840      	ldr	r0, [r0, #4]
   d4a64:	f7ff bc6a 	b.w	d433c <network_listen>

000d4a68 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4a68:	2300      	movs	r3, #0
   d4a6a:	461a      	mov	r2, r3
   d4a6c:	2101      	movs	r1, #1
   d4a6e:	6840      	ldr	r0, [r0, #4]
   d4a70:	f7ff bc5c 	b.w	d432c <network_off>

000d4a74 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a74:	2300      	movs	r3, #0
   d4a76:	461a      	mov	r2, r3
   d4a78:	4619      	mov	r1, r3
   d4a7a:	6840      	ldr	r0, [r0, #4]
   d4a7c:	f7ff bc4e 	b.w	d431c <network_on>

000d4a80 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a80:	2200      	movs	r2, #0
   d4a82:	4611      	mov	r1, r2
   d4a84:	6840      	ldr	r0, [r0, #4]
   d4a86:	f7ff bc41 	b.w	d430c <network_ready>

000d4a8a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a8a:	2200      	movs	r2, #0
   d4a8c:	4611      	mov	r1, r2
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	f7ff bc2c 	b.w	d42ec <network_connecting>

000d4a94 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a94:	2200      	movs	r2, #0
   d4a96:	2102      	movs	r1, #2
   d4a98:	6840      	ldr	r0, [r0, #4]
   d4a9a:	f7ff bc2f 	b.w	d42fc <network_disconnect>

000d4a9e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a9e:	2300      	movs	r3, #0
   d4aa0:	461a      	mov	r2, r3
   d4aa2:	6840      	ldr	r0, [r0, #4]
   d4aa4:	f7ff bc1a 	b.w	d42dc <network_connect>

000d4aa8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4aa8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4aaa:	4605      	mov	r5, r0
   d4aac:	b188      	cbz	r0, d4ad2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4aae:	6804      	ldr	r4, [r0, #0]
   d4ab0:	b14c      	cbz	r4, d4ac6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4ab2:	68a3      	ldr	r3, [r4, #8]
   d4ab4:	b11b      	cbz	r3, d4abe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ab6:	2203      	movs	r2, #3
   d4ab8:	4621      	mov	r1, r4
   d4aba:	4620      	mov	r0, r4
   d4abc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4abe:	2110      	movs	r1, #16
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	f000 f924 	bl	d4d0e <_ZdlPvj>
   d4ac6:	4628      	mov	r0, r5
   d4ac8:	2114      	movs	r1, #20
      }
   d4aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ace:	f000 b91e 	b.w	d4d0e <_ZdlPvj>
   d4ad2:	bd38      	pop	{r3, r4, r5, pc}

000d4ad4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4ad4:	b110      	cbz	r0, d4adc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4ad6:	6803      	ldr	r3, [r0, #0]
   d4ad8:	685b      	ldr	r3, [r3, #4]
   d4ada:	4718      	bx	r3
   d4adc:	4770      	bx	lr

000d4ade <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4ade:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4ae0:	6803      	ldr	r3, [r0, #0]
   d4ae2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4ae4:	b1bb      	cbz	r3, d4b16 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4ae6:	6858      	ldr	r0, [r3, #4]
   d4ae8:	f7ff fb34 	bl	d4154 <os_thread_is_current>
   d4aec:	b978      	cbnz	r0, d4b0e <_ZN6ThreadD1Ev+0x30>
   d4aee:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4af0:	7c5a      	ldrb	r2, [r3, #17]
   d4af2:	b912      	cbnz	r2, d4afa <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4af4:	6858      	ldr	r0, [r3, #4]
   d4af6:	f7ff fb35 	bl	d4164 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4afa:	6823      	ldr	r3, [r4, #0]
   d4afc:	6858      	ldr	r0, [r3, #4]
   d4afe:	f7ff fb39 	bl	d4174 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b02:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4b04:	2300      	movs	r3, #0
   d4b06:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4b08:	b128      	cbz	r0, d4b16 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4b0a:	f7ff ffcd 	bl	d4aa8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b0e:	6820      	ldr	r0, [r4, #0]
   d4b10:	b108      	cbz	r0, d4b16 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4b12:	f7ff ffc9 	bl	d4aa8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4b16:	4620      	mov	r0, r4
   d4b18:	bd10      	pop	{r4, pc}

000d4b1a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4b1a:	b538      	push	{r3, r4, r5, lr}
   d4b1c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b1e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4b22:	b108      	cbz	r0, d4b28 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4b24:	f7ff fab9 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b28:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4b2c:	b108      	cbz	r0, d4b32 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4b2e:	f7ff fb31 	bl	d4194 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b32:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4b36:	b135      	cbz	r5, d4b46 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b38:	4628      	mov	r0, r5
   d4b3a:	f7ff ffd0 	bl	d4ade <_ZN6ThreadD1Ev>
   d4b3e:	2104      	movs	r1, #4
   d4b40:	4628      	mov	r0, r5
   d4b42:	f000 f8e4 	bl	d4d0e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b46:	6820      	ldr	r0, [r4, #0]
   d4b48:	b108      	cbz	r0, d4b4e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4b4a:	f7ff ffc3 	bl	d4ad4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4b4e:	4620      	mov	r0, r4
   d4b50:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b54 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4b54:	b510      	push	{r4, lr}
   d4b56:	4b04      	ldr	r3, [pc, #16]	; (d4b68 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4b58:	4604      	mov	r4, r0
   d4b5a:	f840 3b08 	str.w	r3, [r0], #8
   d4b5e:	f7ff ffdc 	bl	d4b1a <_ZN5spark11MeshPublishD1Ev>
   d4b62:	4620      	mov	r0, r4
   d4b64:	bd10      	pop	{r4, pc}
   d4b66:	bf00      	nop
   d4b68:	000d524c 	.word	0x000d524c

000d4b6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4b6c:	b538      	push	{r3, r4, r5, lr}
   d4b6e:	4c0e      	ldr	r4, [pc, #56]	; (d4ba8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4b70:	4b0e      	ldr	r3, [pc, #56]	; (d4bac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4b72:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4b74:	2500      	movs	r5, #0
   d4b76:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4b78:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4b7c:	6063      	str	r3, [r4, #4]
   d4b7e:	60a5      	str	r5, [r4, #8]
   d4b80:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b84:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4b88:	f7ff fafc 	bl	d4184 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4b8c:	4b08      	ldr	r3, [pc, #32]	; (d4bb0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4b8e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4b92:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4b96:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4b98:	4620      	mov	r0, r4
   d4b9a:	4a06      	ldr	r2, [pc, #24]	; (d4bb4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4b9c:	4906      	ldr	r1, [pc, #24]	; (d4bb8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4ba2:	f000 b8af 	b.w	d4d04 <__aeabi_atexit>
   d4ba6:	bf00      	nop
   d4ba8:	2003e570 	.word	0x2003e570
   d4bac:	000d5280 	.word	0x000d5280
   d4bb0:	000d524c 	.word	0x000d524c
   d4bb4:	2003e2cc 	.word	0x2003e2cc
   d4bb8:	000d4b55 	.word	0x000d4b55

000d4bbc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4bbc:	2300      	movs	r3, #0
   d4bbe:	461a      	mov	r2, r3
   d4bc0:	6840      	ldr	r0, [r0, #4]
   d4bc2:	f7ff bb8b 	b.w	d42dc <network_connect>

000d4bc6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4bc6:	2200      	movs	r2, #0
   d4bc8:	2102      	movs	r1, #2
   d4bca:	6840      	ldr	r0, [r0, #4]
   d4bcc:	f7ff bb96 	b.w	d42fc <network_disconnect>

000d4bd0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4bd0:	2200      	movs	r2, #0
   d4bd2:	4611      	mov	r1, r2
   d4bd4:	6840      	ldr	r0, [r0, #4]
   d4bd6:	f7ff bb89 	b.w	d42ec <network_connecting>

000d4bda <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4bda:	2200      	movs	r2, #0
   d4bdc:	4611      	mov	r1, r2
   d4bde:	6840      	ldr	r0, [r0, #4]
   d4be0:	f7ff bb94 	b.w	d430c <network_ready>

000d4be4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4be4:	2300      	movs	r3, #0
   d4be6:	461a      	mov	r2, r3
   d4be8:	4619      	mov	r1, r3
   d4bea:	6840      	ldr	r0, [r0, #4]
   d4bec:	f7ff bb96 	b.w	d431c <network_on>

000d4bf0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4bf0:	2300      	movs	r3, #0
   d4bf2:	461a      	mov	r2, r3
   d4bf4:	4619      	mov	r1, r3
   d4bf6:	6840      	ldr	r0, [r0, #4]
   d4bf8:	f7ff bb98 	b.w	d432c <network_off>

000d4bfc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4bfc:	2200      	movs	r2, #0
   d4bfe:	f081 0101 	eor.w	r1, r1, #1
   d4c02:	6840      	ldr	r0, [r0, #4]
   d4c04:	f7ff bb9a 	b.w	d433c <network_listen>

000d4c08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4c08:	2200      	movs	r2, #0
   d4c0a:	6840      	ldr	r0, [r0, #4]
   d4c0c:	f7ff bba6 	b.w	d435c <network_set_listen_timeout>

000d4c10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4c10:	2200      	movs	r2, #0
   d4c12:	4611      	mov	r1, r2
   d4c14:	6840      	ldr	r0, [r0, #4]
   d4c16:	f7ff bba9 	b.w	d436c <network_get_listen_timeout>

000d4c1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4c1a:	2200      	movs	r2, #0
   d4c1c:	4611      	mov	r1, r2
   d4c1e:	6840      	ldr	r0, [r0, #4]
   d4c20:	f7ff bb94 	b.w	d434c <network_listening>

000d4c24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4c28:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4c2a:	b095      	sub	sp, #84	; 0x54
   d4c2c:	4616      	mov	r6, r2
   d4c2e:	460d      	mov	r5, r1
   d4c30:	4607      	mov	r7, r0
    IPAddress addr;
   d4c32:	f7ff fd7b 	bl	d472c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4c36:	4621      	mov	r1, r4
   d4c38:	2220      	movs	r2, #32
   d4c3a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4c3c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4c3e:	f000 f9ca 	bl	d4fd6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4c42:	2340      	movs	r3, #64	; 0x40
   d4c44:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4c46:	4621      	mov	r1, r4
   d4c48:	466b      	mov	r3, sp
   d4c4a:	aa0c      	add	r2, sp, #48	; 0x30
   d4c4c:	4630      	mov	r0, r6
   d4c4e:	f7ff fa61 	bl	d4114 <netdb_getaddrinfo>
    if (!r) {
   d4c52:	4604      	mov	r4, r0
   d4c54:	2800      	cmp	r0, #0
   d4c56:	d144      	bne.n	d4ce2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4c58:	4602      	mov	r2, r0
   d4c5a:	2101      	movs	r1, #1
   d4c5c:	6868      	ldr	r0, [r5, #4]
   d4c5e:	f7ff fb55 	bl	d430c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c62:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4c64:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c66:	4622      	mov	r2, r4
   d4c68:	6868      	ldr	r0, [r5, #4]
   d4c6a:	f7ff fb4f 	bl	d430c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c6e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c70:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4c72:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c74:	2e00      	cmp	r6, #0
   d4c76:	d034      	beq.n	d4ce2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4c78:	2900      	cmp	r1, #0
   d4c7a:	d132      	bne.n	d4ce2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4c7c:	6873      	ldr	r3, [r6, #4]
   d4c7e:	2b02      	cmp	r3, #2
   d4c80:	d002      	beq.n	d4c88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4c82:	2b0a      	cmp	r3, #10
   d4c84:	d009      	beq.n	d4c9a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4c86:	e02a      	b.n	d4cde <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4c88:	f1b8 0f00 	cmp.w	r8, #0
   d4c8c:	d027      	beq.n	d4cde <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4c8e:	6971      	ldr	r1, [r6, #20]
   d4c90:	4638      	mov	r0, r7
   d4c92:	3104      	adds	r1, #4
   d4c94:	f7ff fd77 	bl	d4786 <_ZN9IPAddressaSEPKh>
   d4c98:	e020      	b.n	d4cdc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4c9a:	f1b9 0f00 	cmp.w	r9, #0
   d4c9e:	d01e      	beq.n	d4cde <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4ca0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4ca2:	2211      	movs	r2, #17
   d4ca4:	a801      	add	r0, sp, #4
   d4ca6:	f000 f996 	bl	d4fd6 <memset>
                    a.v = 6;
   d4caa:	2306      	movs	r3, #6
   d4cac:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4cb0:	ad01      	add	r5, sp, #4
   d4cb2:	f104 0308 	add.w	r3, r4, #8
   d4cb6:	3418      	adds	r4, #24
   d4cb8:	6818      	ldr	r0, [r3, #0]
   d4cba:	6859      	ldr	r1, [r3, #4]
   d4cbc:	462a      	mov	r2, r5
   d4cbe:	c203      	stmia	r2!, {r0, r1}
   d4cc0:	3308      	adds	r3, #8
   d4cc2:	42a3      	cmp	r3, r4
   d4cc4:	4615      	mov	r5, r2
   d4cc6:	d1f7      	bne.n	d4cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4cc8:	a901      	add	r1, sp, #4
   d4cca:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4ccc:	ad07      	add	r5, sp, #28
   d4cce:	f7ff fd3b 	bl	d4748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4cd4:	1d3c      	adds	r4, r7, #4
   d4cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4cd8:	682b      	ldr	r3, [r5, #0]
   d4cda:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4cdc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4cde:	69f6      	ldr	r6, [r6, #28]
   d4ce0:	e7c8      	b.n	d4c74 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4ce2:	9800      	ldr	r0, [sp, #0]
   d4ce4:	f7ff fa0e 	bl	d4104 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4ce8:	4638      	mov	r0, r7
   d4cea:	b015      	add	sp, #84	; 0x54
   d4cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4cf0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4cf0:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4cf2:	4a03      	ldr	r2, [pc, #12]	; (d4d00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4cf4:	601a      	str	r2, [r3, #0]
   d4cf6:	2200      	movs	r2, #0
   d4cf8:	605a      	str	r2, [r3, #4]
   d4cfa:	4770      	bx	lr
   d4cfc:	2003e744 	.word	0x2003e744
   d4d00:	000d5280 	.word	0x000d5280

000d4d04 <__aeabi_atexit>:
   d4d04:	460b      	mov	r3, r1
   d4d06:	4601      	mov	r1, r0
   d4d08:	4618      	mov	r0, r3
   d4d0a:	f000 b94b 	b.w	d4fa4 <__cxa_atexit>

000d4d0e <_ZdlPvj>:
   d4d0e:	f7ff b9c2 	b.w	d4096 <_ZdlPv>
	...

000d4d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4d14:	4b18      	ldr	r3, [pc, #96]	; (d4d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4d16:	681a      	ldr	r2, [r3, #0]
   d4d18:	07d1      	lsls	r1, r2, #31
   d4d1a:	bf5c      	itt	pl
   d4d1c:	2201      	movpl	r2, #1
   d4d1e:	601a      	strpl	r2, [r3, #0]
   d4d20:	4b16      	ldr	r3, [pc, #88]	; (d4d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4d22:	681a      	ldr	r2, [r3, #0]
   d4d24:	07d2      	lsls	r2, r2, #31
   d4d26:	bf5c      	itt	pl
   d4d28:	2201      	movpl	r2, #1
   d4d2a:	601a      	strpl	r2, [r3, #0]
   d4d2c:	4b14      	ldr	r3, [pc, #80]	; (d4d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4d2e:	681a      	ldr	r2, [r3, #0]
   d4d30:	07d0      	lsls	r0, r2, #31
   d4d32:	bf5c      	itt	pl
   d4d34:	2201      	movpl	r2, #1
   d4d36:	601a      	strpl	r2, [r3, #0]
   d4d38:	4b12      	ldr	r3, [pc, #72]	; (d4d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4d3a:	681a      	ldr	r2, [r3, #0]
   d4d3c:	07d1      	lsls	r1, r2, #31
   d4d3e:	bf5c      	itt	pl
   d4d40:	2201      	movpl	r2, #1
   d4d42:	601a      	strpl	r2, [r3, #0]
   d4d44:	4b10      	ldr	r3, [pc, #64]	; (d4d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d4d46:	681a      	ldr	r2, [r3, #0]
   d4d48:	07d2      	lsls	r2, r2, #31
   d4d4a:	bf5c      	itt	pl
   d4d4c:	2201      	movpl	r2, #1
   d4d4e:	601a      	strpl	r2, [r3, #0]
   d4d50:	4b0e      	ldr	r3, [pc, #56]	; (d4d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d4d52:	681a      	ldr	r2, [r3, #0]
   d4d54:	07d0      	lsls	r0, r2, #31
   d4d56:	bf5c      	itt	pl
   d4d58:	2201      	movpl	r2, #1
   d4d5a:	601a      	strpl	r2, [r3, #0]
   d4d5c:	4b0c      	ldr	r3, [pc, #48]	; (d4d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d4d5e:	681a      	ldr	r2, [r3, #0]
   d4d60:	07d1      	lsls	r1, r2, #31
   d4d62:	bf5c      	itt	pl
   d4d64:	2201      	movpl	r2, #1
   d4d66:	601a      	strpl	r2, [r3, #0]
   d4d68:	4b0a      	ldr	r3, [pc, #40]	; (d4d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d4d6a:	681a      	ldr	r2, [r3, #0]
   d4d6c:	07d2      	lsls	r2, r2, #31
   d4d6e:	bf5c      	itt	pl
   d4d70:	2201      	movpl	r2, #1
   d4d72:	601a      	strpl	r2, [r3, #0]
   d4d74:	4770      	bx	lr
   d4d76:	bf00      	nop
   d4d78:	2003e76c 	.word	0x2003e76c
   d4d7c:	2003e768 	.word	0x2003e768
   d4d80:	2003e764 	.word	0x2003e764
   d4d84:	2003e760 	.word	0x2003e760
   d4d88:	2003e75c 	.word	0x2003e75c
   d4d8c:	2003e758 	.word	0x2003e758
   d4d90:	2003e754 	.word	0x2003e754
   d4d94:	2003e750 	.word	0x2003e750

000d4d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d4d98:	4b24      	ldr	r3, [pc, #144]	; (d4e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d4d9a:	681a      	ldr	r2, [r3, #0]
   d4d9c:	07d0      	lsls	r0, r2, #31
   d4d9e:	bf5c      	itt	pl
   d4da0:	2201      	movpl	r2, #1
   d4da2:	601a      	strpl	r2, [r3, #0]
   d4da4:	4b22      	ldr	r3, [pc, #136]	; (d4e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d4da6:	681a      	ldr	r2, [r3, #0]
   d4da8:	07d1      	lsls	r1, r2, #31
   d4daa:	bf5c      	itt	pl
   d4dac:	2201      	movpl	r2, #1
   d4dae:	601a      	strpl	r2, [r3, #0]
   d4db0:	4b20      	ldr	r3, [pc, #128]	; (d4e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d4db2:	681a      	ldr	r2, [r3, #0]
   d4db4:	07d2      	lsls	r2, r2, #31
   d4db6:	bf5c      	itt	pl
   d4db8:	2201      	movpl	r2, #1
   d4dba:	601a      	strpl	r2, [r3, #0]
   d4dbc:	4b1e      	ldr	r3, [pc, #120]	; (d4e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d4dbe:	681a      	ldr	r2, [r3, #0]
   d4dc0:	07d0      	lsls	r0, r2, #31
   d4dc2:	bf5c      	itt	pl
   d4dc4:	2201      	movpl	r2, #1
   d4dc6:	601a      	strpl	r2, [r3, #0]
   d4dc8:	4b1c      	ldr	r3, [pc, #112]	; (d4e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d4dca:	681a      	ldr	r2, [r3, #0]
   d4dcc:	07d1      	lsls	r1, r2, #31
   d4dce:	bf5c      	itt	pl
   d4dd0:	2201      	movpl	r2, #1
   d4dd2:	601a      	strpl	r2, [r3, #0]
   d4dd4:	4b1a      	ldr	r3, [pc, #104]	; (d4e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d4dd6:	681a      	ldr	r2, [r3, #0]
   d4dd8:	07d2      	lsls	r2, r2, #31
   d4dda:	bf5c      	itt	pl
   d4ddc:	2201      	movpl	r2, #1
   d4dde:	601a      	strpl	r2, [r3, #0]
   d4de0:	4b18      	ldr	r3, [pc, #96]	; (d4e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d4de2:	681a      	ldr	r2, [r3, #0]
   d4de4:	07d0      	lsls	r0, r2, #31
   d4de6:	bf5c      	itt	pl
   d4de8:	2201      	movpl	r2, #1
   d4dea:	601a      	strpl	r2, [r3, #0]
   d4dec:	4b16      	ldr	r3, [pc, #88]	; (d4e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d4dee:	681a      	ldr	r2, [r3, #0]
   d4df0:	07d1      	lsls	r1, r2, #31
   d4df2:	bf5c      	itt	pl
   d4df4:	2201      	movpl	r2, #1
   d4df6:	601a      	strpl	r2, [r3, #0]
   d4df8:	4b14      	ldr	r3, [pc, #80]	; (d4e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d4dfa:	681a      	ldr	r2, [r3, #0]
   d4dfc:	07d2      	lsls	r2, r2, #31
   d4dfe:	bf5c      	itt	pl
   d4e00:	2201      	movpl	r2, #1
   d4e02:	601a      	strpl	r2, [r3, #0]
   d4e04:	4b12      	ldr	r3, [pc, #72]	; (d4e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d4e06:	681a      	ldr	r2, [r3, #0]
   d4e08:	07d0      	lsls	r0, r2, #31
   d4e0a:	bf5c      	itt	pl
   d4e0c:	2201      	movpl	r2, #1
   d4e0e:	601a      	strpl	r2, [r3, #0]
   d4e10:	4b10      	ldr	r3, [pc, #64]	; (d4e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d4e12:	681a      	ldr	r2, [r3, #0]
   d4e14:	07d1      	lsls	r1, r2, #31
   d4e16:	bf5c      	itt	pl
   d4e18:	2201      	movpl	r2, #1
   d4e1a:	601a      	strpl	r2, [r3, #0]
   d4e1c:	4b0e      	ldr	r3, [pc, #56]	; (d4e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d4e1e:	681a      	ldr	r2, [r3, #0]
   d4e20:	07d2      	lsls	r2, r2, #31
   d4e22:	bf5c      	itt	pl
   d4e24:	2201      	movpl	r2, #1
   d4e26:	601a      	strpl	r2, [r3, #0]
   d4e28:	4770      	bx	lr
   d4e2a:	bf00      	nop
   d4e2c:	2003e79c 	.word	0x2003e79c
   d4e30:	2003e798 	.word	0x2003e798
   d4e34:	2003e794 	.word	0x2003e794
   d4e38:	2003e790 	.word	0x2003e790
   d4e3c:	2003e78c 	.word	0x2003e78c
   d4e40:	2003e788 	.word	0x2003e788
   d4e44:	2003e784 	.word	0x2003e784
   d4e48:	2003e780 	.word	0x2003e780
   d4e4c:	2003e77c 	.word	0x2003e77c
   d4e50:	2003e778 	.word	0x2003e778
   d4e54:	2003e774 	.word	0x2003e774
   d4e58:	2003e770 	.word	0x2003e770

000d4e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d4e5c:	4b24      	ldr	r3, [pc, #144]	; (d4ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d4e5e:	681a      	ldr	r2, [r3, #0]
   d4e60:	07d0      	lsls	r0, r2, #31
   d4e62:	bf5c      	itt	pl
   d4e64:	2201      	movpl	r2, #1
   d4e66:	601a      	strpl	r2, [r3, #0]
   d4e68:	4b22      	ldr	r3, [pc, #136]	; (d4ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d4e6a:	681a      	ldr	r2, [r3, #0]
   d4e6c:	07d1      	lsls	r1, r2, #31
   d4e6e:	bf5c      	itt	pl
   d4e70:	2201      	movpl	r2, #1
   d4e72:	601a      	strpl	r2, [r3, #0]
   d4e74:	4b20      	ldr	r3, [pc, #128]	; (d4ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d4e76:	681a      	ldr	r2, [r3, #0]
   d4e78:	07d2      	lsls	r2, r2, #31
   d4e7a:	bf5c      	itt	pl
   d4e7c:	2201      	movpl	r2, #1
   d4e7e:	601a      	strpl	r2, [r3, #0]
   d4e80:	4b1e      	ldr	r3, [pc, #120]	; (d4efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d4e82:	681a      	ldr	r2, [r3, #0]
   d4e84:	07d0      	lsls	r0, r2, #31
   d4e86:	bf5c      	itt	pl
   d4e88:	2201      	movpl	r2, #1
   d4e8a:	601a      	strpl	r2, [r3, #0]
   d4e8c:	4b1c      	ldr	r3, [pc, #112]	; (d4f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d4e8e:	681a      	ldr	r2, [r3, #0]
   d4e90:	07d1      	lsls	r1, r2, #31
   d4e92:	bf5c      	itt	pl
   d4e94:	2201      	movpl	r2, #1
   d4e96:	601a      	strpl	r2, [r3, #0]
   d4e98:	4b1a      	ldr	r3, [pc, #104]	; (d4f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d4e9a:	681a      	ldr	r2, [r3, #0]
   d4e9c:	07d2      	lsls	r2, r2, #31
   d4e9e:	bf5c      	itt	pl
   d4ea0:	2201      	movpl	r2, #1
   d4ea2:	601a      	strpl	r2, [r3, #0]
   d4ea4:	4b18      	ldr	r3, [pc, #96]	; (d4f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d4ea6:	681a      	ldr	r2, [r3, #0]
   d4ea8:	07d0      	lsls	r0, r2, #31
   d4eaa:	bf5c      	itt	pl
   d4eac:	2201      	movpl	r2, #1
   d4eae:	601a      	strpl	r2, [r3, #0]
   d4eb0:	4b16      	ldr	r3, [pc, #88]	; (d4f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d4eb2:	681a      	ldr	r2, [r3, #0]
   d4eb4:	07d1      	lsls	r1, r2, #31
   d4eb6:	bf5c      	itt	pl
   d4eb8:	2201      	movpl	r2, #1
   d4eba:	601a      	strpl	r2, [r3, #0]
   d4ebc:	4b14      	ldr	r3, [pc, #80]	; (d4f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d4ebe:	681a      	ldr	r2, [r3, #0]
   d4ec0:	07d2      	lsls	r2, r2, #31
   d4ec2:	bf5c      	itt	pl
   d4ec4:	2201      	movpl	r2, #1
   d4ec6:	601a      	strpl	r2, [r3, #0]
   d4ec8:	4b12      	ldr	r3, [pc, #72]	; (d4f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d4eca:	681a      	ldr	r2, [r3, #0]
   d4ecc:	07d0      	lsls	r0, r2, #31
   d4ece:	bf5c      	itt	pl
   d4ed0:	2201      	movpl	r2, #1
   d4ed2:	601a      	strpl	r2, [r3, #0]
   d4ed4:	4b10      	ldr	r3, [pc, #64]	; (d4f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d4ed6:	681a      	ldr	r2, [r3, #0]
   d4ed8:	07d1      	lsls	r1, r2, #31
   d4eda:	bf5c      	itt	pl
   d4edc:	2201      	movpl	r2, #1
   d4ede:	601a      	strpl	r2, [r3, #0]
   d4ee0:	4b0e      	ldr	r3, [pc, #56]	; (d4f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d4ee2:	681a      	ldr	r2, [r3, #0]
   d4ee4:	07d2      	lsls	r2, r2, #31
   d4ee6:	bf5c      	itt	pl
   d4ee8:	2201      	movpl	r2, #1
   d4eea:	601a      	strpl	r2, [r3, #0]
   d4eec:	4770      	bx	lr
   d4eee:	bf00      	nop
   d4ef0:	2003e7cc 	.word	0x2003e7cc
   d4ef4:	2003e7c8 	.word	0x2003e7c8
   d4ef8:	2003e7c4 	.word	0x2003e7c4
   d4efc:	2003e7c0 	.word	0x2003e7c0
   d4f00:	2003e7bc 	.word	0x2003e7bc
   d4f04:	2003e7b8 	.word	0x2003e7b8
   d4f08:	2003e7b4 	.word	0x2003e7b4
   d4f0c:	2003e7b0 	.word	0x2003e7b0
   d4f10:	2003e7ac 	.word	0x2003e7ac
   d4f14:	2003e7a8 	.word	0x2003e7a8
   d4f18:	2003e7a4 	.word	0x2003e7a4
   d4f1c:	2003e7a0 	.word	0x2003e7a0

000d4f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4f20:	4b18      	ldr	r3, [pc, #96]	; (d4f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4f22:	681a      	ldr	r2, [r3, #0]
   d4f24:	07d1      	lsls	r1, r2, #31
   d4f26:	bf5c      	itt	pl
   d4f28:	2201      	movpl	r2, #1
   d4f2a:	601a      	strpl	r2, [r3, #0]
   d4f2c:	4b16      	ldr	r3, [pc, #88]	; (d4f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4f2e:	681a      	ldr	r2, [r3, #0]
   d4f30:	07d2      	lsls	r2, r2, #31
   d4f32:	bf5c      	itt	pl
   d4f34:	2201      	movpl	r2, #1
   d4f36:	601a      	strpl	r2, [r3, #0]
   d4f38:	4b14      	ldr	r3, [pc, #80]	; (d4f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4f3a:	681a      	ldr	r2, [r3, #0]
   d4f3c:	07d0      	lsls	r0, r2, #31
   d4f3e:	bf5c      	itt	pl
   d4f40:	2201      	movpl	r2, #1
   d4f42:	601a      	strpl	r2, [r3, #0]
   d4f44:	4b12      	ldr	r3, [pc, #72]	; (d4f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4f46:	681a      	ldr	r2, [r3, #0]
   d4f48:	07d1      	lsls	r1, r2, #31
   d4f4a:	bf5c      	itt	pl
   d4f4c:	2201      	movpl	r2, #1
   d4f4e:	601a      	strpl	r2, [r3, #0]
   d4f50:	4b10      	ldr	r3, [pc, #64]	; (d4f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d4f52:	681a      	ldr	r2, [r3, #0]
   d4f54:	07d2      	lsls	r2, r2, #31
   d4f56:	bf5c      	itt	pl
   d4f58:	2201      	movpl	r2, #1
   d4f5a:	601a      	strpl	r2, [r3, #0]
   d4f5c:	4b0e      	ldr	r3, [pc, #56]	; (d4f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d4f5e:	681a      	ldr	r2, [r3, #0]
   d4f60:	07d0      	lsls	r0, r2, #31
   d4f62:	bf5c      	itt	pl
   d4f64:	2201      	movpl	r2, #1
   d4f66:	601a      	strpl	r2, [r3, #0]
   d4f68:	4b0c      	ldr	r3, [pc, #48]	; (d4f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d4f6a:	681a      	ldr	r2, [r3, #0]
   d4f6c:	07d1      	lsls	r1, r2, #31
   d4f6e:	bf5c      	itt	pl
   d4f70:	2201      	movpl	r2, #1
   d4f72:	601a      	strpl	r2, [r3, #0]
   d4f74:	4b0a      	ldr	r3, [pc, #40]	; (d4fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d4f76:	681a      	ldr	r2, [r3, #0]
   d4f78:	07d2      	lsls	r2, r2, #31
   d4f7a:	bf5c      	itt	pl
   d4f7c:	2201      	movpl	r2, #1
   d4f7e:	601a      	strpl	r2, [r3, #0]
   d4f80:	4770      	bx	lr
   d4f82:	bf00      	nop
   d4f84:	2003e7ec 	.word	0x2003e7ec
   d4f88:	2003e7e8 	.word	0x2003e7e8
   d4f8c:	2003e7e4 	.word	0x2003e7e4
   d4f90:	2003e7e0 	.word	0x2003e7e0
   d4f94:	2003e7dc 	.word	0x2003e7dc
   d4f98:	2003e7d8 	.word	0x2003e7d8
   d4f9c:	2003e7d4 	.word	0x2003e7d4
   d4fa0:	2003e7d0 	.word	0x2003e7d0

000d4fa4 <__cxa_atexit>:
   d4fa4:	b510      	push	{r4, lr}
   d4fa6:	4c05      	ldr	r4, [pc, #20]	; (d4fbc <__cxa_atexit+0x18>)
   d4fa8:	4613      	mov	r3, r2
   d4faa:	b12c      	cbz	r4, d4fb8 <__cxa_atexit+0x14>
   d4fac:	460a      	mov	r2, r1
   d4fae:	4601      	mov	r1, r0
   d4fb0:	2002      	movs	r0, #2
   d4fb2:	f3af 8000 	nop.w
   d4fb6:	bd10      	pop	{r4, pc}
   d4fb8:	4620      	mov	r0, r4
   d4fba:	bd10      	pop	{r4, pc}
   d4fbc:	00000000 	.word	0x00000000

000d4fc0 <memcpy>:
   d4fc0:	b510      	push	{r4, lr}
   d4fc2:	1e43      	subs	r3, r0, #1
   d4fc4:	440a      	add	r2, r1
   d4fc6:	4291      	cmp	r1, r2
   d4fc8:	d004      	beq.n	d4fd4 <memcpy+0x14>
   d4fca:	f811 4b01 	ldrb.w	r4, [r1], #1
   d4fce:	f803 4f01 	strb.w	r4, [r3, #1]!
   d4fd2:	e7f8      	b.n	d4fc6 <memcpy+0x6>
   d4fd4:	bd10      	pop	{r4, pc}

000d4fd6 <memset>:
   d4fd6:	4402      	add	r2, r0
   d4fd8:	4603      	mov	r3, r0
   d4fda:	4293      	cmp	r3, r2
   d4fdc:	d002      	beq.n	d4fe4 <memset+0xe>
   d4fde:	f803 1b01 	strb.w	r1, [r3], #1
   d4fe2:	e7fa      	b.n	d4fda <memset+0x4>
   d4fe4:	4770      	bx	lr
	...

000d4fe8 <srand>:
   d4fe8:	b538      	push	{r3, r4, r5, lr}
   d4fea:	4b12      	ldr	r3, [pc, #72]	; (d5034 <srand+0x4c>)
   d4fec:	681c      	ldr	r4, [r3, #0]
   d4fee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d4ff0:	4605      	mov	r5, r0
   d4ff2:	b9d3      	cbnz	r3, d502a <srand+0x42>
   d4ff4:	2018      	movs	r0, #24
   d4ff6:	f7ff f9c9 	bl	d438c <malloc>
   d4ffa:	f243 330e 	movw	r3, #13070	; 0x330e
   d4ffe:	63a0      	str	r0, [r4, #56]	; 0x38
   d5000:	8003      	strh	r3, [r0, #0]
   d5002:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5006:	8043      	strh	r3, [r0, #2]
   d5008:	f241 2334 	movw	r3, #4660	; 0x1234
   d500c:	8083      	strh	r3, [r0, #4]
   d500e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5012:	80c3      	strh	r3, [r0, #6]
   d5014:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5018:	8103      	strh	r3, [r0, #8]
   d501a:	2305      	movs	r3, #5
   d501c:	8143      	strh	r3, [r0, #10]
   d501e:	230b      	movs	r3, #11
   d5020:	8183      	strh	r3, [r0, #12]
   d5022:	2201      	movs	r2, #1
   d5024:	2300      	movs	r3, #0
   d5026:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d502a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d502c:	2200      	movs	r2, #0
   d502e:	611d      	str	r5, [r3, #16]
   d5030:	615a      	str	r2, [r3, #20]
   d5032:	bd38      	pop	{r3, r4, r5, pc}
   d5034:	2003e2c8 	.word	0x2003e2c8

000d5038 <strlen>:
   d5038:	4603      	mov	r3, r0
   d503a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d503e:	2a00      	cmp	r2, #0
   d5040:	d1fb      	bne.n	d503a <strlen+0x2>
   d5042:	1a18      	subs	r0, r3, r0
   d5044:	3801      	subs	r0, #1
   d5046:	4770      	bx	lr

000d5048 <dynalib_user>:
   d5048:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5058:	0000 0000                                   ....

000d505c <_ZTVN5spark13EthernetClassE>:
	...
   d5064:	440b 000d 4401 000d 43f7 000d 43ed 000d     .D...D...C...C..
   d5074:	43e1 000d 43d5 000d 43c9 000d 43c1 000d     .C...C...C...C..
   d5084:	43b7 000d 43ad 000d 4c25 000d 6162 6475     .C...C..%L..baud
   d5094:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d50a4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d50b4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d50c4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d50d4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d50e4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d50f4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5104:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5114:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5124:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5134:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d5144:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d5154:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d5164:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d5174:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d5184:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d5194:	7463 6d69 0065 0000                         ctime...

000d519c <_ZTV9IPAddress>:
	...
   d51a4:	46c9 000d 46b9 000d 46bb 000d               .F...F...F..

000d51b0 <_ZTV9USBSerial>:
	...
   d51b8:	47a1 000d 47f1 000d 47ff 000d 44b5 000d     .G...G...G...D..
   d51c8:	47dd 000d 47a3 000d 47b9 000d 47eb 000d     .G...G...G...G..
   d51d8:	47cf 000d 479d 000d                         .G...G..

000d51e0 <_ZTVN5spark13CellularClassE>:
	...
   d51e8:	490b 000d 4901 000d 48f7 000d 48ad 000d     .I...I...H...H..
   d51f8:	48eb 000d 48df 000d 48d3 000d 48cb 000d     .H...H...H...H..
   d5208:	48c1 000d 48b7 000d 4c25 000d               .H...H..%L..

000d5214 <_ZTV11USARTSerial>:
	...
   d521c:	4945 000d 4995 000d 49a3 000d 44b5 000d     EI...I...I...D..
   d522c:	4959 000d 497b 000d 4967 000d 498f 000d     YI..{I..gI...I..
   d523c:	4947 000d 494b 000d                         GI..KI..

000d5244 <_ZTVN5spark9MeshClassE>:
	...
   d524c:	4a9f 000d 4a95 000d 4a8b 000d 4a81 000d     .J...J...J...J..
   d525c:	4a75 000d 4a69 000d 4a5d 000d 4a55 000d     uJ..iJ..]J..UJ..
   d526c:	4a4b 000d 4a41 000d 4c25 000d               KJ..AJ..%L..

000d5278 <_ZTVN5spark12NetworkClassE>:
	...
   d5280:	4bbd 000d 4bc7 000d 4bd1 000d 4bdb 000d     .K...K...K...K..
   d5290:	4be5 000d 4bf1 000d 4bfd 000d 4c09 000d     .K...K...K...L..
   d52a0:	4c11 000d 4c1b 000d 4c25 000d               .L...L..%L..

000d52ac <__sf_fake_stdin>:
	...

000d52cc <__sf_fake_stdout>:
	...

000d52ec <__sf_fake_stderr>:
	...
   d530c:	0043                                        C.

000d530e <link_const_variable_data_end>:
	...

000d5310 <link_constructors_location>:
   d5310:	000d40c7 	.word	0x000d40c7
   d5314:	000d4415 	.word	0x000d4415
   d5318:	000d4449 	.word	0x000d4449
   d531c:	000d448d 	.word	0x000d448d
   d5320:	000d4549 	.word	0x000d4549
   d5324:	000d4559 	.word	0x000d4559
   d5328:	000d458d 	.word	0x000d458d
   d532c:	000d4915 	.word	0x000d4915
   d5330:	000d4b6d 	.word	0x000d4b6d
   d5334:	000d4cf1 	.word	0x000d4cf1
   d5338:	000d4d15 	.word	0x000d4d15
   d533c:	000d4d99 	.word	0x000d4d99
   d5340:	000d4e5d 	.word	0x000d4e5d
   d5344:	000d4f21 	.word	0x000d4f21

000d5348 <link_constructors_end>:
	...
